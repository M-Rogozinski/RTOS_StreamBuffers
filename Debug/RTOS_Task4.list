
RTOS_Task4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009338  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08009508  08009508  00019508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009700  08009700  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009700  08009700  00019700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009708  08009708  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009708  08009708  00019708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800970c  0800970c  0001970c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b88  20000074  08009784  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bfc  08009784  00024bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021cca  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047ae  00000000  00000000  00041d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  00046520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001890  00000000  00000000  00047f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b80  00000000  00000000  000497f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002114f  00000000  00000000  00070370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb073  00000000  00000000  000914bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017c532  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007348  00000000  00000000  0017c584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080094f0 	.word	0x080094f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080094f0 	.word	0x080094f0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <I2C_DEV_Write>:
* @param  Register_Addr : Register Address	
* @param  Register_Data : Register data
* @param  return Write state,Write success is 1,Write fail is 0
**********************************************************************************************/
uint8_t I2C_DEV_Write(uint16_t I2C_Addr,uint16_t Register_Addr,uint8_t Register_Data)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af04      	add	r7, sp, #16
 80005ca:	4603      	mov	r3, r0
 80005cc:	80fb      	strh	r3, [r7, #6]
 80005ce:	460b      	mov	r3, r1
 80005d0:	80bb      	strh	r3, [r7, #4]
 80005d2:	4613      	mov	r3, r2
 80005d4:	70fb      	strb	r3, [r7, #3]
	if(HAL_I2C_Mem_Write(&hi2c1, I2C_Addr, Register_Addr, I2C_MEMADD_SIZE_8BIT, &Register_Data, 1, 1000) == HAL_OK)
 80005d6:	88ba      	ldrh	r2, [r7, #4]
 80005d8:	88f9      	ldrh	r1, [r7, #6]
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	9302      	str	r3, [sp, #8]
 80005e0:	2301      	movs	r3, #1
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	1cfb      	adds	r3, r7, #3
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2301      	movs	r3, #1
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <I2C_DEV_Write+0x40>)
 80005ec:	f001 fef8 	bl	80023e0 <HAL_I2C_Mem_Write>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d101      	bne.n	80005fa <I2C_DEV_Write+0x36>
	{
		return Write_success;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e000      	b.n	80005fc <I2C_DEV_Write+0x38>
	} else{
		return Write_fail;
 80005fa:	2300      	movs	r3, #0
	}
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200000f4 	.word	0x200000f4

08000608 <I2C_DEV_Read>:
* @param  Register_Addr : Register Address	
* @param  
* @param  return read data (uchar)
**********************************************************************************************/
uint8_t I2C_DEV_Read(uint16_t Register_Addr)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af04      	add	r7, sp, #16
 800060e:	4603      	mov	r3, r0
 8000610:	80fb      	strh	r3, [r7, #6]
	uint8_t ReadBuffer[1];
	HAL_I2C_Mem_Read(&hi2c1, ADDR_FLOAT_Read, Register_Addr, I2C_MEMADD_SIZE_8BIT,ReadBuffer,1, 1000);
 8000612:	88fa      	ldrh	r2, [r7, #6]
 8000614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000618:	9302      	str	r3, [sp, #8]
 800061a:	2301      	movs	r3, #1
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	2173      	movs	r1, #115	; 0x73
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <I2C_DEV_Read+0x30>)
 800062a:	f001 ffd3 	bl	80025d4 <HAL_I2C_Mem_Read>
	return ReadBuffer[0];
 800062e:	7b3b      	ldrb	r3, [r7, #12]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000f4 	.word	0x200000f4

0800063c <I2C_DEV_init>:
* @param   	power on ,set gain is 16,interrupt is 402ms
* @param   
* @param    This field selects the integration time for each conversion.
**********************************************************************************************/
void I2C_DEV_init(void)
{ 
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	/* write date from tsl2561 */
	I2C_DEV_Write(ADDR_FLOAT_Write,COMMAND_CMD | CONTROL,CONTROL_POWERON);//power on
 8000640:	2201      	movs	r2, #1
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	2072      	movs	r0, #114	; 0x72
 8000646:	f7ff ffbd 	bl	80005c4 <I2C_DEV_Write>
	HAL_Delay(2000);//Wait 2 seconds for power on
 800064a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800064e:	f000 fe43 	bl	80012d8 <HAL_Delay>
	
	I2C_DEV_Write(ADDR_FLOAT_Write,COMMAND_CMD | TIMING, INTEGRATIONTIME_400MS);  //400MS
 8000652:	226c      	movs	r2, #108	; 0x6c
 8000654:	2181      	movs	r1, #129	; 0x81
 8000656:	2072      	movs	r0, #114	; 0x72
 8000658:	f7ff ffb4 	bl	80005c4 <I2C_DEV_Write>
	I2C_DEV_Write(ADDR_FLOAT_Write,COMMAND_CMD | CONTROL, ADC_EN | CONTROL_POWERON); //Every ADC cycle generates interrupt
 800065c:	2203      	movs	r2, #3
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	2072      	movs	r0, #114	; 0x72
 8000662:	f7ff ffaf 	bl	80005c4 <I2C_DEV_Write>
	I2C_DEV_Write(ADDR_FLOAT_Write,COMMAND_CMD | INTERRUPT, INTR_INTER_MODE);	//TEST MODE
 8000666:	2218      	movs	r2, #24
 8000668:	2182      	movs	r1, #130	; 0x82
 800066a:	2072      	movs	r0, #114	; 0x72
 800066c:	f7ff ffaa 	bl	80005c4 <I2C_DEV_Write>
	I2C_DEV_Write(ADDR_FLOAT_Write,COMMAND_CMD | ANALOG, GAIN_16X);				//GAIN = 16
 8000670:	2202      	movs	r2, #2
 8000672:	2187      	movs	r1, #135	; 0x87
 8000674:	2072      	movs	r0, #114	; 0x72
 8000676:	f7ff ffa5 	bl	80005c4 <I2C_DEV_Write>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <Read_Channel>:
* @param    
* @param   	read two ADC data
* @param     
**********************************************************************************************/
void Read_Channel()
{	
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	uint8_t DataLow,DataHigh;
	DataLow = I2C_DEV_Read(COMMAND_CMD | TRANSACTION | DATA0LOW);
 8000686:	20d4      	movs	r0, #212	; 0xd4
 8000688:	f7ff ffbe 	bl	8000608 <I2C_DEV_Read>
 800068c:	4603      	mov	r3, r0
 800068e:	71fb      	strb	r3, [r7, #7]
	DataHigh = I2C_DEV_Read(COMMAND_CMD | TRANSACTION | DATA0HIGH);
 8000690:	20d5      	movs	r0, #213	; 0xd5
 8000692:	f7ff ffb9 	bl	8000608 <I2C_DEV_Read>
 8000696:	4603      	mov	r3, r0
 8000698:	71bb      	strb	r3, [r7, #6]
	Channel_0 = 256 * DataHigh + DataLow ;
 800069a:	79bb      	ldrb	r3, [r7, #6]
 800069c:	b29b      	uxth	r3, r3
 800069e:	021b      	lsls	r3, r3, #8
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	4413      	add	r3, r2
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <Read_Channel+0x60>)
 80006ac:	801a      	strh	r2, [r3, #0]
		
	DataLow = I2C_DEV_Read(COMMAND_CMD | TRANSACTION | DATA1LOW);
 80006ae:	20d6      	movs	r0, #214	; 0xd6
 80006b0:	f7ff ffaa 	bl	8000608 <I2C_DEV_Read>
 80006b4:	4603      	mov	r3, r0
 80006b6:	71fb      	strb	r3, [r7, #7]
	DataHigh = I2C_DEV_Read(COMMAND_CMD | TRANSACTION | DATA1HIGH);
 80006b8:	20d7      	movs	r0, #215	; 0xd7
 80006ba:	f7ff ffa5 	bl	8000608 <I2C_DEV_Read>
 80006be:	4603      	mov	r3, r0
 80006c0:	71bb      	strb	r3, [r7, #6]
	Channel_1 = 256 * DataHigh + DataLow ;
 80006c2:	79bb      	ldrb	r3, [r7, #6]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	021b      	lsls	r3, r3, #8
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	4413      	add	r3, r2
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <Read_Channel+0x64>)
 80006d4:	801a      	strh	r2, [r3, #0]
	
//	printf("Channel_0 = %d\n",Channel_0);
//	printf("Channel_1 = %d\n",Channel_1);
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000090 	.word	0x20000090
 80006e4:	20000092 	.word	0x20000092

080006e8 <calculateLux>:
* @param    Channel_0 and Channel_1 is for TSL2561_Read_Channel();
* @param   	// Arguments: unsigned int iGain - gain, where 0:1X, 1:8X, 2:16X, 3:128X
* @param   	// unsigned int tIntCycles - INTEG_CYCLES defined in Timing Register
**********************************************************************************************/
uint32_t calculateLux(uint16_t iGain,uint16_t tIntCycles)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	; 0x30
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	460a      	mov	r2, r1
 80006f2:	80fb      	strh	r3, [r7, #6]
 80006f4:	4613      	mov	r3, r2
 80006f6:	80bb      	strh	r3, [r7, #4]
  unsigned long chScale0;
  unsigned long chScale1;
  unsigned long channel1;
  unsigned long channel0;
  unsigned long temp;
  unsigned long ratio1 = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  unsigned long ratio;
  unsigned long lux_temp;
  unsigned int b, m;

  // No scaling if nominal integration (148 cycles or 400 ms) is used
  if (tIntCycles == NOM_INTEG_CYCLE)
 80006fc:	88bb      	ldrh	r3, [r7, #4]
 80006fe:	2b94      	cmp	r3, #148	; 0x94
 8000700:	d103      	bne.n	800070a <calculateLux+0x22>
  {
//     chScale0 = 65536;
	  chScale0 = (1 << (CH_SCALE));
 8000702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000708:	e005      	b.n	8000716 <calculateLux+0x2e>
  }
  else
    chScale0 = (NOM_INTEG_CYCLE << CH_SCALE) / tIntCycles;
 800070a:	88bb      	ldrh	r3, [r7, #4]
 800070c:	f44f 0214 	mov.w	r2, #9699328	; 0x940000
 8000710:	fb92 f3f3 	sdiv	r3, r2, r3
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
  switch (iGain)
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d82d      	bhi.n	8000778 <calculateLux+0x90>
 800071c:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <calculateLux+0x3c>)
 800071e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000722:	bf00      	nop
 8000724:	08000735 	.word	0x08000735
 8000728:	0800073b 	.word	0x0800073b
 800072c:	08000747 	.word	0x08000747
 8000730:	08000753 	.word	0x08000753
  {
    case 0: // 1x gain
      chScale1 = chScale0; // No scale. Nominal setting
 8000734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8000738:	e01e      	b.n	8000778 <calculateLux+0x90>
    case 1: // 8x gain
      chScale0 = chScale0 >> 3; // Scale/multiply value by 1/8
 800073a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073c:	08db      	lsrs	r3, r3, #3
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
      chScale1 = chScale0;
 8000740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8000744:	e018      	b.n	8000778 <calculateLux+0x90>
    case 2: // 16x gain
      chScale0 = chScale0 >> 4; // Scale/multiply value by 1/16
 8000746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000748:	091b      	lsrs	r3, r3, #4
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
      chScale1 = chScale0;
 800074c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8000750:	e012      	b.n	8000778 <calculateLux+0x90>
    case 3: // 128x gain
      chScale1 = chScale0 / CH1GAIN128X;
 8000752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000754:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <calculateLux+0x15c>)
 8000756:	fba3 1302 	umull	r1, r3, r3, r2
 800075a:	1ad2      	subs	r2, r2, r3
 800075c:	0852      	lsrs	r2, r2, #1
 800075e:	4413      	add	r3, r2
 8000760:	099b      	lsrs	r3, r3, #6
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
      chScale0 = chScale0 / CH0GAIN128X;
 8000764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000766:	4b38      	ldr	r3, [pc, #224]	; (8000848 <calculateLux+0x160>)
 8000768:	fba3 1302 	umull	r1, r3, r3, r2
 800076c:	1ad2      	subs	r2, r2, r3
 800076e:	0852      	lsrs	r2, r2, #1
 8000770:	4413      	add	r3, r2
 8000772:	099b      	lsrs	r3, r3, #6
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8000776:	bf00      	nop
  }
  // Read Channel for ADC
  Read_Channel();
 8000778:	f7ff ff82 	bl	8000680 <Read_Channel>
  // scale the channel values
  channel0 = (Channel_0 * chScale0) >>  CH_SCALE;
 800077c:	4b33      	ldr	r3, [pc, #204]	; (800084c <calculateLux+0x164>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000784:	fb02 f303 	mul.w	r3, r2, r3
 8000788:	0c1b      	lsrs	r3, r3, #16
 800078a:	61bb      	str	r3, [r7, #24]
  channel1 = (Channel_1 * chScale1) >>  CH_SCALE;
 800078c:	4b30      	ldr	r3, [pc, #192]	; (8000850 <calculateLux+0x168>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000794:	fb02 f303 	mul.w	r3, r2, r3
 8000798:	0c1b      	lsrs	r3, r3, #16
 800079a:	617b      	str	r3, [r7, #20]

  // find the ratio of the channel values (Channel1/Channel0)
  if (channel0 != 0)
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d005      	beq.n	80007ae <calculateLux+0xc6>
    ratio1 = (channel1 << (RATIO_SCALE + 1)) / channel0;
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	029a      	lsls	r2, r3, #10
 80007a6:	69bb      	ldr	r3, [r7, #24]
 80007a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  ratio = (ratio1 + 1) >> 1;	  									 // round the ratio value
 80007ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b0:	3301      	adds	r3, #1
 80007b2:	085b      	lsrs	r3, r3, #1
 80007b4:	613b      	str	r3, [r7, #16]

  if ((ratio >= 0X00) && (ratio <= K1C))
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	2b9a      	cmp	r3, #154	; 0x9a
 80007ba:	d806      	bhi.n	80007ca <calculateLux+0xe2>
  {    b = B1C;    m = M1C;  }
 80007bc:	f242 1348 	movw	r3, #8520	; 0x2148
 80007c0:	623b      	str	r3, [r7, #32]
 80007c2:	f643 5371 	movw	r3, #15729	; 0x3d71
 80007c6:	61fb      	str	r3, [r7, #28]
 80007c8:	e026      	b.n	8000818 <calculateLux+0x130>
  else if (ratio <= K2C)
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	2bc3      	cmp	r3, #195	; 0xc3
 80007ce:	d806      	bhi.n	80007de <calculateLux+0xf6>
  {    b = B2C;    m = M2C;  }
 80007d0:	f642 2337 	movw	r3, #10807	; 0x2a37
 80007d4:	623b      	str	r3, [r7, #32]
 80007d6:	f645 3330 	movw	r3, #23344	; 0x5b30
 80007da:	61fb      	str	r3, [r7, #28]
 80007dc:	e01c      	b.n	8000818 <calculateLux+0x130>
  else if (ratio <= K3C)
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	2be6      	cmp	r3, #230	; 0xe6
 80007e2:	d806      	bhi.n	80007f2 <calculateLux+0x10a>
  {    b = B3C;    m = M3C;  }
 80007e4:	f641 03ef 	movw	r3, #6383	; 0x18ef
 80007e8:	623b      	str	r3, [r7, #32]
 80007ea:	f642 53b9 	movw	r3, #11705	; 0x2db9
 80007ee:	61fb      	str	r3, [r7, #28]
 80007f0:	e012      	b.n	8000818 <calculateLux+0x130>
  else if (ratio <= K4C)//276
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 80007f8:	d806      	bhi.n	8000808 <calculateLux+0x120>
  {    b = B4C;    m = M4C;  }
 80007fa:	f640 73df 	movw	r3, #4063	; 0xfdf
 80007fe:	623b      	str	r3, [r7, #32]
 8000800:	f641 139a 	movw	r3, #6554	; 0x199a
 8000804:	61fb      	str	r3, [r7, #28]
 8000806:	e007      	b.n	8000818 <calculateLux+0x130>
  else if (ratio > K5C)//276
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 800080e:	d903      	bls.n	8000818 <calculateLux+0x130>
  {    b = B5C;    m = M5C;  }
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]

  temp = ((channel0 * b) - (channel1 * m));
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	6a3a      	ldr	r2, [r7, #32]
 800081c:	fb03 f202 	mul.w	r2, r3, r2
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	69f9      	ldr	r1, [r7, #28]
 8000824:	fb01 f303 	mul.w	r3, r1, r3
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	60fb      	str	r3, [r7, #12]
  temp += (1 << (LUX_SCALE - 1));			// round lsb (2^(LUX_SCALE-1))
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000832:	60fb      	str	r3, [r7, #12]
//  temp = temp + 32768;
  lux_temp = temp >> LUX_SCALE;			// strip off fractional portion
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	60bb      	str	r3, [r7, #8]
  return (lux_temp);		  							// Signal I2C had no errors
 800083a:	68bb      	ldr	r3, [r7, #8]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3730      	adds	r7, #48	; 0x30
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	1cf06adb 	.word	0x1cf06adb
 8000848:	323e34a3 	.word	0x323e34a3
 800084c:	20000090 	.word	0x20000090
 8000850:	20000092 	.word	0x20000092

08000854 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <MX_ADC1_Init+0x98>)
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <MX_ADC1_Init+0x9c>)
 800086a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_ADC1_Init+0x98>)
 800086e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000872:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_ADC1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_ADC1_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_ADC1_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_ADC1_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_ADC1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_ADC1_Init+0x98>)
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <MX_ADC1_Init+0xa0>)
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_ADC1_Init+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_ADC1_Init+0x98>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_ADC1_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_ADC1_Init+0x98>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_ADC1_Init+0x98>)
 80008b6:	f000 fd33 	bl	8001320 <HAL_ADC_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008c0:	f000 fb0c 	bl	8000edc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_ADC1_Init+0x98>)
 80008d6:	f000 ff77 	bl	80017c8 <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008e0:	f000 fafc 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000094 	.word	0x20000094
 80008f0:	40012000 	.word	0x40012000
 80008f4:	0f000001 	.word	0x0f000001

080008f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <HAL_ADC_MspInit+0x8c>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d12f      	bne.n	800097a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <HAL_ADC_MspInit+0x90>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a19      	ldr	r2, [pc, #100]	; (8000988 <HAL_ADC_MspInit+0x90>)
 8000924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <HAL_ADC_MspInit+0x90>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <HAL_ADC_MspInit+0x90>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <HAL_ADC_MspInit+0x90>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <HAL_ADC_MspInit+0x90>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000952:	2301      	movs	r3, #1
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000956:	2303      	movs	r3, #3
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4809      	ldr	r0, [pc, #36]	; (800098c <HAL_ADC_MspInit+0x94>)
 8000966:	f001 fa49 	bl	8001dfc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2105      	movs	r1, #5
 800096e:	2012      	movs	r0, #18
 8000970:	f001 fa1a 	bl	8001da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000974:	2012      	movs	r0, #18
 8000976:	f001 fa33 	bl	8001de0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	; 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40012000 	.word	0x40012000
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000

08000990 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	streamBuffer = xStreamBufferGenericCreate(BUFFER_SIZE, 1, pdFALSE);
 8000994:	2200      	movs	r2, #0
 8000996:	2101      	movs	r1, #1
 8000998:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800099c:	f005 fa58 	bl	8005e50 <xStreamBufferGenericCreate>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a16      	ldr	r2, [pc, #88]	; (80009fc <MX_FREERTOS_Init+0x6c>)
 80009a4:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of myBufferMutex */
  myBufferMutexHandle = osMutexNew(&myBufferMutex_attributes);
 80009a6:	4816      	ldr	r0, [pc, #88]	; (8000a00 <MX_FREERTOS_Init+0x70>)
 80009a8:	f004 f95b 	bl	8004c62 <osMutexNew>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <MX_FREERTOS_Init+0x74>)
 80009b0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009b2:	4a15      	ldr	r2, [pc, #84]	; (8000a08 <MX_FREERTOS_Init+0x78>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	4815      	ldr	r0, [pc, #84]	; (8000a0c <MX_FREERTOS_Init+0x7c>)
 80009b8:	f004 f8a6 	bl	8004b08 <osThreadNew>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <MX_FREERTOS_Init+0x80>)
 80009c0:	6013      	str	r3, [r2, #0]

  /* creation of myTaskMonitor */
  myTaskMonitorHandle = osThreadNew(StartTaskMonitor, NULL, &myTaskMonitor_attributes);
 80009c2:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <MX_FREERTOS_Init+0x84>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	4814      	ldr	r0, [pc, #80]	; (8000a18 <MX_FREERTOS_Init+0x88>)
 80009c8:	f004 f89e 	bl	8004b08 <osThreadNew>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <MX_FREERTOS_Init+0x8c>)
 80009d0:	6013      	str	r3, [r2, #0]

  /* creation of myTaskSensor1 */
  myTaskSensor1Handle = osThreadNew(StartTaskSensor1, NULL, &myTaskSensor1_attributes);
 80009d2:	4a13      	ldr	r2, [pc, #76]	; (8000a20 <MX_FREERTOS_Init+0x90>)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4813      	ldr	r0, [pc, #76]	; (8000a24 <MX_FREERTOS_Init+0x94>)
 80009d8:	f004 f896 	bl	8004b08 <osThreadNew>
 80009dc:	4603      	mov	r3, r0
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <MX_FREERTOS_Init+0x98>)
 80009e0:	6013      	str	r3, [r2, #0]

  /* creation of myTaskSensor2 */
  myTaskSensor2Handle = osThreadNew(StartTaskSensor2, NULL, &myTaskSensor2_attributes);
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_FREERTOS_Init+0x9c>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	4812      	ldr	r0, [pc, #72]	; (8000a30 <MX_FREERTOS_Init+0xa0>)
 80009e8:	f004 f88e 	bl	8004b08 <osThreadNew>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <MX_FREERTOS_Init+0xa4>)
 80009f0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_ADC_Start_IT(&hadc1);
 80009f2:	4811      	ldr	r0, [pc, #68]	; (8000a38 <MX_FREERTOS_Init+0xa8>)
 80009f4:	f000 fcd8 	bl	80013a8 <HAL_ADC_Start_IT>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000dc 	.word	0x200000dc
 8000a00:	08009644 	.word	0x08009644
 8000a04:	200000f0 	.word	0x200000f0
 8000a08:	080095b4 	.word	0x080095b4
 8000a0c:	08000a3d 	.word	0x08000a3d
 8000a10:	200000e0 	.word	0x200000e0
 8000a14:	080095d8 	.word	0x080095d8
 8000a18:	08000a4d 	.word	0x08000a4d
 8000a1c:	200000e4 	.word	0x200000e4
 8000a20:	080095fc 	.word	0x080095fc
 8000a24:	08000ab9 	.word	0x08000ab9
 8000a28:	200000e8 	.word	0x200000e8
 8000a2c:	08009620 	.word	0x08009620
 8000a30:	08000b21 	.word	0x08000b21
 8000a34:	200000ec 	.word	0x200000ec
 8000a38:	20000094 	.word	0x20000094

08000a3c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f004 f8f1 	bl	8004c2c <osDelay>
 8000a4a:	e7fb      	b.n	8000a44 <StartDefaultTask+0x8>

08000a4c <StartTaskMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMonitor */
void StartTaskMonitor(void *argument)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000a58:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000a5c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTaskMonitor */
	//Buffer with the same
	uint8_t message[BUFFER_SIZE];
	uint16_t messageLen = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
  /* Infinite loop */
  for(;;)
  {
	  // check if something in the buffer
	  if ( !xStreamBufferIsEmpty(streamBuffer))
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <StartTaskMonitor+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f005 fcc6 	bl	80063fa <xStreamBufferIsEmpty>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d119      	bne.n	8000aa8 <StartTaskMonitor+0x5c>
	  {

		  messageLen = xStreamBufferBytesAvailable(streamBuffer);
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <StartTaskMonitor+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f005 fa77 	bl	8005f6c <xStreamBufferBytesAvailable>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
		  xStreamBufferReceive(streamBuffer, message, messageLen, pdMS_TO_TICKS(0));
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <StartTaskMonitor+0x64>)
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8000a8c:	f107 010c 	add.w	r1, r7, #12
 8000a90:	2300      	movs	r3, #0
 8000a92:	f005 fbeb 	bl	800626c <xStreamBufferReceive>
		  HAL_UART_Transmit(&huart2, message, messageLen, HAL_MAX_DELAY);
 8000a96:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8000a9a:	f107 010c 	add.w	r1, r7, #12
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aa2:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <StartTaskMonitor+0x68>)
 8000aa4:	f003 fc2d 	bl	8004302 <HAL_UART_Transmit>
	  }
    osDelay(1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f004 f8bf 	bl	8004c2c <osDelay>
	  if ( !xStreamBufferIsEmpty(streamBuffer))
 8000aae:	e7d9      	b.n	8000a64 <StartTaskMonitor+0x18>
 8000ab0:	200000dc 	.word	0x200000dc
 8000ab4:	20000194 	.word	0x20000194

08000ab8 <StartTaskSensor1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor1 */
void StartTaskSensor1(void *argument)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b08d      	sub	sp, #52	; 0x34
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	uint32_t lux;
	uint8_t buf[32];
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(myBufferMutexHandle, osWaitForever);
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <StartTaskSensor1+0x5c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 f950 	bl	8004d6e <osMutexAcquire>
	  lux = calculateLux();
 8000ace:	f7ff fe0b 	bl	80006e8 <calculateLux>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c

	  sprintf(buf, "Sensor1: Lux = %d\n\r", lux);
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000adc:	490e      	ldr	r1, [pc, #56]	; (8000b18 <StartTaskSensor1+0x60>)
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f008 f94c 	bl	8008d7c <siprintf>

	  xStreamBufferSend(streamBuffer, buf, strlen(buf), pdMS_TO_TICKS(10));
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <StartTaskSensor1+0x64>)
 8000ae6:	681c      	ldr	r4, [r3, #0]
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fb8f 	bl	8000210 <strlen>
 8000af2:	4602      	mov	r2, r0
 8000af4:	f107 010c 	add.w	r1, r7, #12
 8000af8:	230a      	movs	r3, #10
 8000afa:	4620      	mov	r0, r4
 8000afc:	f005 fa53 	bl	8005fa6 <xStreamBufferSend>

	  osMutexRelease(myBufferMutexHandle);
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <StartTaskSensor1+0x5c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 f97d 	bl	8004e04 <osMutexRelease>

	  osDelay(1);
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f004 f88e 	bl	8004c2c <osDelay>
  {
 8000b10:	e7d6      	b.n	8000ac0 <StartTaskSensor1+0x8>
 8000b12:	bf00      	nop
 8000b14:	200000f0 	.word	0x200000f0
 8000b18:	08009554 	.word	0x08009554
 8000b1c:	200000dc 	.word	0x200000dc

08000b20 <StartTaskSensor2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor2 */
void StartTaskSensor2(void *argument)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b08d      	sub	sp, #52	; 0x34
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	uint32_t lux;
	uint8_t buf[32];
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(myBufferMutexHandle, osWaitForever);
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <StartTaskSensor2+0x5c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 f91c 	bl	8004d6e <osMutexAcquire>
	  lux = calculateLux();
 8000b36:	f7ff fdd7 	bl	80006e8 <calculateLux>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c

	  sprintf(buf, "Sensor2: Lux = %d\n\r", lux);
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b44:	490e      	ldr	r1, [pc, #56]	; (8000b80 <StartTaskSensor2+0x60>)
 8000b46:	4618      	mov	r0, r3
 8000b48:	f008 f918 	bl	8008d7c <siprintf>

	  xStreamBufferSend(streamBuffer, buf, strlen(buf), pdMS_TO_TICKS(10));
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <StartTaskSensor2+0x64>)
 8000b4e:	681c      	ldr	r4, [r3, #0]
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fb5b 	bl	8000210 <strlen>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	f107 010c 	add.w	r1, r7, #12
 8000b60:	230a      	movs	r3, #10
 8000b62:	4620      	mov	r0, r4
 8000b64:	f005 fa1f 	bl	8005fa6 <xStreamBufferSend>

	  osMutexRelease(myBufferMutexHandle);
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <StartTaskSensor2+0x5c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f004 f949 	bl	8004e04 <osMutexRelease>
    osDelay(1);
 8000b72:	2001      	movs	r0, #1
 8000b74:	f004 f85a 	bl	8004c2c <osDelay>
  {
 8000b78:	e7d6      	b.n	8000b28 <StartTaskSensor2+0x8>
 8000b7a:	bf00      	nop
 8000b7c:	200000f0 	.word	0x200000f0
 8000b80:	08009568 	.word	0x08009568
 8000b84:	200000dc 	.word	0x200000dc

08000b88 <HAL_ADC_ConvCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE; /* Initialised to pdFALSE. */
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_GetValue(hadc) > ADC_TRESHOLD)
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f000 fdf5 	bl	8001784 <HAL_ADC_GetValue>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ba0:	d912      	bls.n	8000bc8 <HAL_ADC_ConvCpltCallback+0x40>
	{
		osMutexWait(myBufferMutexHandle, osWaitForever);
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <HAL_ADC_ConvCpltCallback+0x50>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 f8df 	bl	8004d6e <osMutexAcquire>

		xStreamBufferSendFromISR(streamBuffer, "ADC value extend the treshold\n\r", strlen("ADC value extend the treshold\n\r"), NULL);
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_ADC_ConvCpltCallback+0x54>)
 8000bb2:	6818      	ldr	r0, [r3, #0]
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	221f      	movs	r2, #31
 8000bb8:	4909      	ldr	r1, [pc, #36]	; (8000be0 <HAL_ADC_ConvCpltCallback+0x58>)
 8000bba:	f005 faa9 	bl	8006110 <xStreamBufferSendFromISR>

		osMutexRelease(myBufferMutexHandle);
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_ADC_ConvCpltCallback+0x50>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f004 f91e 	bl	8004e04 <osMutexRelease>
	}

	HAL_ADC_Start_IT(hadc);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f000 fbed 	bl	80013a8 <HAL_ADC_Start_IT>
//	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200000f0 	.word	0x200000f0
 8000bdc:	200000dc 	.word	0x200000dc
 8000be0:	0800957c 	.word	0x0800957c

08000be4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b2d      	ldr	r3, [pc, #180]	; (8000cb4 <MX_GPIO_Init+0xd0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a2c      	ldr	r2, [pc, #176]	; (8000cb4 <MX_GPIO_Init+0xd0>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <MX_GPIO_Init+0xd0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <MX_GPIO_Init+0xd0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a25      	ldr	r2, [pc, #148]	; (8000cb4 <MX_GPIO_Init+0xd0>)
 8000c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <MX_GPIO_Init+0xd0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <MX_GPIO_Init+0xd0>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <MX_GPIO_Init+0xd0>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <MX_GPIO_Init+0xd0>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_GPIO_Init+0xd0>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a17      	ldr	r2, [pc, #92]	; (8000cb4 <MX_GPIO_Init+0xd0>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_GPIO_Init+0xd0>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2120      	movs	r1, #32
 8000c6e:	4812      	ldr	r0, [pc, #72]	; (8000cb8 <MX_GPIO_Init+0xd4>)
 8000c70:	f001 fa58 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c7a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MX_GPIO_Init+0xd8>)
 8000c8c:	f001 f8b6 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c90:	2320      	movs	r3, #32
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <MX_GPIO_Init+0xd4>)
 8000ca8:	f001 f8a8 	bl	8001dfc <HAL_GPIO_Init>

}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40020800 	.word	0x40020800

08000cc0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_I2C1_Init+0x50>)
 8000cc6:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <MX_I2C1_Init+0x54>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_I2C1_Init+0x50>)
 8000ccc:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <MX_I2C1_Init+0x58>)
 8000cce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_I2C1_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_I2C1_Init+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_I2C1_Init+0x50>)
 8000cde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ce2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <MX_I2C1_Init+0x50>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_I2C1_Init+0x50>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <MX_I2C1_Init+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_I2C1_Init+0x50>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_I2C1_Init+0x50>)
 8000cfe:	f001 fa2b 	bl	8002158 <HAL_I2C_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d08:	f000 f8e8 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200000f4 	.word	0x200000f4
 8000d14:	40005400 	.word	0x40005400
 8000d18:	000186a0 	.word	0x000186a0

08000d1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a19      	ldr	r2, [pc, #100]	; (8000da0 <HAL_I2C_MspInit+0x84>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d12b      	bne.n	8000d96 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_I2C_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <HAL_I2C_MspInit+0x88>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_I2C_MspInit+0x88>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d5a:	23c0      	movs	r3, #192	; 0xc0
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5e:	2312      	movs	r3, #18
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <HAL_I2C_MspInit+0x8c>)
 8000d76:	f001 f841 	bl	8001dfc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_I2C_MspInit+0x88>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_I2C_MspInit+0x88>)
 8000d84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_I2C_MspInit+0x88>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40005400 	.word	0x40005400
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020400 	.word	0x40020400

08000dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db0:	f000 fa50 	bl	8001254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db4:	f000 f812 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db8:	f7ff ff14 	bl	8000be4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dbc:	f7ff fd4a 	bl	8000854 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000dc0:	f7ff ff7e 	bl	8000cc0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000dc4:	f000 f9aa 	bl	800111c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  I2C_DEV_init();
 8000dc8:	f7ff fc38 	bl	800063c <I2C_DEV_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000dcc:	f003 fe52 	bl	8004a74 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000dd0:	f7ff fdde 	bl	8000990 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000dd4:	f003 fe72 	bl	8004abc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <main+0x2c>
	...

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	; 0x50
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	2234      	movs	r2, #52	; 0x34
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f007 feb0 	bl	8008b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	f107 0308 	add.w	r3, r7, #8
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <SystemClock_Config+0xd4>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	4a29      	ldr	r2, [pc, #164]	; (8000eb0 <SystemClock_Config+0xd4>)
 8000e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e10:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <SystemClock_Config+0xd4>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <SystemClock_Config+0xd8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e28:	4a22      	ldr	r2, [pc, #136]	; (8000eb4 <SystemClock_Config+0xd8>)
 8000e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <SystemClock_Config+0xd8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e40:	2301      	movs	r3, #1
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e44:	2310      	movs	r3, #16
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e50:	2310      	movs	r3, #16
 8000e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 fcb0 	bl	80037d0 <HAL_RCC_OscConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e76:	f000 f831 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2102      	movs	r1, #2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 f91e 	bl	80030d8 <HAL_RCC_ClockConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ea2:	f000 f81b 	bl	8000edc <Error_Handler>
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3750      	adds	r7, #80	; 0x50
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40007000 	.word	0x40007000

08000eb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d101      	bne.n	8000ece <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eca:	f000 f9e5 	bl	8001298 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40000400 	.word	0x40000400

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_MspInit+0x54>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a11      	ldr	r2, [pc, #68]	; (8000f3c <HAL_MspInit+0x54>)
 8000ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_MspInit+0x54>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	603b      	str	r3, [r7, #0]
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_MspInit+0x54>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_MspInit+0x54>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_MspInit+0x54>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	210f      	movs	r1, #15
 8000f2a:	f06f 0001 	mvn.w	r0, #1
 8000f2e:	f000 ff3b 	bl	8001da8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800

08000f40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	4b33      	ldr	r3, [pc, #204]	; (8001024 <HAL_InitTick+0xe4>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	4a32      	ldr	r2, [pc, #200]	; (8001024 <HAL_InitTick+0xe4>)
 8000f5a:	f043 0302 	orr.w	r3, r3, #2
 8000f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f60:	4b30      	ldr	r3, [pc, #192]	; (8001024 <HAL_InitTick+0xe4>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f6c:	f107 0210 	add.w	r2, r7, #16
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 f9c8 	bl	800330c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d103      	bne.n	8000f8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f86:	f002 f999 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 8000f8a:	6378      	str	r0, [r7, #52]	; 0x34
 8000f8c:	e004      	b.n	8000f98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f8e:	f002 f995 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 8000f92:	4603      	mov	r3, r0
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <HAL_InitTick+0xe8>)
 8000f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa0:	0c9b      	lsrs	r3, r3, #18
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000fa6:	4b21      	ldr	r3, [pc, #132]	; (800102c <HAL_InitTick+0xec>)
 8000fa8:	4a21      	ldr	r2, [pc, #132]	; (8001030 <HAL_InitTick+0xf0>)
 8000faa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <HAL_InitTick+0xec>)
 8000fae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fb2:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000fb4:	4a1d      	ldr	r2, [pc, #116]	; (800102c <HAL_InitTick+0xec>)
 8000fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb8:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <HAL_InitTick+0xec>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <HAL_InitTick+0xec>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <HAL_InitTick+0xec>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000fcc:	4817      	ldr	r0, [pc, #92]	; (800102c <HAL_InitTick+0xec>)
 8000fce:	f002 fe9d 	bl	8003d0c <HAL_TIM_Base_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000fd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d11b      	bne.n	8001018 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000fe0:	4812      	ldr	r0, [pc, #72]	; (800102c <HAL_InitTick+0xec>)
 8000fe2:	f002 feed 	bl	8003dc0 <HAL_TIM_Base_Start_IT>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000fec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d111      	bne.n	8001018 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ff4:	201d      	movs	r0, #29
 8000ff6:	f000 fef3 	bl	8001de0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d808      	bhi.n	8001012 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	201d      	movs	r0, #29
 8001006:	f000 fecf 	bl	8001da8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_InitTick+0xf4>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	e002      	b.n	8001018 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001018:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800101c:	4618      	mov	r0, r3
 800101e:	3738      	adds	r7, #56	; 0x38
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	431bde83 	.word	0x431bde83
 800102c:	20000148 	.word	0x20000148
 8001030:	40000400 	.word	0x40000400
 8001034:	20000004 	.word	0x20000004

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800103c:	e7fe      	b.n	800103c <NMI_Handler+0x4>

0800103e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <MemManage_Handler+0x4>

0800104a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <BusFault_Handler+0x4>

08001050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <UsageFault_Handler+0x4>

08001056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <ADC_IRQHandler+0x10>)
 800106a:	f000 fa7b 	bl	8001564 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000094 	.word	0x20000094

08001078 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <TIM3_IRQHandler+0x10>)
 800107e:	f002 ff0f 	bl	8003ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000148 	.word	0x20000148

0800108c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001094:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <_sbrk+0x5c>)
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <_sbrk+0x60>)
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <_sbrk+0x64>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <_sbrk+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d207      	bcs.n	80010cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010bc:	f007 fd0e 	bl	8008adc <__errno>
 80010c0:	4603      	mov	r3, r0
 80010c2:	220c      	movs	r2, #12
 80010c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ca:	e009      	b.n	80010e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <_sbrk+0x64>)
 80010dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20020000 	.word	0x20020000
 80010ec:	00000400 	.word	0x00000400
 80010f0:	20000190 	.word	0x20000190
 80010f4:	20004c00 	.word	0x20004c00

080010f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <SystemInit+0x20>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <SystemInit+0x20>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <MX_USART2_UART_Init+0x50>)
 8001124:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 8001128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800112c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_USART2_UART_Init+0x4c>)
 8001154:	f003 f888 	bl	8004268 <HAL_UART_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800115e:	f7ff febd 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000194 	.word	0x20000194
 800116c:	40004400 	.word	0x40004400

08001170 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <HAL_UART_MspInit+0x84>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d12b      	bne.n	80011ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_UART_MspInit+0x88>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <HAL_UART_MspInit+0x88>)
 800119c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_UART_MspInit+0x88>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_UART_MspInit+0x88>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <HAL_UART_MspInit+0x88>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_UART_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ca:	230c      	movs	r3, #12
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011da:	2307      	movs	r3, #7
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <HAL_UART_MspInit+0x8c>)
 80011e6:	f000 fe09 	bl	8001dfc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011ea:	bf00      	nop
 80011ec:	3728      	adds	r7, #40	; 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40004400 	.word	0x40004400
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020000 	.word	0x40020000

08001200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001238 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001204:	480d      	ldr	r0, [pc, #52]	; (800123c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001206:	490e      	ldr	r1, [pc, #56]	; (8001240 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001208:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800121c:	4c0b      	ldr	r4, [pc, #44]	; (800124c <LoopFillZerobss+0x26>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800122a:	f7ff ff65 	bl	80010f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122e:	f007 fc5b 	bl	8008ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001232:	f7ff fdbb 	bl	8000dac <main>
  bx  lr    
 8001236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001238:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001244:	08009710 	.word	0x08009710
  ldr r2, =_sbss
 8001248:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800124c:	20004bfc 	.word	0x20004bfc

08001250 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <CAN1_RX0_IRQHandler>
	...

08001254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <HAL_Init+0x40>)
 800125e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_Init+0x40>)
 800126a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_Init+0x40>)
 8001276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 fd88 	bl	8001d92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001282:	200f      	movs	r0, #15
 8001284:	f7ff fe5c 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001288:	f7ff fe2e 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023c00 	.word	0x40023c00

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008
 80012bc:	200001d8 	.word	0x200001d8

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	200001d8 	.word	0x200001d8

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_Delay+0x44>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008

08001320 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e033      	b.n	800139e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	2b00      	cmp	r3, #0
 800133c:	d109      	bne.n	8001352 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fada 	bl	80008f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	2b00      	cmp	r3, #0
 800135c:	d118      	bne.n	8001390 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001366:	f023 0302 	bic.w	r3, r3, #2
 800136a:	f043 0202 	orr.w	r2, r3, #2
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 fb5a 	bl	8001a2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f023 0303 	bic.w	r3, r3, #3
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	641a      	str	r2, [r3, #64]	; 0x40
 800138e:	e001      	b.n	8001394 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800139c:	7bfb      	ldrb	r3, [r7, #15]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d101      	bne.n	80013c2 <HAL_ADC_Start_IT+0x1a>
 80013be:	2302      	movs	r3, #2
 80013c0:	e0bd      	b.n	800153e <HAL_ADC_Start_IT+0x196>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d018      	beq.n	800140a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0201 	orr.w	r2, r2, #1
 80013e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013e8:	4b58      	ldr	r3, [pc, #352]	; (800154c <HAL_ADC_Start_IT+0x1a4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a58      	ldr	r2, [pc, #352]	; (8001550 <HAL_ADC_Start_IT+0x1a8>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	0c9a      	lsrs	r2, r3, #18
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013fc:	e002      	b.n	8001404 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3b01      	subs	r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f9      	bne.n	80013fe <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b01      	cmp	r3, #1
 8001416:	f040 8085 	bne.w	8001524 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001422:	f023 0301 	bic.w	r3, r3, #1
 8001426:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001438:	2b00      	cmp	r3, #0
 800143a:	d007      	beq.n	800144c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001444:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001458:	d106      	bne.n	8001468 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f023 0206 	bic.w	r2, r3, #6
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	645a      	str	r2, [r3, #68]	; 0x44
 8001466:	e002      	b.n	800146e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001476:	4b37      	ldr	r3, [pc, #220]	; (8001554 <HAL_ADC_Start_IT+0x1ac>)
 8001478:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001482:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001492:	f043 0320 	orr.w	r3, r3, #32
 8001496:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 031f 	and.w	r3, r3, #31
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d12a      	bne.n	80014fa <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a2b      	ldr	r2, [pc, #172]	; (8001558 <HAL_ADC_Start_IT+0x1b0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d015      	beq.n	80014da <HAL_ADC_Start_IT+0x132>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a2a      	ldr	r2, [pc, #168]	; (800155c <HAL_ADC_Start_IT+0x1b4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d105      	bne.n	80014c4 <HAL_ADC_Start_IT+0x11c>
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_ADC_Start_IT+0x1ac>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00a      	beq.n	80014da <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a25      	ldr	r2, [pc, #148]	; (8001560 <HAL_ADC_Start_IT+0x1b8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d136      	bne.n	800153c <HAL_ADC_Start_IT+0x194>
 80014ce:	4b21      	ldr	r3, [pc, #132]	; (8001554 <HAL_ADC_Start_IT+0x1ac>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d130      	bne.n	800153c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d129      	bne.n	800153c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	e020      	b.n	800153c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a16      	ldr	r2, [pc, #88]	; (8001558 <HAL_ADC_Start_IT+0x1b0>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d11b      	bne.n	800153c <HAL_ADC_Start_IT+0x194>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d114      	bne.n	800153c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	e00b      	b.n	800153c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f043 0210 	orr.w	r2, r3, #16
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	f043 0201 	orr.w	r2, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000000 	.word	0x20000000
 8001550:	431bde83 	.word	0x431bde83
 8001554:	40012300 	.word	0x40012300
 8001558:	40012000 	.word	0x40012000
 800155c:	40012100 	.word	0x40012100
 8001560:	40012200 	.word	0x40012200

08001564 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	f003 0320 	and.w	r3, r3, #32
 8001592:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d049      	beq.n	800162e <HAL_ADC_IRQHandler+0xca>
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d046      	beq.n	800162e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d105      	bne.n	80015b8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d12b      	bne.n	800161e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d127      	bne.n	800161e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d006      	beq.n	80015ea <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d119      	bne.n	800161e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0220 	bic.w	r2, r2, #32
 80015f8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d105      	bne.n	800161e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f043 0201 	orr.w	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fab2 	bl	8000b88 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f06f 0212 	mvn.w	r2, #18
 800162c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d057      	beq.n	80016f4 <HAL_ADC_IRQHandler+0x190>
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d054      	beq.n	80016f4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	2b00      	cmp	r3, #0
 8001654:	d105      	bne.n	8001662 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d139      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001676:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800167a:	2b00      	cmp	r3, #0
 800167c:	d006      	beq.n	800168c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001688:	2b00      	cmp	r3, #0
 800168a:	d12b      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001696:	2b00      	cmp	r3, #0
 8001698:	d124      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d11d      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d119      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d105      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 fa9d 	bl	8001c24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f06f 020c 	mvn.w	r2, #12
 80016f2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001702:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d017      	beq.n	800173a <HAL_ADC_IRQHandler+0x1d6>
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d014      	beq.n	800173a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b01      	cmp	r3, #1
 800171c:	d10d      	bne.n	800173a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f837 	bl	800179e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f06f 0201 	mvn.w	r2, #1
 8001738:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f003 0320 	and.w	r3, r3, #32
 8001740:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001748:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d015      	beq.n	800177c <HAL_ADC_IRQHandler+0x218>
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d012      	beq.n	800177c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f043 0202 	orr.w	r2, r3, #2
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f06f 0220 	mvn.w	r2, #32
 800176a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f820 	bl	80017b2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f06f 0220 	mvn.w	r2, #32
 800177a:	601a      	str	r2, [r3, #0]
  }
}
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x1c>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e113      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x244>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b09      	cmp	r3, #9
 80017f2:	d925      	bls.n	8001840 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68d9      	ldr	r1, [r3, #12]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	3b1e      	subs	r3, #30
 800180a:	2207      	movs	r2, #7
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43da      	mvns	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	400a      	ands	r2, r1
 8001818:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68d9      	ldr	r1, [r3, #12]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	b29b      	uxth	r3, r3
 800182a:	4618      	mov	r0, r3
 800182c:	4603      	mov	r3, r0
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4403      	add	r3, r0
 8001832:	3b1e      	subs	r3, #30
 8001834:	409a      	lsls	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	e022      	b.n	8001886 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6919      	ldr	r1, [r3, #16]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b29b      	uxth	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	2207      	movs	r2, #7
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43da      	mvns	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	400a      	ands	r2, r1
 8001862:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6919      	ldr	r1, [r3, #16]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	b29b      	uxth	r3, r3
 8001874:	4618      	mov	r0, r3
 8001876:	4603      	mov	r3, r0
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4403      	add	r3, r0
 800187c:	409a      	lsls	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b06      	cmp	r3, #6
 800188c:	d824      	bhi.n	80018d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	3b05      	subs	r3, #5
 80018a0:	221f      	movs	r2, #31
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	400a      	ands	r2, r1
 80018ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	3b05      	subs	r3, #5
 80018ca:	fa00 f203 	lsl.w	r2, r0, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	635a      	str	r2, [r3, #52]	; 0x34
 80018d6:	e04c      	b.n	8001972 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b0c      	cmp	r3, #12
 80018de:	d824      	bhi.n	800192a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	3b23      	subs	r3, #35	; 0x23
 80018f2:	221f      	movs	r2, #31
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43da      	mvns	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	400a      	ands	r2, r1
 8001900:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	4618      	mov	r0, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	3b23      	subs	r3, #35	; 0x23
 800191c:	fa00 f203 	lsl.w	r2, r0, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	631a      	str	r2, [r3, #48]	; 0x30
 8001928:	e023      	b.n	8001972 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	3b41      	subs	r3, #65	; 0x41
 800193c:	221f      	movs	r2, #31
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	400a      	ands	r2, r1
 800194a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	b29b      	uxth	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	3b41      	subs	r3, #65	; 0x41
 8001966:	fa00 f203 	lsl.w	r2, r0, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001972:	4b29      	ldr	r3, [pc, #164]	; (8001a18 <HAL_ADC_ConfigChannel+0x250>)
 8001974:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a28      	ldr	r2, [pc, #160]	; (8001a1c <HAL_ADC_ConfigChannel+0x254>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d10f      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x1d8>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b12      	cmp	r3, #18
 8001986:	d10b      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1d      	ldr	r2, [pc, #116]	; (8001a1c <HAL_ADC_ConfigChannel+0x254>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d12b      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x23a>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <HAL_ADC_ConfigChannel+0x258>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d003      	beq.n	80019bc <HAL_ADC_ConfigChannel+0x1f4>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b11      	cmp	r3, #17
 80019ba:	d122      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a11      	ldr	r2, [pc, #68]	; (8001a20 <HAL_ADC_ConfigChannel+0x258>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d111      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HAL_ADC_ConfigChannel+0x25c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a11      	ldr	r2, [pc, #68]	; (8001a28 <HAL_ADC_ConfigChannel+0x260>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	0c9a      	lsrs	r2, r3, #18
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019f4:	e002      	b.n	80019fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f9      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	40012300 	.word	0x40012300
 8001a1c:	40012000 	.word	0x40012000
 8001a20:	10000012 	.word	0x10000012
 8001a24:	20000000 	.word	0x20000000
 8001a28:	431bde83 	.word	0x431bde83

08001a2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a34:	4b79      	ldr	r3, [pc, #484]	; (8001c1c <ADC_Init+0x1f0>)
 8001a36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	021a      	lsls	r2, r3, #8
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6899      	ldr	r1, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	4a58      	ldr	r2, [pc, #352]	; (8001c20 <ADC_Init+0x1f4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d022      	beq.n	8001b0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ad2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6899      	ldr	r1, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001af4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6899      	ldr	r1, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	e00f      	b.n	8001b2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0202 	bic.w	r2, r2, #2
 8001b38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6899      	ldr	r1, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7e1b      	ldrb	r3, [r3, #24]
 8001b44:	005a      	lsls	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d01b      	beq.n	8001b90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6859      	ldr	r1, [r3, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	3b01      	subs	r3, #1
 8001b84:	035a      	lsls	r2, r3, #13
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	e007      	b.n	8001ba0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	051a      	lsls	r2, r3, #20
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6899      	ldr	r1, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001be2:	025a      	lsls	r2, r3, #9
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6899      	ldr	r1, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	029a      	lsls	r2, r3, #10
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	609a      	str	r2, [r3, #8]
}
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	40012300 	.word	0x40012300
 8001c20:	0f000001 	.word	0x0f000001

08001c24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c54:	4013      	ands	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6a:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	60d3      	str	r3, [r2, #12]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <__NVIC_GetPriorityGrouping+0x18>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	f003 0307 	and.w	r3, r3, #7
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	db0b      	blt.n	8001cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	f003 021f 	and.w	r2, r3, #31
 8001cb4:	4907      	ldr	r1, [pc, #28]	; (8001cd4 <__NVIC_EnableIRQ+0x38>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db0a      	blt.n	8001d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	; (8001d24 <__NVIC_SetPriority+0x4c>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d00:	e00a      	b.n	8001d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4908      	ldr	r1, [pc, #32]	; (8001d28 <__NVIC_SetPriority+0x50>)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	440b      	add	r3, r1
 8001d16:	761a      	strb	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000e100 	.word	0xe000e100
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	bf28      	it	cs
 8001d4a:	2304      	movcs	r3, #4
 8001d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d902      	bls.n	8001d5c <NVIC_EncodePriority+0x30>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	e000      	b.n	8001d5e <NVIC_EncodePriority+0x32>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	401a      	ands	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	4313      	orrs	r3, r2
         );
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ff4c 	bl	8001c38 <__NVIC_SetPriorityGrouping>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dba:	f7ff ff61 	bl	8001c80 <__NVIC_GetPriorityGrouping>
 8001dbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	6978      	ldr	r0, [r7, #20]
 8001dc6:	f7ff ffb1 	bl	8001d2c <NVIC_EncodePriority>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff80 	bl	8001cd8 <__NVIC_SetPriority>
}
 8001dd8:	bf00      	nop
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff54 	bl	8001c9c <__NVIC_EnableIRQ>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	e165      	b.n	80020e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e18:	2201      	movs	r2, #1
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	f040 8154 	bne.w	80020de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d005      	beq.n	8001e4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d130      	bne.n	8001eb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	2203      	movs	r2, #3
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e84:	2201      	movs	r2, #1
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 0201 	and.w	r2, r3, #1
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d017      	beq.n	8001eec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d123      	bne.n	8001f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	08da      	lsrs	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3208      	adds	r2, #8
 8001f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	08da      	lsrs	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3208      	adds	r2, #8
 8001f3a:	69b9      	ldr	r1, [r7, #24]
 8001f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0203 	and.w	r2, r3, #3
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80ae 	beq.w	80020de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <HAL_GPIO_Init+0x300>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a5c      	ldr	r2, [pc, #368]	; (80020fc <HAL_GPIO_Init+0x300>)
 8001f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b5a      	ldr	r3, [pc, #360]	; (80020fc <HAL_GPIO_Init+0x300>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f9e:	4a58      	ldr	r2, [pc, #352]	; (8002100 <HAL_GPIO_Init+0x304>)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4f      	ldr	r2, [pc, #316]	; (8002104 <HAL_GPIO_Init+0x308>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d025      	beq.n	8002016 <HAL_GPIO_Init+0x21a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4e      	ldr	r2, [pc, #312]	; (8002108 <HAL_GPIO_Init+0x30c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d01f      	beq.n	8002012 <HAL_GPIO_Init+0x216>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4d      	ldr	r2, [pc, #308]	; (800210c <HAL_GPIO_Init+0x310>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d019      	beq.n	800200e <HAL_GPIO_Init+0x212>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4c      	ldr	r2, [pc, #304]	; (8002110 <HAL_GPIO_Init+0x314>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_GPIO_Init+0x20e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4b      	ldr	r2, [pc, #300]	; (8002114 <HAL_GPIO_Init+0x318>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00d      	beq.n	8002006 <HAL_GPIO_Init+0x20a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4a      	ldr	r2, [pc, #296]	; (8002118 <HAL_GPIO_Init+0x31c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d007      	beq.n	8002002 <HAL_GPIO_Init+0x206>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a49      	ldr	r2, [pc, #292]	; (800211c <HAL_GPIO_Init+0x320>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_GPIO_Init+0x202>
 8001ffa:	2306      	movs	r3, #6
 8001ffc:	e00c      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 8001ffe:	2307      	movs	r3, #7
 8002000:	e00a      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 8002002:	2305      	movs	r3, #5
 8002004:	e008      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 8002006:	2304      	movs	r3, #4
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 800200a:	2303      	movs	r3, #3
 800200c:	e004      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 800200e:	2302      	movs	r3, #2
 8002010:	e002      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 8002016:	2300      	movs	r3, #0
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	f002 0203 	and.w	r2, r2, #3
 800201e:	0092      	lsls	r2, r2, #2
 8002020:	4093      	lsls	r3, r2
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002028:	4935      	ldr	r1, [pc, #212]	; (8002100 <HAL_GPIO_Init+0x304>)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	3302      	adds	r3, #2
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002036:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <HAL_GPIO_Init+0x324>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800205a:	4a31      	ldr	r2, [pc, #196]	; (8002120 <HAL_GPIO_Init+0x324>)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002060:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <HAL_GPIO_Init+0x324>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002084:	4a26      	ldr	r2, [pc, #152]	; (8002120 <HAL_GPIO_Init+0x324>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800208a:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_GPIO_Init+0x324>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ae:	4a1c      	ldr	r2, [pc, #112]	; (8002120 <HAL_GPIO_Init+0x324>)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_GPIO_Init+0x324>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d8:	4a11      	ldr	r2, [pc, #68]	; (8002120 <HAL_GPIO_Init+0x324>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3301      	adds	r3, #1
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	f67f ae96 	bls.w	8001e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	40013800 	.word	0x40013800
 8002104:	40020000 	.word	0x40020000
 8002108:	40020400 	.word	0x40020400
 800210c:	40020800 	.word	0x40020800
 8002110:	40020c00 	.word	0x40020c00
 8002114:	40021000 	.word	0x40021000
 8002118:	40021400 	.word	0x40021400
 800211c:	40021800 	.word	0x40021800
 8002120:	40013c00 	.word	0x40013c00

08002124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
 8002130:	4613      	mov	r3, r2
 8002132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002134:	787b      	ldrb	r3, [r7, #1]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002140:	e003      	b.n	800214a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002142:	887b      	ldrh	r3, [r7, #2]
 8002144:	041a      	lsls	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	619a      	str	r2, [r3, #24]
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e12b      	b.n	80023c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d106      	bne.n	8002184 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7fe fdcc 	bl	8000d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2224      	movs	r2, #36	; 0x24
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0201 	bic.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021bc:	f001 f87e 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 80021c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4a81      	ldr	r2, [pc, #516]	; (80023cc <HAL_I2C_Init+0x274>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d807      	bhi.n	80021dc <HAL_I2C_Init+0x84>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4a80      	ldr	r2, [pc, #512]	; (80023d0 <HAL_I2C_Init+0x278>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	bf94      	ite	ls
 80021d4:	2301      	movls	r3, #1
 80021d6:	2300      	movhi	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	e006      	b.n	80021ea <HAL_I2C_Init+0x92>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4a7d      	ldr	r2, [pc, #500]	; (80023d4 <HAL_I2C_Init+0x27c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	bf94      	ite	ls
 80021e4:	2301      	movls	r3, #1
 80021e6:	2300      	movhi	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e0e7      	b.n	80023c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4a78      	ldr	r2, [pc, #480]	; (80023d8 <HAL_I2C_Init+0x280>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	0c9b      	lsrs	r3, r3, #18
 80021fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	430a      	orrs	r2, r1
 8002210:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a6a      	ldr	r2, [pc, #424]	; (80023cc <HAL_I2C_Init+0x274>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d802      	bhi.n	800222c <HAL_I2C_Init+0xd4>
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	3301      	adds	r3, #1
 800222a:	e009      	b.n	8002240 <HAL_I2C_Init+0xe8>
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	4a69      	ldr	r2, [pc, #420]	; (80023dc <HAL_I2C_Init+0x284>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	099b      	lsrs	r3, r3, #6
 800223e:	3301      	adds	r3, #1
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	430b      	orrs	r3, r1
 8002246:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002252:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	495c      	ldr	r1, [pc, #368]	; (80023cc <HAL_I2C_Init+0x274>)
 800225c:	428b      	cmp	r3, r1
 800225e:	d819      	bhi.n	8002294 <HAL_I2C_Init+0x13c>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1e59      	subs	r1, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fbb1 f3f3 	udiv	r3, r1, r3
 800226e:	1c59      	adds	r1, r3, #1
 8002270:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002274:	400b      	ands	r3, r1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_I2C_Init+0x138>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1e59      	subs	r1, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	fbb1 f3f3 	udiv	r3, r1, r3
 8002288:	3301      	adds	r3, #1
 800228a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228e:	e051      	b.n	8002334 <HAL_I2C_Init+0x1dc>
 8002290:	2304      	movs	r3, #4
 8002292:	e04f      	b.n	8002334 <HAL_I2C_Init+0x1dc>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d111      	bne.n	80022c0 <HAL_I2C_Init+0x168>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1e58      	subs	r0, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	440b      	add	r3, r1
 80022aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ae:	3301      	adds	r3, #1
 80022b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf0c      	ite	eq
 80022b8:	2301      	moveq	r3, #1
 80022ba:	2300      	movne	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	e012      	b.n	80022e6 <HAL_I2C_Init+0x18e>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1e58      	subs	r0, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	0099      	lsls	r1, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d6:	3301      	adds	r3, #1
 80022d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf0c      	ite	eq
 80022e0:	2301      	moveq	r3, #1
 80022e2:	2300      	movne	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Init+0x196>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e022      	b.n	8002334 <HAL_I2C_Init+0x1dc>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10e      	bne.n	8002314 <HAL_I2C_Init+0x1bc>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1e58      	subs	r0, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6859      	ldr	r1, [r3, #4]
 80022fe:	460b      	mov	r3, r1
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	440b      	add	r3, r1
 8002304:	fbb0 f3f3 	udiv	r3, r0, r3
 8002308:	3301      	adds	r3, #1
 800230a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002312:	e00f      	b.n	8002334 <HAL_I2C_Init+0x1dc>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1e58      	subs	r0, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	0099      	lsls	r1, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	fbb0 f3f3 	udiv	r3, r0, r3
 800232a:	3301      	adds	r3, #1
 800232c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002330:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	6809      	ldr	r1, [r1, #0]
 8002338:	4313      	orrs	r3, r2
 800233a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69da      	ldr	r2, [r3, #28]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002362:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6911      	ldr	r1, [r2, #16]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68d2      	ldr	r2, [r2, #12]
 800236e:	4311      	orrs	r1, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	430b      	orrs	r3, r1
 8002376:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2220      	movs	r2, #32
 80023ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	000186a0 	.word	0x000186a0
 80023d0:	001e847f 	.word	0x001e847f
 80023d4:	003d08ff 	.word	0x003d08ff
 80023d8:	431bde83 	.word	0x431bde83
 80023dc:	10624dd3 	.word	0x10624dd3

080023e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	4608      	mov	r0, r1
 80023ea:	4611      	mov	r1, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	817b      	strh	r3, [r7, #10]
 80023f2:	460b      	mov	r3, r1
 80023f4:	813b      	strh	r3, [r7, #8]
 80023f6:	4613      	mov	r3, r2
 80023f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023fa:	f7fe ff61 	bl	80012c0 <HAL_GetTick>
 80023fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b20      	cmp	r3, #32
 800240a:	f040 80d9 	bne.w	80025c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2319      	movs	r3, #25
 8002414:	2201      	movs	r2, #1
 8002416:	496d      	ldr	r1, [pc, #436]	; (80025cc <HAL_I2C_Mem_Write+0x1ec>)
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 fc7f 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002424:	2302      	movs	r3, #2
 8002426:	e0cc      	b.n	80025c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_I2C_Mem_Write+0x56>
 8002432:	2302      	movs	r3, #2
 8002434:	e0c5      	b.n	80025c2 <HAL_I2C_Mem_Write+0x1e2>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	d007      	beq.n	800245c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800246a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2221      	movs	r2, #33	; 0x21
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2240      	movs	r2, #64	; 0x40
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a3a      	ldr	r2, [r7, #32]
 8002486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800248c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4a4d      	ldr	r2, [pc, #308]	; (80025d0 <HAL_I2C_Mem_Write+0x1f0>)
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800249e:	88f8      	ldrh	r0, [r7, #6]
 80024a0:	893a      	ldrh	r2, [r7, #8]
 80024a2:	8979      	ldrh	r1, [r7, #10]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4603      	mov	r3, r0
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fab6 	bl	8002a20 <I2C_RequestMemoryWrite>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d052      	beq.n	8002560 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e081      	b.n	80025c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fd00 	bl	8002ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00d      	beq.n	80024ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d107      	bne.n	80024e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e06b      	b.n	80025c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	781a      	ldrb	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002510:	b29b      	uxth	r3, r3
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b04      	cmp	r3, #4
 8002526:	d11b      	bne.n	8002560 <HAL_I2C_Mem_Write+0x180>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	d017      	beq.n	8002560 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	781a      	ldrb	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1aa      	bne.n	80024be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fcec 	bl	8002f4a <I2C_WaitOnBTFFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00d      	beq.n	8002594 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	2b04      	cmp	r3, #4
 800257e:	d107      	bne.n	8002590 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e016      	b.n	80025c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	e000      	b.n	80025c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025c0:	2302      	movs	r3, #2
  }
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	00100002 	.word	0x00100002
 80025d0:	ffff0000 	.word	0xffff0000

080025d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08c      	sub	sp, #48	; 0x30
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	4608      	mov	r0, r1
 80025de:	4611      	mov	r1, r2
 80025e0:	461a      	mov	r2, r3
 80025e2:	4603      	mov	r3, r0
 80025e4:	817b      	strh	r3, [r7, #10]
 80025e6:	460b      	mov	r3, r1
 80025e8:	813b      	strh	r3, [r7, #8]
 80025ea:	4613      	mov	r3, r2
 80025ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025ee:	f7fe fe67 	bl	80012c0 <HAL_GetTick>
 80025f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	f040 8208 	bne.w	8002a12 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	2319      	movs	r3, #25
 8002608:	2201      	movs	r2, #1
 800260a:	497b      	ldr	r1, [pc, #492]	; (80027f8 <HAL_I2C_Mem_Read+0x224>)
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fb85 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002618:	2302      	movs	r3, #2
 800261a:	e1fb      	b.n	8002a14 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_I2C_Mem_Read+0x56>
 8002626:	2302      	movs	r3, #2
 8002628:	e1f4      	b.n	8002a14 <HAL_I2C_Mem_Read+0x440>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b01      	cmp	r3, #1
 800263e:	d007      	beq.n	8002650 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2222      	movs	r2, #34	; 0x22
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2240      	movs	r2, #64	; 0x40
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800267a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002680:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4a5b      	ldr	r2, [pc, #364]	; (80027fc <HAL_I2C_Mem_Read+0x228>)
 8002690:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002692:	88f8      	ldrh	r0, [r7, #6]
 8002694:	893a      	ldrh	r2, [r7, #8]
 8002696:	8979      	ldrh	r1, [r7, #10]
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	4603      	mov	r3, r0
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 fa52 	bl	8002b4c <I2C_RequestMemoryRead>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e1b0      	b.n	8002a14 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d113      	bne.n	80026e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ba:	2300      	movs	r3, #0
 80026bc:	623b      	str	r3, [r7, #32]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	623b      	str	r3, [r7, #32]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	623b      	str	r3, [r7, #32]
 80026ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e184      	b.n	80029ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d11b      	bne.n	8002722 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e164      	b.n	80029ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002726:	2b02      	cmp	r3, #2
 8002728:	d11b      	bne.n	8002762 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002738:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002748:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	e144      	b.n	80029ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002778:	e138      	b.n	80029ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277e:	2b03      	cmp	r3, #3
 8002780:	f200 80f1 	bhi.w	8002966 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002788:	2b01      	cmp	r3, #1
 800278a:	d123      	bne.n	80027d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800278c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fc1b 	bl	8002fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e139      	b.n	8002a14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027d2:	e10b      	b.n	80029ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d14e      	bne.n	800287a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e2:	2200      	movs	r2, #0
 80027e4:	4906      	ldr	r1, [pc, #24]	; (8002800 <HAL_I2C_Mem_Read+0x22c>)
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fa98 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d008      	beq.n	8002804 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e10e      	b.n	8002a14 <HAL_I2C_Mem_Read+0x440>
 80027f6:	bf00      	nop
 80027f8:	00100002 	.word	0x00100002
 80027fc:	ffff0000 	.word	0xffff0000
 8002800:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002878:	e0b8      	b.n	80029ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002880:	2200      	movs	r2, #0
 8002882:	4966      	ldr	r1, [pc, #408]	; (8002a1c <HAL_I2C_Mem_Read+0x448>)
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 fa49 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0bf      	b.n	8002a14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028dc:	2200      	movs	r2, #0
 80028de:	494f      	ldr	r1, [pc, #316]	; (8002a1c <HAL_I2C_Mem_Read+0x448>)
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fa1b 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e091      	b.n	8002a14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002964:	e042      	b.n	80029ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002968:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 fb2e 	bl	8002fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e04c      	b.n	8002a14 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d118      	bne.n	80029ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f47f aec2 	bne.w	800277a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e000      	b.n	8002a14 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a12:	2302      	movs	r3, #2
  }
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3728      	adds	r7, #40	; 0x28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	00010004 	.word	0x00010004

08002a20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	4608      	mov	r0, r1
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4603      	mov	r3, r0
 8002a30:	817b      	strh	r3, [r7, #10]
 8002a32:	460b      	mov	r3, r1
 8002a34:	813b      	strh	r3, [r7, #8]
 8002a36:	4613      	mov	r3, r2
 8002a38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f960 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a70:	d103      	bne.n	8002a7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e05f      	b.n	8002b3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a7e:	897b      	ldrh	r3, [r7, #10]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	6a3a      	ldr	r2, [r7, #32]
 8002a92:	492d      	ldr	r1, [pc, #180]	; (8002b48 <I2C_RequestMemoryWrite+0x128>)
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 f998 	bl	8002dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e04c      	b.n	8002b3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abc:	6a39      	ldr	r1, [r7, #32]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 fa02 	bl	8002ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00d      	beq.n	8002ae6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d107      	bne.n	8002ae2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e02b      	b.n	8002b3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d105      	bne.n	8002af8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aec:	893b      	ldrh	r3, [r7, #8]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	611a      	str	r2, [r3, #16]
 8002af6:	e021      	b.n	8002b3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002af8:	893b      	ldrh	r3, [r7, #8]
 8002afa:	0a1b      	lsrs	r3, r3, #8
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b08:	6a39      	ldr	r1, [r7, #32]
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f9dc 	bl	8002ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00d      	beq.n	8002b32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d107      	bne.n	8002b2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e005      	b.n	8002b3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b32:	893b      	ldrh	r3, [r7, #8]
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	00010002 	.word	0x00010002

08002b4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	4608      	mov	r0, r1
 8002b56:	4611      	mov	r1, r2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	817b      	strh	r3, [r7, #10]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	813b      	strh	r3, [r7, #8]
 8002b62:	4613      	mov	r3, r2
 8002b64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f8c2 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00d      	beq.n	8002bba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bac:	d103      	bne.n	8002bb6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e0aa      	b.n	8002d10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bba:	897b      	ldrh	r3, [r7, #10]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	6a3a      	ldr	r2, [r7, #32]
 8002bce:	4952      	ldr	r1, [pc, #328]	; (8002d18 <I2C_RequestMemoryRead+0x1cc>)
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f8fa 	bl	8002dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e097      	b.n	8002d10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf8:	6a39      	ldr	r1, [r7, #32]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f964 	bl	8002ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00d      	beq.n	8002c22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d107      	bne.n	8002c1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e076      	b.n	8002d10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d105      	bne.n	8002c34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c28:	893b      	ldrh	r3, [r7, #8]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	611a      	str	r2, [r3, #16]
 8002c32:	e021      	b.n	8002c78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c34:	893b      	ldrh	r3, [r7, #8]
 8002c36:	0a1b      	lsrs	r3, r3, #8
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c44:	6a39      	ldr	r1, [r7, #32]
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f93e 	bl	8002ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00d      	beq.n	8002c6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d107      	bne.n	8002c6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e050      	b.n	8002d10 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c6e:	893b      	ldrh	r3, [r7, #8]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7a:	6a39      	ldr	r1, [r7, #32]
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f923 	bl	8002ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00d      	beq.n	8002ca4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d107      	bne.n	8002ca0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e035      	b.n	8002d10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f82b 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cda:	d103      	bne.n	8002ce4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e013      	b.n	8002d10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ce8:	897b      	ldrh	r3, [r7, #10]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	6a3a      	ldr	r2, [r7, #32]
 8002cfc:	4906      	ldr	r1, [pc, #24]	; (8002d18 <I2C_RequestMemoryRead+0x1cc>)
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f863 	bl	8002dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	00010002 	.word	0x00010002

08002d1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d2c:	e025      	b.n	8002d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d34:	d021      	beq.n	8002d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d36:	f7fe fac3 	bl	80012c0 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d302      	bcc.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d116      	bne.n	8002d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f043 0220 	orr.w	r2, r3, #32
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e023      	b.n	8002dc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d10d      	bne.n	8002da0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	bf0c      	ite	eq
 8002d96:	2301      	moveq	r3, #1
 8002d98:	2300      	movne	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	e00c      	b.n	8002dba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	43da      	mvns	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4013      	ands	r3, r2
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	bf0c      	ite	eq
 8002db2:	2301      	moveq	r3, #1
 8002db4:	2300      	movne	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d0b6      	beq.n	8002d2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dd8:	e051      	b.n	8002e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de8:	d123      	bne.n	8002e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f043 0204 	orr.w	r2, r3, #4
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e046      	b.n	8002ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e38:	d021      	beq.n	8002e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3a:	f7fe fa41 	bl	80012c0 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d302      	bcc.n	8002e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d116      	bne.n	8002e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f043 0220 	orr.w	r2, r3, #32
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e020      	b.n	8002ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	0c1b      	lsrs	r3, r3, #16
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d10c      	bne.n	8002ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4013      	ands	r3, r2
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bf14      	ite	ne
 8002e9a:	2301      	movne	r3, #1
 8002e9c:	2300      	moveq	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	e00b      	b.n	8002eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	43da      	mvns	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4013      	ands	r3, r2
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf14      	ite	ne
 8002eb4:	2301      	movne	r3, #1
 8002eb6:	2300      	moveq	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d18d      	bne.n	8002dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ed4:	e02d      	b.n	8002f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f8ce 	bl	8003078 <I2C_IsAcknowledgeFailed>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e02d      	b.n	8002f42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eec:	d021      	beq.n	8002f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eee:	f7fe f9e7 	bl	80012c0 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d302      	bcc.n	8002f04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d116      	bne.n	8002f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f043 0220 	orr.w	r2, r3, #32
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e007      	b.n	8002f42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3c:	2b80      	cmp	r3, #128	; 0x80
 8002f3e:	d1ca      	bne.n	8002ed6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b084      	sub	sp, #16
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f56:	e02d      	b.n	8002fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f88d 	bl	8003078 <I2C_IsAcknowledgeFailed>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e02d      	b.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f6e:	d021      	beq.n	8002fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f70:	f7fe f9a6 	bl	80012c0 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d302      	bcc.n	8002f86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d116      	bne.n	8002fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	f043 0220 	orr.w	r2, r3, #32
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e007      	b.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d1ca      	bne.n	8002f58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fd8:	e042      	b.n	8003060 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d119      	bne.n	800301c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0210 	mvn.w	r2, #16
 8002ff0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e029      	b.n	8003070 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301c:	f7fe f950 	bl	80012c0 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	429a      	cmp	r2, r3
 800302a:	d302      	bcc.n	8003032 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d116      	bne.n	8003060 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f043 0220 	orr.w	r2, r3, #32
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e007      	b.n	8003070 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	2b40      	cmp	r3, #64	; 0x40
 800306c:	d1b5      	bne.n	8002fda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308e:	d11b      	bne.n	80030c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003098:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	f043 0204 	orr.w	r2, r3, #4
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0cc      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030ec:	4b68      	ldr	r3, [pc, #416]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d90c      	bls.n	8003114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b65      	ldr	r3, [pc, #404]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b63      	ldr	r3, [pc, #396]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0b8      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d020      	beq.n	8003162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800312c:	4b59      	ldr	r3, [pc, #356]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4a58      	ldr	r2, [pc, #352]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003144:	4b53      	ldr	r3, [pc, #332]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a52      	ldr	r2, [pc, #328]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800314e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003150:	4b50      	ldr	r3, [pc, #320]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	494d      	ldr	r1, [pc, #308]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d044      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b47      	ldr	r3, [pc, #284]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d119      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e07f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d003      	beq.n	8003196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003192:	2b03      	cmp	r3, #3
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003196:	4b3f      	ldr	r3, [pc, #252]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e06f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a6:	4b3b      	ldr	r3, [pc, #236]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e067      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b6:	4b37      	ldr	r3, [pc, #220]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f023 0203 	bic.w	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4934      	ldr	r1, [pc, #208]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c8:	f7fe f87a 	bl	80012c0 <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d0:	f7fe f876 	bl	80012c0 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e04f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	4b2b      	ldr	r3, [pc, #172]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 020c 	and.w	r2, r3, #12
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d1eb      	bne.n	80031d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f8:	4b25      	ldr	r3, [pc, #148]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d20c      	bcs.n	8003220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b22      	ldr	r3, [pc, #136]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	4b20      	ldr	r3, [pc, #128]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e032      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800322c:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4916      	ldr	r1, [pc, #88]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800324a:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	490e      	ldr	r1, [pc, #56]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800325e:	f000 f887 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 8003262:	4602      	mov	r2, r0
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	490a      	ldr	r1, [pc, #40]	; (8003298 <HAL_RCC_ClockConfig+0x1c0>)
 8003270:	5ccb      	ldrb	r3, [r1, r3]
 8003272:	fa22 f303 	lsr.w	r3, r2, r3
 8003276:	4a09      	ldr	r2, [pc, #36]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd fe5e 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40023c00 	.word	0x40023c00
 8003294:	40023800 	.word	0x40023800
 8003298:	08009654 	.word	0x08009654
 800329c:	20000000 	.word	0x20000000
 80032a0:	20000004 	.word	0x20000004

080032a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032aa:	681b      	ldr	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000000 	.word	0x20000000

080032bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032c0:	f7ff fff0 	bl	80032a4 <HAL_RCC_GetHCLKFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	0a9b      	lsrs	r3, r3, #10
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	4903      	ldr	r1, [pc, #12]	; (80032e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032d2:	5ccb      	ldrb	r3, [r1, r3]
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40023800 	.word	0x40023800
 80032e0:	08009664 	.word	0x08009664

080032e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032e8:	f7ff ffdc 	bl	80032a4 <HAL_RCC_GetHCLKFreq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	0b5b      	lsrs	r3, r3, #13
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	4903      	ldr	r1, [pc, #12]	; (8003308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032fa:	5ccb      	ldrb	r3, [r1, r3]
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40023800 	.word	0x40023800
 8003308:	08009664 	.word	0x08009664

0800330c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	220f      	movs	r2, #15
 800331a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800331c:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_RCC_GetClockConfig+0x5c>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0203 	and.w	r2, r3, #3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003328:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <HAL_RCC_GetClockConfig+0x5c>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <HAL_RCC_GetClockConfig+0x5c>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003340:	4b09      	ldr	r3, [pc, #36]	; (8003368 <HAL_RCC_GetClockConfig+0x5c>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	08db      	lsrs	r3, r3, #3
 8003346:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800334e:	4b07      	ldr	r3, [pc, #28]	; (800336c <HAL_RCC_GetClockConfig+0x60>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 020f 	and.w	r2, r3, #15
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	601a      	str	r2, [r3, #0]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800
 800336c:	40023c00 	.word	0x40023c00

08003370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003374:	b0ae      	sub	sp, #184	; 0xb8
 8003376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003396:	4bcb      	ldr	r3, [pc, #812]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	f200 8206 	bhi.w	80037b0 <HAL_RCC_GetSysClockFreq+0x440>
 80033a4:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <HAL_RCC_GetSysClockFreq+0x3c>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033e1 	.word	0x080033e1
 80033b0:	080037b1 	.word	0x080037b1
 80033b4:	080037b1 	.word	0x080037b1
 80033b8:	080037b1 	.word	0x080037b1
 80033bc:	080033e9 	.word	0x080033e9
 80033c0:	080037b1 	.word	0x080037b1
 80033c4:	080037b1 	.word	0x080037b1
 80033c8:	080037b1 	.word	0x080037b1
 80033cc:	080033f1 	.word	0x080033f1
 80033d0:	080037b1 	.word	0x080037b1
 80033d4:	080037b1 	.word	0x080037b1
 80033d8:	080037b1 	.word	0x080037b1
 80033dc:	080035e1 	.word	0x080035e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e0:	4bb9      	ldr	r3, [pc, #740]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80033e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80033e6:	e1e7      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e8:	4bb8      	ldr	r3, [pc, #736]	; (80036cc <HAL_RCC_GetSysClockFreq+0x35c>)
 80033ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80033ee:	e1e3      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f0:	4bb4      	ldr	r3, [pc, #720]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033fc:	4bb1      	ldr	r3, [pc, #708]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d071      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003408:	4bae      	ldr	r3, [pc, #696]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	099b      	lsrs	r3, r3, #6
 800340e:	2200      	movs	r2, #0
 8003410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003414:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800341c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003420:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800342a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800342e:	4622      	mov	r2, r4
 8003430:	462b      	mov	r3, r5
 8003432:	f04f 0000 	mov.w	r0, #0
 8003436:	f04f 0100 	mov.w	r1, #0
 800343a:	0159      	lsls	r1, r3, #5
 800343c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003440:	0150      	lsls	r0, r2, #5
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4621      	mov	r1, r4
 8003448:	1a51      	subs	r1, r2, r1
 800344a:	6439      	str	r1, [r7, #64]	; 0x40
 800344c:	4629      	mov	r1, r5
 800344e:	eb63 0301 	sbc.w	r3, r3, r1
 8003452:	647b      	str	r3, [r7, #68]	; 0x44
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003460:	4649      	mov	r1, r9
 8003462:	018b      	lsls	r3, r1, #6
 8003464:	4641      	mov	r1, r8
 8003466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800346a:	4641      	mov	r1, r8
 800346c:	018a      	lsls	r2, r1, #6
 800346e:	4641      	mov	r1, r8
 8003470:	1a51      	subs	r1, r2, r1
 8003472:	63b9      	str	r1, [r7, #56]	; 0x38
 8003474:	4649      	mov	r1, r9
 8003476:	eb63 0301 	sbc.w	r3, r3, r1
 800347a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003488:	4649      	mov	r1, r9
 800348a:	00cb      	lsls	r3, r1, #3
 800348c:	4641      	mov	r1, r8
 800348e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003492:	4641      	mov	r1, r8
 8003494:	00ca      	lsls	r2, r1, #3
 8003496:	4610      	mov	r0, r2
 8003498:	4619      	mov	r1, r3
 800349a:	4603      	mov	r3, r0
 800349c:	4622      	mov	r2, r4
 800349e:	189b      	adds	r3, r3, r2
 80034a0:	633b      	str	r3, [r7, #48]	; 0x30
 80034a2:	462b      	mov	r3, r5
 80034a4:	460a      	mov	r2, r1
 80034a6:	eb42 0303 	adc.w	r3, r2, r3
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034b8:	4629      	mov	r1, r5
 80034ba:	024b      	lsls	r3, r1, #9
 80034bc:	4621      	mov	r1, r4
 80034be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034c2:	4621      	mov	r1, r4
 80034c4:	024a      	lsls	r2, r1, #9
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80034dc:	f7fc fef0 	bl	80002c0 <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4613      	mov	r3, r2
 80034e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034ea:	e067      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ec:	4b75      	ldr	r3, [pc, #468]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034f8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80034fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003504:	67bb      	str	r3, [r7, #120]	; 0x78
 8003506:	2300      	movs	r3, #0
 8003508:	67fb      	str	r3, [r7, #124]	; 0x7c
 800350a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800350e:	4622      	mov	r2, r4
 8003510:	462b      	mov	r3, r5
 8003512:	f04f 0000 	mov.w	r0, #0
 8003516:	f04f 0100 	mov.w	r1, #0
 800351a:	0159      	lsls	r1, r3, #5
 800351c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003520:	0150      	lsls	r0, r2, #5
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4621      	mov	r1, r4
 8003528:	1a51      	subs	r1, r2, r1
 800352a:	62b9      	str	r1, [r7, #40]	; 0x28
 800352c:	4629      	mov	r1, r5
 800352e:	eb63 0301 	sbc.w	r3, r3, r1
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003540:	4649      	mov	r1, r9
 8003542:	018b      	lsls	r3, r1, #6
 8003544:	4641      	mov	r1, r8
 8003546:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800354a:	4641      	mov	r1, r8
 800354c:	018a      	lsls	r2, r1, #6
 800354e:	4641      	mov	r1, r8
 8003550:	ebb2 0a01 	subs.w	sl, r2, r1
 8003554:	4649      	mov	r1, r9
 8003556:	eb63 0b01 	sbc.w	fp, r3, r1
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003566:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800356a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800356e:	4692      	mov	sl, r2
 8003570:	469b      	mov	fp, r3
 8003572:	4623      	mov	r3, r4
 8003574:	eb1a 0303 	adds.w	r3, sl, r3
 8003578:	623b      	str	r3, [r7, #32]
 800357a:	462b      	mov	r3, r5
 800357c:	eb4b 0303 	adc.w	r3, fp, r3
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800358e:	4629      	mov	r1, r5
 8003590:	028b      	lsls	r3, r1, #10
 8003592:	4621      	mov	r1, r4
 8003594:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003598:	4621      	mov	r1, r4
 800359a:	028a      	lsls	r2, r1, #10
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035a4:	2200      	movs	r2, #0
 80035a6:	673b      	str	r3, [r7, #112]	; 0x70
 80035a8:	677a      	str	r2, [r7, #116]	; 0x74
 80035aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80035ae:	f7fc fe87 	bl	80002c0 <__aeabi_uldivmod>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4613      	mov	r3, r2
 80035b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035bc:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	0c1b      	lsrs	r3, r3, #16
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	3301      	adds	r3, #1
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80035ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035de:	e0eb      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035e0:	4b38      	ldr	r3, [pc, #224]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ec:	4b35      	ldr	r3, [pc, #212]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d06b      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f8:	4b32      	ldr	r3, [pc, #200]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	099b      	lsrs	r3, r3, #6
 80035fe:	2200      	movs	r2, #0
 8003600:	66bb      	str	r3, [r7, #104]	; 0x68
 8003602:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360a:	663b      	str	r3, [r7, #96]	; 0x60
 800360c:	2300      	movs	r3, #0
 800360e:	667b      	str	r3, [r7, #100]	; 0x64
 8003610:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003614:	4622      	mov	r2, r4
 8003616:	462b      	mov	r3, r5
 8003618:	f04f 0000 	mov.w	r0, #0
 800361c:	f04f 0100 	mov.w	r1, #0
 8003620:	0159      	lsls	r1, r3, #5
 8003622:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003626:	0150      	lsls	r0, r2, #5
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4621      	mov	r1, r4
 800362e:	1a51      	subs	r1, r2, r1
 8003630:	61b9      	str	r1, [r7, #24]
 8003632:	4629      	mov	r1, r5
 8003634:	eb63 0301 	sbc.w	r3, r3, r1
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003646:	4659      	mov	r1, fp
 8003648:	018b      	lsls	r3, r1, #6
 800364a:	4651      	mov	r1, sl
 800364c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003650:	4651      	mov	r1, sl
 8003652:	018a      	lsls	r2, r1, #6
 8003654:	4651      	mov	r1, sl
 8003656:	ebb2 0801 	subs.w	r8, r2, r1
 800365a:	4659      	mov	r1, fp
 800365c:	eb63 0901 	sbc.w	r9, r3, r1
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800366c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003670:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003674:	4690      	mov	r8, r2
 8003676:	4699      	mov	r9, r3
 8003678:	4623      	mov	r3, r4
 800367a:	eb18 0303 	adds.w	r3, r8, r3
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	462b      	mov	r3, r5
 8003682:	eb49 0303 	adc.w	r3, r9, r3
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003694:	4629      	mov	r1, r5
 8003696:	024b      	lsls	r3, r1, #9
 8003698:	4621      	mov	r1, r4
 800369a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800369e:	4621      	mov	r1, r4
 80036a0:	024a      	lsls	r2, r1, #9
 80036a2:	4610      	mov	r0, r2
 80036a4:	4619      	mov	r1, r3
 80036a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036aa:	2200      	movs	r2, #0
 80036ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80036ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80036b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036b4:	f7fc fe04 	bl	80002c0 <__aeabi_uldivmod>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4613      	mov	r3, r2
 80036be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036c2:	e065      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x420>
 80036c4:	40023800 	.word	0x40023800
 80036c8:	00f42400 	.word	0x00f42400
 80036cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d0:	4b3d      	ldr	r3, [pc, #244]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	099b      	lsrs	r3, r3, #6
 80036d6:	2200      	movs	r2, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	4611      	mov	r1, r2
 80036dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036e0:	653b      	str	r3, [r7, #80]	; 0x50
 80036e2:	2300      	movs	r3, #0
 80036e4:	657b      	str	r3, [r7, #84]	; 0x54
 80036e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80036ea:	4642      	mov	r2, r8
 80036ec:	464b      	mov	r3, r9
 80036ee:	f04f 0000 	mov.w	r0, #0
 80036f2:	f04f 0100 	mov.w	r1, #0
 80036f6:	0159      	lsls	r1, r3, #5
 80036f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036fc:	0150      	lsls	r0, r2, #5
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4641      	mov	r1, r8
 8003704:	1a51      	subs	r1, r2, r1
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	4649      	mov	r1, r9
 800370a:	eb63 0301 	sbc.w	r3, r3, r1
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800371c:	4659      	mov	r1, fp
 800371e:	018b      	lsls	r3, r1, #6
 8003720:	4651      	mov	r1, sl
 8003722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003726:	4651      	mov	r1, sl
 8003728:	018a      	lsls	r2, r1, #6
 800372a:	4651      	mov	r1, sl
 800372c:	1a54      	subs	r4, r2, r1
 800372e:	4659      	mov	r1, fp
 8003730:	eb63 0501 	sbc.w	r5, r3, r1
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	00eb      	lsls	r3, r5, #3
 800373e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003742:	00e2      	lsls	r2, r4, #3
 8003744:	4614      	mov	r4, r2
 8003746:	461d      	mov	r5, r3
 8003748:	4643      	mov	r3, r8
 800374a:	18e3      	adds	r3, r4, r3
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	464b      	mov	r3, r9
 8003750:	eb45 0303 	adc.w	r3, r5, r3
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003762:	4629      	mov	r1, r5
 8003764:	028b      	lsls	r3, r1, #10
 8003766:	4621      	mov	r1, r4
 8003768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800376c:	4621      	mov	r1, r4
 800376e:	028a      	lsls	r2, r1, #10
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003778:	2200      	movs	r2, #0
 800377a:	64bb      	str	r3, [r7, #72]	; 0x48
 800377c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800377e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003782:	f7fc fd9d 	bl	80002c0 <__aeabi_uldivmod>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4613      	mov	r3, r2
 800378c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003790:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	0f1b      	lsrs	r3, r3, #28
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800379e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80037ae:	e003      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80037b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80037b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	37b8      	adds	r7, #184	; 0xb8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800
 80037cc:	00f42400 	.word	0x00f42400

080037d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e28d      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8083 	beq.w	80038f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037f0:	4b94      	ldr	r3, [pc, #592]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d019      	beq.n	8003830 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037fc:	4b91      	ldr	r3, [pc, #580]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003804:	2b08      	cmp	r3, #8
 8003806:	d106      	bne.n	8003816 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003808:	4b8e      	ldr	r3, [pc, #568]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003814:	d00c      	beq.n	8003830 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003816:	4b8b      	ldr	r3, [pc, #556]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800381e:	2b0c      	cmp	r3, #12
 8003820:	d112      	bne.n	8003848 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003822:	4b88      	ldr	r3, [pc, #544]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800382e:	d10b      	bne.n	8003848 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003830:	4b84      	ldr	r3, [pc, #528]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d05b      	beq.n	80038f4 <HAL_RCC_OscConfig+0x124>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d157      	bne.n	80038f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e25a      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003850:	d106      	bne.n	8003860 <HAL_RCC_OscConfig+0x90>
 8003852:	4b7c      	ldr	r3, [pc, #496]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a7b      	ldr	r2, [pc, #492]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e01d      	b.n	800389c <HAL_RCC_OscConfig+0xcc>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003868:	d10c      	bne.n	8003884 <HAL_RCC_OscConfig+0xb4>
 800386a:	4b76      	ldr	r3, [pc, #472]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a75      	ldr	r2, [pc, #468]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	4b73      	ldr	r3, [pc, #460]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a72      	ldr	r2, [pc, #456]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e00b      	b.n	800389c <HAL_RCC_OscConfig+0xcc>
 8003884:	4b6f      	ldr	r3, [pc, #444]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a6e      	ldr	r2, [pc, #440]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 800388a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	4b6c      	ldr	r3, [pc, #432]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a6b      	ldr	r2, [pc, #428]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d013      	beq.n	80038cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fd fd0c 	bl	80012c0 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ac:	f7fd fd08 	bl	80012c0 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	; 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e21f      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	4b61      	ldr	r3, [pc, #388]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0xdc>
 80038ca:	e014      	b.n	80038f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fd fcf8 	bl	80012c0 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d4:	f7fd fcf4 	bl	80012c0 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	; 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e20b      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e6:	4b57      	ldr	r3, [pc, #348]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x104>
 80038f2:	e000      	b.n	80038f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d06f      	beq.n	80039e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003902:	4b50      	ldr	r3, [pc, #320]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b00      	cmp	r3, #0
 800390c:	d017      	beq.n	800393e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800390e:	4b4d      	ldr	r3, [pc, #308]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003916:	2b08      	cmp	r3, #8
 8003918:	d105      	bne.n	8003926 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800391a:	4b4a      	ldr	r3, [pc, #296]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00b      	beq.n	800393e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003926:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800392e:	2b0c      	cmp	r3, #12
 8003930:	d11c      	bne.n	800396c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003932:	4b44      	ldr	r3, [pc, #272]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d116      	bne.n	800396c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393e:	4b41      	ldr	r3, [pc, #260]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_RCC_OscConfig+0x186>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d001      	beq.n	8003956 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e1d3      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003956:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4937      	ldr	r1, [pc, #220]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003966:	4313      	orrs	r3, r2
 8003968:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396a:	e03a      	b.n	80039e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d020      	beq.n	80039b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003974:	4b34      	ldr	r3, [pc, #208]	; (8003a48 <HAL_RCC_OscConfig+0x278>)
 8003976:	2201      	movs	r2, #1
 8003978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397a:	f7fd fca1 	bl	80012c0 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003982:	f7fd fc9d 	bl	80012c0 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e1b4      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003994:	4b2b      	ldr	r3, [pc, #172]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a0:	4b28      	ldr	r3, [pc, #160]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4925      	ldr	r1, [pc, #148]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]
 80039b4:	e015      	b.n	80039e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b6:	4b24      	ldr	r3, [pc, #144]	; (8003a48 <HAL_RCC_OscConfig+0x278>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fd fc80 	bl	80012c0 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c4:	f7fd fc7c 	bl	80012c0 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e193      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d6:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d036      	beq.n	8003a5c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d016      	beq.n	8003a24 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f6:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <HAL_RCC_OscConfig+0x27c>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fc:	f7fd fc60 	bl	80012c0 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a04:	f7fd fc5c 	bl	80012c0 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e173      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x234>
 8003a22:	e01b      	b.n	8003a5c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a24:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <HAL_RCC_OscConfig+0x27c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fd fc49 	bl	80012c0 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a30:	e00e      	b.n	8003a50 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a32:	f7fd fc45 	bl	80012c0 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d907      	bls.n	8003a50 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e15c      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
 8003a44:	40023800 	.word	0x40023800
 8003a48:	42470000 	.word	0x42470000
 8003a4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a50:	4b8a      	ldr	r3, [pc, #552]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ea      	bne.n	8003a32 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8097 	beq.w	8003b98 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6e:	4b83      	ldr	r3, [pc, #524]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10f      	bne.n	8003a9a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	4b7f      	ldr	r3, [pc, #508]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	4a7e      	ldr	r2, [pc, #504]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a88:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8a:	4b7c      	ldr	r3, [pc, #496]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a96:	2301      	movs	r3, #1
 8003a98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9a:	4b79      	ldr	r3, [pc, #484]	; (8003c80 <HAL_RCC_OscConfig+0x4b0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d118      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aa6:	4b76      	ldr	r3, [pc, #472]	; (8003c80 <HAL_RCC_OscConfig+0x4b0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a75      	ldr	r2, [pc, #468]	; (8003c80 <HAL_RCC_OscConfig+0x4b0>)
 8003aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab2:	f7fd fc05 	bl	80012c0 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aba:	f7fd fc01 	bl	80012c0 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e118      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003acc:	4b6c      	ldr	r3, [pc, #432]	; (8003c80 <HAL_RCC_OscConfig+0x4b0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d106      	bne.n	8003aee <HAL_RCC_OscConfig+0x31e>
 8003ae0:	4b66      	ldr	r3, [pc, #408]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae4:	4a65      	ldr	r2, [pc, #404]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	6713      	str	r3, [r2, #112]	; 0x70
 8003aec:	e01c      	b.n	8003b28 <HAL_RCC_OscConfig+0x358>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b05      	cmp	r3, #5
 8003af4:	d10c      	bne.n	8003b10 <HAL_RCC_OscConfig+0x340>
 8003af6:	4b61      	ldr	r3, [pc, #388]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	4a60      	ldr	r2, [pc, #384]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003afc:	f043 0304 	orr.w	r3, r3, #4
 8003b00:	6713      	str	r3, [r2, #112]	; 0x70
 8003b02:	4b5e      	ldr	r3, [pc, #376]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	4a5d      	ldr	r2, [pc, #372]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0e:	e00b      	b.n	8003b28 <HAL_RCC_OscConfig+0x358>
 8003b10:	4b5a      	ldr	r3, [pc, #360]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	4a59      	ldr	r2, [pc, #356]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b16:	f023 0301 	bic.w	r3, r3, #1
 8003b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1c:	4b57      	ldr	r3, [pc, #348]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b20:	4a56      	ldr	r2, [pc, #344]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b22:	f023 0304 	bic.w	r3, r3, #4
 8003b26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d015      	beq.n	8003b5c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b30:	f7fd fbc6 	bl	80012c0 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b38:	f7fd fbc2 	bl	80012c0 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e0d7      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4e:	4b4b      	ldr	r3, [pc, #300]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0ee      	beq.n	8003b38 <HAL_RCC_OscConfig+0x368>
 8003b5a:	e014      	b.n	8003b86 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fd fbb0 	bl	80012c0 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b64:	f7fd fbac 	bl	80012c0 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e0c1      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7a:	4b40      	ldr	r3, [pc, #256]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1ee      	bne.n	8003b64 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b86:	7dfb      	ldrb	r3, [r7, #23]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d105      	bne.n	8003b98 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b8c:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	4a3a      	ldr	r2, [pc, #232]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80ad 	beq.w	8003cfc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ba2:	4b36      	ldr	r3, [pc, #216]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d060      	beq.n	8003c70 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d145      	bne.n	8003c42 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb6:	4b33      	ldr	r3, [pc, #204]	; (8003c84 <HAL_RCC_OscConfig+0x4b4>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fd fb80 	bl	80012c0 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc4:	f7fd fb7c 	bl	80012c0 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e093      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd6:	4b29      	ldr	r3, [pc, #164]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	019b      	lsls	r3, r3, #6
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	085b      	lsrs	r3, r3, #1
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	041b      	lsls	r3, r3, #16
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	061b      	lsls	r3, r3, #24
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	071b      	lsls	r3, r3, #28
 8003c0e:	491b      	ldr	r1, [pc, #108]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c14:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_RCC_OscConfig+0x4b4>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1a:	f7fd fb51 	bl	80012c0 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c22:	f7fd fb4d 	bl	80012c0 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e064      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c34:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x452>
 8003c40:	e05c      	b.n	8003cfc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <HAL_RCC_OscConfig+0x4b4>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fd fb3a 	bl	80012c0 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c50:	f7fd fb36 	bl	80012c0 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e04d      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x480>
 8003c6e:	e045      	b.n	8003cfc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e040      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40007000 	.word	0x40007000
 8003c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c88:	4b1f      	ldr	r3, [pc, #124]	; (8003d08 <HAL_RCC_OscConfig+0x538>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d030      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d129      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d122      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cb8:	4013      	ands	r3, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d119      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d10f      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d107      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40023800 	.word	0x40023800

08003d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e041      	b.n	8003da2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f839 	bl	8003daa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	f000 f9d8 	bl	8004100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d001      	beq.n	8003dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e04e      	b.n	8003e76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a23      	ldr	r2, [pc, #140]	; (8003e84 <HAL_TIM_Base_Start_IT+0xc4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d022      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e02:	d01d      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1f      	ldr	r2, [pc, #124]	; (8003e88 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d018      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <HAL_TIM_Base_Start_IT+0xcc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d013      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00e      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1b      	ldr	r2, [pc, #108]	; (8003e94 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a19      	ldr	r2, [pc, #100]	; (8003e98 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d004      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a18      	ldr	r2, [pc, #96]	; (8003e9c <HAL_TIM_Base_Start_IT+0xdc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d111      	bne.n	8003e64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d010      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0201 	orr.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e62:	e007      	b.n	8003e74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800
 8003e90:	40000c00 	.word	0x40000c00
 8003e94:	40010400 	.word	0x40010400
 8003e98:	40014000 	.word	0x40014000
 8003e9c:	40001800 	.word	0x40001800

08003ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d122      	bne.n	8003efc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d11b      	bne.n	8003efc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0202 	mvn.w	r2, #2
 8003ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f8ee 	bl	80040c4 <HAL_TIM_IC_CaptureCallback>
 8003ee8:	e005      	b.n	8003ef6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f8e0 	bl	80040b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f8f1 	bl	80040d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d122      	bne.n	8003f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d11b      	bne.n	8003f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0204 	mvn.w	r2, #4
 8003f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2202      	movs	r2, #2
 8003f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f8c4 	bl	80040c4 <HAL_TIM_IC_CaptureCallback>
 8003f3c:	e005      	b.n	8003f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f8b6 	bl	80040b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f8c7 	bl	80040d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d122      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d11b      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0208 	mvn.w	r2, #8
 8003f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2204      	movs	r2, #4
 8003f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f89a 	bl	80040c4 <HAL_TIM_IC_CaptureCallback>
 8003f90:	e005      	b.n	8003f9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f88c 	bl	80040b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f89d 	bl	80040d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0310 	and.w	r3, r3, #16
 8003fae:	2b10      	cmp	r3, #16
 8003fb0:	d122      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b10      	cmp	r3, #16
 8003fbe:	d11b      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f06f 0210 	mvn.w	r2, #16
 8003fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2208      	movs	r2, #8
 8003fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f870 	bl	80040c4 <HAL_TIM_IC_CaptureCallback>
 8003fe4:	e005      	b.n	8003ff2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f862 	bl	80040b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f873 	bl	80040d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b01      	cmp	r3, #1
 8004004:	d10e      	bne.n	8004024 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b01      	cmp	r3, #1
 8004012:	d107      	bne.n	8004024 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0201 	mvn.w	r2, #1
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fc ff4a 	bl	8000eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402e:	2b80      	cmp	r3, #128	; 0x80
 8004030:	d10e      	bne.n	8004050 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403c:	2b80      	cmp	r3, #128	; 0x80
 800403e:	d107      	bne.n	8004050 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f902 	bl	8004254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	d10e      	bne.n	800407c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	d107      	bne.n	800407c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f838 	bl	80040ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b20      	cmp	r3, #32
 8004088:	d10e      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b20      	cmp	r3, #32
 8004096:	d107      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0220 	mvn.w	r2, #32
 80040a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f8cc 	bl	8004240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a40      	ldr	r2, [pc, #256]	; (8004214 <TIM_Base_SetConfig+0x114>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d013      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411e:	d00f      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a3d      	ldr	r2, [pc, #244]	; (8004218 <TIM_Base_SetConfig+0x118>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00b      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a3c      	ldr	r2, [pc, #240]	; (800421c <TIM_Base_SetConfig+0x11c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d007      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a3b      	ldr	r2, [pc, #236]	; (8004220 <TIM_Base_SetConfig+0x120>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a3a      	ldr	r2, [pc, #232]	; (8004224 <TIM_Base_SetConfig+0x124>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d108      	bne.n	8004152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a2f      	ldr	r2, [pc, #188]	; (8004214 <TIM_Base_SetConfig+0x114>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d02b      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004160:	d027      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a2c      	ldr	r2, [pc, #176]	; (8004218 <TIM_Base_SetConfig+0x118>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d023      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a2b      	ldr	r2, [pc, #172]	; (800421c <TIM_Base_SetConfig+0x11c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d01f      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a2a      	ldr	r2, [pc, #168]	; (8004220 <TIM_Base_SetConfig+0x120>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01b      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a29      	ldr	r2, [pc, #164]	; (8004224 <TIM_Base_SetConfig+0x124>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d017      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a28      	ldr	r2, [pc, #160]	; (8004228 <TIM_Base_SetConfig+0x128>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d013      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a27      	ldr	r2, [pc, #156]	; (800422c <TIM_Base_SetConfig+0x12c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00f      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a26      	ldr	r2, [pc, #152]	; (8004230 <TIM_Base_SetConfig+0x130>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00b      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a25      	ldr	r2, [pc, #148]	; (8004234 <TIM_Base_SetConfig+0x134>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d007      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a24      	ldr	r2, [pc, #144]	; (8004238 <TIM_Base_SetConfig+0x138>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d003      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a23      	ldr	r2, [pc, #140]	; (800423c <TIM_Base_SetConfig+0x13c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d108      	bne.n	80041c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a0a      	ldr	r2, [pc, #40]	; (8004214 <TIM_Base_SetConfig+0x114>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_Base_SetConfig+0xf8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a0c      	ldr	r2, [pc, #48]	; (8004224 <TIM_Base_SetConfig+0x124>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d103      	bne.n	8004200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	615a      	str	r2, [r3, #20]
}
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40010000 	.word	0x40010000
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800
 8004220:	40000c00 	.word	0x40000c00
 8004224:	40010400 	.word	0x40010400
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800
 8004234:	40001800 	.word	0x40001800
 8004238:	40001c00 	.word	0x40001c00
 800423c:	40002000 	.word	0x40002000

08004240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e03f      	b.n	80042fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fc ff6e 	bl	8001170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2224      	movs	r2, #36	; 0x24
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f929 	bl	8004504 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695a      	ldr	r2, [r3, #20]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b08a      	sub	sp, #40	; 0x28
 8004306:	af02      	add	r7, sp, #8
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	603b      	str	r3, [r7, #0]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b20      	cmp	r3, #32
 8004320:	d17c      	bne.n	800441c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_UART_Transmit+0x2c>
 8004328:	88fb      	ldrh	r3, [r7, #6]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e075      	b.n	800441e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_UART_Transmit+0x3e>
 800433c:	2302      	movs	r3, #2
 800433e:	e06e      	b.n	800441e <HAL_UART_Transmit+0x11c>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2221      	movs	r2, #33	; 0x21
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004356:	f7fc ffb3 	bl	80012c0 <HAL_GetTick>
 800435a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	88fa      	ldrh	r2, [r7, #6]
 8004360:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	88fa      	ldrh	r2, [r7, #6]
 8004366:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004370:	d108      	bne.n	8004384 <HAL_UART_Transmit+0x82>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d104      	bne.n	8004384 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	e003      	b.n	800438c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004388:	2300      	movs	r3, #0
 800438a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004394:	e02a      	b.n	80043ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2200      	movs	r2, #0
 800439e:	2180      	movs	r1, #128	; 0x80
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f840 	bl	8004426 <UART_WaitOnFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e036      	b.n	800441e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10b      	bne.n	80043ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	3302      	adds	r3, #2
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	e007      	b.n	80043de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	781a      	ldrb	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	3301      	adds	r3, #1
 80043dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1cf      	bne.n	8004396 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2200      	movs	r2, #0
 80043fe:	2140      	movs	r1, #64	; 0x40
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f810 	bl	8004426 <UART_WaitOnFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e006      	b.n	800441e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e000      	b.n	800441e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800441c:	2302      	movs	r3, #2
  }
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b090      	sub	sp, #64	; 0x40
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	4613      	mov	r3, r2
 8004434:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004436:	e050      	b.n	80044da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800443e:	d04c      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0x30>
 8004446:	f7fc ff3b 	bl	80012c0 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004452:	429a      	cmp	r2, r3
 8004454:	d241      	bcs.n	80044da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	330c      	adds	r3, #12
 800445c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800446c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004476:	637a      	str	r2, [r7, #52]	; 0x34
 8004478:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800447c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800447e:	e841 2300 	strex	r3, r2, [r1]
 8004482:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e5      	bne.n	8004456 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3314      	adds	r3, #20
 8004490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	613b      	str	r3, [r7, #16]
   return(result);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3314      	adds	r3, #20
 80044a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044aa:	623a      	str	r2, [r7, #32]
 80044ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	69f9      	ldr	r1, [r7, #28]
 80044b0:	6a3a      	ldr	r2, [r7, #32]
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1e5      	bne.n	800448a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e00f      	b.n	80044fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4013      	ands	r3, r2
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	bf0c      	ite	eq
 80044ea:	2301      	moveq	r3, #1
 80044ec:	2300      	movne	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	461a      	mov	r2, r3
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d09f      	beq.n	8004438 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3740      	adds	r7, #64	; 0x40
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004508:	b0c0      	sub	sp, #256	; 0x100
 800450a:	af00      	add	r7, sp, #0
 800450c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004520:	68d9      	ldr	r1, [r3, #12]
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	ea40 0301 	orr.w	r3, r0, r1
 800452c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	431a      	orrs	r2, r3
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	431a      	orrs	r2, r3
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800455c:	f021 010c 	bic.w	r1, r1, #12
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800456a:	430b      	orrs	r3, r1
 800456c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457e:	6999      	ldr	r1, [r3, #24]
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	ea40 0301 	orr.w	r3, r0, r1
 800458a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4b8f      	ldr	r3, [pc, #572]	; (80047d0 <UART_SetConfig+0x2cc>)
 8004594:	429a      	cmp	r2, r3
 8004596:	d005      	beq.n	80045a4 <UART_SetConfig+0xa0>
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	4b8d      	ldr	r3, [pc, #564]	; (80047d4 <UART_SetConfig+0x2d0>)
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d104      	bne.n	80045ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045a4:	f7fe fe9e 	bl	80032e4 <HAL_RCC_GetPCLK2Freq>
 80045a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045ac:	e003      	b.n	80045b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045ae:	f7fe fe85 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 80045b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c0:	f040 810c 	bne.w	80047dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045c8:	2200      	movs	r2, #0
 80045ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80045d6:	4622      	mov	r2, r4
 80045d8:	462b      	mov	r3, r5
 80045da:	1891      	adds	r1, r2, r2
 80045dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80045de:	415b      	adcs	r3, r3
 80045e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045e6:	4621      	mov	r1, r4
 80045e8:	eb12 0801 	adds.w	r8, r2, r1
 80045ec:	4629      	mov	r1, r5
 80045ee:	eb43 0901 	adc.w	r9, r3, r1
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004606:	4690      	mov	r8, r2
 8004608:	4699      	mov	r9, r3
 800460a:	4623      	mov	r3, r4
 800460c:	eb18 0303 	adds.w	r3, r8, r3
 8004610:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004614:	462b      	mov	r3, r5
 8004616:	eb49 0303 	adc.w	r3, r9, r3
 800461a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800462a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800462e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004632:	460b      	mov	r3, r1
 8004634:	18db      	adds	r3, r3, r3
 8004636:	653b      	str	r3, [r7, #80]	; 0x50
 8004638:	4613      	mov	r3, r2
 800463a:	eb42 0303 	adc.w	r3, r2, r3
 800463e:	657b      	str	r3, [r7, #84]	; 0x54
 8004640:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004644:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004648:	f7fb fe3a 	bl	80002c0 <__aeabi_uldivmod>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4b61      	ldr	r3, [pc, #388]	; (80047d8 <UART_SetConfig+0x2d4>)
 8004652:	fba3 2302 	umull	r2, r3, r3, r2
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	011c      	lsls	r4, r3, #4
 800465a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800465e:	2200      	movs	r2, #0
 8004660:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004664:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004668:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800466c:	4642      	mov	r2, r8
 800466e:	464b      	mov	r3, r9
 8004670:	1891      	adds	r1, r2, r2
 8004672:	64b9      	str	r1, [r7, #72]	; 0x48
 8004674:	415b      	adcs	r3, r3
 8004676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004678:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800467c:	4641      	mov	r1, r8
 800467e:	eb12 0a01 	adds.w	sl, r2, r1
 8004682:	4649      	mov	r1, r9
 8004684:	eb43 0b01 	adc.w	fp, r3, r1
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004694:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004698:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800469c:	4692      	mov	sl, r2
 800469e:	469b      	mov	fp, r3
 80046a0:	4643      	mov	r3, r8
 80046a2:	eb1a 0303 	adds.w	r3, sl, r3
 80046a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046aa:	464b      	mov	r3, r9
 80046ac:	eb4b 0303 	adc.w	r3, fp, r3
 80046b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046c8:	460b      	mov	r3, r1
 80046ca:	18db      	adds	r3, r3, r3
 80046cc:	643b      	str	r3, [r7, #64]	; 0x40
 80046ce:	4613      	mov	r3, r2
 80046d0:	eb42 0303 	adc.w	r3, r2, r3
 80046d4:	647b      	str	r3, [r7, #68]	; 0x44
 80046d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80046de:	f7fb fdef 	bl	80002c0 <__aeabi_uldivmod>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4611      	mov	r1, r2
 80046e8:	4b3b      	ldr	r3, [pc, #236]	; (80047d8 <UART_SetConfig+0x2d4>)
 80046ea:	fba3 2301 	umull	r2, r3, r3, r1
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	2264      	movs	r2, #100	; 0x64
 80046f2:	fb02 f303 	mul.w	r3, r2, r3
 80046f6:	1acb      	subs	r3, r1, r3
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046fe:	4b36      	ldr	r3, [pc, #216]	; (80047d8 <UART_SetConfig+0x2d4>)
 8004700:	fba3 2302 	umull	r2, r3, r3, r2
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800470c:	441c      	add	r4, r3
 800470e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004712:	2200      	movs	r2, #0
 8004714:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004718:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800471c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004720:	4642      	mov	r2, r8
 8004722:	464b      	mov	r3, r9
 8004724:	1891      	adds	r1, r2, r2
 8004726:	63b9      	str	r1, [r7, #56]	; 0x38
 8004728:	415b      	adcs	r3, r3
 800472a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800472c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004730:	4641      	mov	r1, r8
 8004732:	1851      	adds	r1, r2, r1
 8004734:	6339      	str	r1, [r7, #48]	; 0x30
 8004736:	4649      	mov	r1, r9
 8004738:	414b      	adcs	r3, r1
 800473a:	637b      	str	r3, [r7, #52]	; 0x34
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004748:	4659      	mov	r1, fp
 800474a:	00cb      	lsls	r3, r1, #3
 800474c:	4651      	mov	r1, sl
 800474e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004752:	4651      	mov	r1, sl
 8004754:	00ca      	lsls	r2, r1, #3
 8004756:	4610      	mov	r0, r2
 8004758:	4619      	mov	r1, r3
 800475a:	4603      	mov	r3, r0
 800475c:	4642      	mov	r2, r8
 800475e:	189b      	adds	r3, r3, r2
 8004760:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004764:	464b      	mov	r3, r9
 8004766:	460a      	mov	r2, r1
 8004768:	eb42 0303 	adc.w	r3, r2, r3
 800476c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800477c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004780:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004784:	460b      	mov	r3, r1
 8004786:	18db      	adds	r3, r3, r3
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28
 800478a:	4613      	mov	r3, r2
 800478c:	eb42 0303 	adc.w	r3, r2, r3
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004792:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004796:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800479a:	f7fb fd91 	bl	80002c0 <__aeabi_uldivmod>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <UART_SetConfig+0x2d4>)
 80047a4:	fba3 1302 	umull	r1, r3, r3, r2
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	2164      	movs	r1, #100	; 0x64
 80047ac:	fb01 f303 	mul.w	r3, r1, r3
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	3332      	adds	r3, #50	; 0x32
 80047b6:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <UART_SetConfig+0x2d4>)
 80047b8:	fba2 2303 	umull	r2, r3, r2, r3
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	f003 0207 	and.w	r2, r3, #7
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4422      	add	r2, r4
 80047ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047cc:	e105      	b.n	80049da <UART_SetConfig+0x4d6>
 80047ce:	bf00      	nop
 80047d0:	40011000 	.word	0x40011000
 80047d4:	40011400 	.word	0x40011400
 80047d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047e0:	2200      	movs	r2, #0
 80047e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047ee:	4642      	mov	r2, r8
 80047f0:	464b      	mov	r3, r9
 80047f2:	1891      	adds	r1, r2, r2
 80047f4:	6239      	str	r1, [r7, #32]
 80047f6:	415b      	adcs	r3, r3
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
 80047fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047fe:	4641      	mov	r1, r8
 8004800:	1854      	adds	r4, r2, r1
 8004802:	4649      	mov	r1, r9
 8004804:	eb43 0501 	adc.w	r5, r3, r1
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	f04f 0300 	mov.w	r3, #0
 8004810:	00eb      	lsls	r3, r5, #3
 8004812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004816:	00e2      	lsls	r2, r4, #3
 8004818:	4614      	mov	r4, r2
 800481a:	461d      	mov	r5, r3
 800481c:	4643      	mov	r3, r8
 800481e:	18e3      	adds	r3, r4, r3
 8004820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004824:	464b      	mov	r3, r9
 8004826:	eb45 0303 	adc.w	r3, r5, r3
 800482a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800483a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800484a:	4629      	mov	r1, r5
 800484c:	008b      	lsls	r3, r1, #2
 800484e:	4621      	mov	r1, r4
 8004850:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004854:	4621      	mov	r1, r4
 8004856:	008a      	lsls	r2, r1, #2
 8004858:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800485c:	f7fb fd30 	bl	80002c0 <__aeabi_uldivmod>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4b60      	ldr	r3, [pc, #384]	; (80049e8 <UART_SetConfig+0x4e4>)
 8004866:	fba3 2302 	umull	r2, r3, r3, r2
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	011c      	lsls	r4, r3, #4
 800486e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004872:	2200      	movs	r2, #0
 8004874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004878:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800487c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004880:	4642      	mov	r2, r8
 8004882:	464b      	mov	r3, r9
 8004884:	1891      	adds	r1, r2, r2
 8004886:	61b9      	str	r1, [r7, #24]
 8004888:	415b      	adcs	r3, r3
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004890:	4641      	mov	r1, r8
 8004892:	1851      	adds	r1, r2, r1
 8004894:	6139      	str	r1, [r7, #16]
 8004896:	4649      	mov	r1, r9
 8004898:	414b      	adcs	r3, r1
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048a8:	4659      	mov	r1, fp
 80048aa:	00cb      	lsls	r3, r1, #3
 80048ac:	4651      	mov	r1, sl
 80048ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048b2:	4651      	mov	r1, sl
 80048b4:	00ca      	lsls	r2, r1, #3
 80048b6:	4610      	mov	r0, r2
 80048b8:	4619      	mov	r1, r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	4642      	mov	r2, r8
 80048be:	189b      	adds	r3, r3, r2
 80048c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048c4:	464b      	mov	r3, r9
 80048c6:	460a      	mov	r2, r1
 80048c8:	eb42 0303 	adc.w	r3, r2, r3
 80048cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80048da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048e8:	4649      	mov	r1, r9
 80048ea:	008b      	lsls	r3, r1, #2
 80048ec:	4641      	mov	r1, r8
 80048ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f2:	4641      	mov	r1, r8
 80048f4:	008a      	lsls	r2, r1, #2
 80048f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048fa:	f7fb fce1 	bl	80002c0 <__aeabi_uldivmod>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4b39      	ldr	r3, [pc, #228]	; (80049e8 <UART_SetConfig+0x4e4>)
 8004904:	fba3 1302 	umull	r1, r3, r3, r2
 8004908:	095b      	lsrs	r3, r3, #5
 800490a:	2164      	movs	r1, #100	; 0x64
 800490c:	fb01 f303 	mul.w	r3, r1, r3
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	3332      	adds	r3, #50	; 0x32
 8004916:	4a34      	ldr	r2, [pc, #208]	; (80049e8 <UART_SetConfig+0x4e4>)
 8004918:	fba2 2303 	umull	r2, r3, r2, r3
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004922:	441c      	add	r4, r3
 8004924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004928:	2200      	movs	r2, #0
 800492a:	673b      	str	r3, [r7, #112]	; 0x70
 800492c:	677a      	str	r2, [r7, #116]	; 0x74
 800492e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004932:	4642      	mov	r2, r8
 8004934:	464b      	mov	r3, r9
 8004936:	1891      	adds	r1, r2, r2
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	415b      	adcs	r3, r3
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004942:	4641      	mov	r1, r8
 8004944:	1851      	adds	r1, r2, r1
 8004946:	6039      	str	r1, [r7, #0]
 8004948:	4649      	mov	r1, r9
 800494a:	414b      	adcs	r3, r1
 800494c:	607b      	str	r3, [r7, #4]
 800494e:	f04f 0200 	mov.w	r2, #0
 8004952:	f04f 0300 	mov.w	r3, #0
 8004956:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800495a:	4659      	mov	r1, fp
 800495c:	00cb      	lsls	r3, r1, #3
 800495e:	4651      	mov	r1, sl
 8004960:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004964:	4651      	mov	r1, sl
 8004966:	00ca      	lsls	r2, r1, #3
 8004968:	4610      	mov	r0, r2
 800496a:	4619      	mov	r1, r3
 800496c:	4603      	mov	r3, r0
 800496e:	4642      	mov	r2, r8
 8004970:	189b      	adds	r3, r3, r2
 8004972:	66bb      	str	r3, [r7, #104]	; 0x68
 8004974:	464b      	mov	r3, r9
 8004976:	460a      	mov	r2, r1
 8004978:	eb42 0303 	adc.w	r3, r2, r3
 800497c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800497e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	663b      	str	r3, [r7, #96]	; 0x60
 8004988:	667a      	str	r2, [r7, #100]	; 0x64
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004996:	4649      	mov	r1, r9
 8004998:	008b      	lsls	r3, r1, #2
 800499a:	4641      	mov	r1, r8
 800499c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049a0:	4641      	mov	r1, r8
 80049a2:	008a      	lsls	r2, r1, #2
 80049a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049a8:	f7fb fc8a 	bl	80002c0 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <UART_SetConfig+0x4e4>)
 80049b2:	fba3 1302 	umull	r1, r3, r3, r2
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	2164      	movs	r1, #100	; 0x64
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	3332      	adds	r3, #50	; 0x32
 80049c4:	4a08      	ldr	r2, [pc, #32]	; (80049e8 <UART_SetConfig+0x4e4>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	f003 020f 	and.w	r2, r3, #15
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4422      	add	r2, r4
 80049d8:	609a      	str	r2, [r3, #8]
}
 80049da:	bf00      	nop
 80049dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049e0:	46bd      	mov	sp, r7
 80049e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e6:	bf00      	nop
 80049e8:	51eb851f 	.word	0x51eb851f

080049ec <__NVIC_SetPriority>:
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	4603      	mov	r3, r0
 80049f4:	6039      	str	r1, [r7, #0]
 80049f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	db0a      	blt.n	8004a16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	490c      	ldr	r1, [pc, #48]	; (8004a38 <__NVIC_SetPriority+0x4c>)
 8004a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0a:	0112      	lsls	r2, r2, #4
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	440b      	add	r3, r1
 8004a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a14:	e00a      	b.n	8004a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	4908      	ldr	r1, [pc, #32]	; (8004a3c <__NVIC_SetPriority+0x50>)
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	3b04      	subs	r3, #4
 8004a24:	0112      	lsls	r2, r2, #4
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	440b      	add	r3, r1
 8004a2a:	761a      	strb	r2, [r3, #24]
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	e000e100 	.word	0xe000e100
 8004a3c:	e000ed00 	.word	0xe000ed00

08004a40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <SysTick_Handler+0x1c>)
 8004a46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a48:	f002 fcbc 	bl	80073c4 <xTaskGetSchedulerState>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d001      	beq.n	8004a56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a52:	f003 fdc9 	bl	80085e8 <xPortSysTickHandler>
  }
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	e000e010 	.word	0xe000e010

08004a60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a64:	2100      	movs	r1, #0
 8004a66:	f06f 0004 	mvn.w	r0, #4
 8004a6a:	f7ff ffbf 	bl	80049ec <__NVIC_SetPriority>
#endif
}
 8004a6e:	bf00      	nop
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a7a:	f3ef 8305 	mrs	r3, IPSR
 8004a7e:	603b      	str	r3, [r7, #0]
  return(result);
 8004a80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004a86:	f06f 0305 	mvn.w	r3, #5
 8004a8a:	607b      	str	r3, [r7, #4]
 8004a8c:	e00c      	b.n	8004aa8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <osKernelInitialize+0x44>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d105      	bne.n	8004aa2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004a96:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <osKernelInitialize+0x44>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	607b      	str	r3, [r7, #4]
 8004aa0:	e002      	b.n	8004aa8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004aa6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004aa8:	687b      	ldr	r3, [r7, #4]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	200001dc 	.word	0x200001dc

08004abc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ac2:	f3ef 8305 	mrs	r3, IPSR
 8004ac6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ac8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004ace:	f06f 0305 	mvn.w	r3, #5
 8004ad2:	607b      	str	r3, [r7, #4]
 8004ad4:	e010      	b.n	8004af8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <osKernelStart+0x48>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d109      	bne.n	8004af2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ade:	f7ff ffbf 	bl	8004a60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004ae2:	4b08      	ldr	r3, [pc, #32]	; (8004b04 <osKernelStart+0x48>)
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ae8:	f001 ffda 	bl	8006aa0 <vTaskStartScheduler>
      stat = osOK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	607b      	str	r3, [r7, #4]
 8004af0:	e002      	b.n	8004af8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004af6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004af8:	687b      	ldr	r3, [r7, #4]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	200001dc 	.word	0x200001dc

08004b08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08e      	sub	sp, #56	; 0x38
 8004b0c:	af04      	add	r7, sp, #16
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b18:	f3ef 8305 	mrs	r3, IPSR
 8004b1c:	617b      	str	r3, [r7, #20]
  return(result);
 8004b1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d17e      	bne.n	8004c22 <osThreadNew+0x11a>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d07b      	beq.n	8004c22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004b2a:	2380      	movs	r3, #128	; 0x80
 8004b2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b2e:	2318      	movs	r3, #24
 8004b30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d045      	beq.n	8004bce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <osThreadNew+0x48>
        name = attr->name;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <osThreadNew+0x6e>
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	2b38      	cmp	r3, #56	; 0x38
 8004b68:	d805      	bhi.n	8004b76 <osThreadNew+0x6e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <osThreadNew+0x72>
        return (NULL);
 8004b76:	2300      	movs	r3, #0
 8004b78:	e054      	b.n	8004c24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	089b      	lsrs	r3, r3, #2
 8004b88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00e      	beq.n	8004bb0 <osThreadNew+0xa8>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	2bbb      	cmp	r3, #187	; 0xbb
 8004b98:	d90a      	bls.n	8004bb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d006      	beq.n	8004bb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <osThreadNew+0xa8>
        mem = 1;
 8004baa:	2301      	movs	r3, #1
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	e010      	b.n	8004bd2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10c      	bne.n	8004bd2 <osThreadNew+0xca>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d108      	bne.n	8004bd2 <osThreadNew+0xca>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d104      	bne.n	8004bd2 <osThreadNew+0xca>
          mem = 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	61bb      	str	r3, [r7, #24]
 8004bcc:	e001      	b.n	8004bd2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d110      	bne.n	8004bfa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004be0:	9202      	str	r2, [sp, #8]
 8004be2:	9301      	str	r3, [sp, #4]
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	6a3a      	ldr	r2, [r7, #32]
 8004bec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f001 fd6a 	bl	80066c8 <xTaskCreateStatic>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	e013      	b.n	8004c22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d110      	bne.n	8004c22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	f107 0310 	add.w	r3, r7, #16
 8004c08:	9301      	str	r3, [sp, #4]
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f001 fdb5 	bl	8006782 <xTaskCreate>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d001      	beq.n	8004c22 <osThreadNew+0x11a>
            hTask = NULL;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c22:	693b      	ldr	r3, [r7, #16]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3728      	adds	r7, #40	; 0x28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c34:	f3ef 8305 	mrs	r3, IPSR
 8004c38:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <osDelay+0x1c>
    stat = osErrorISR;
 8004c40:	f06f 0305 	mvn.w	r3, #5
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	e007      	b.n	8004c58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f001 fef0 	bl	8006a38 <vTaskDelay>
    }
  }

  return (stat);
 8004c58:	68fb      	ldr	r3, [r7, #12]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b088      	sub	sp, #32
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c6e:	f3ef 8305 	mrs	r3, IPSR
 8004c72:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c74:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d174      	bne.n	8004d64 <osMutexNew+0x102>
    if (attr != NULL) {
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	e001      	b.n	8004c8c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <osMutexNew+0x3a>
      rmtx = 1U;
 8004c96:	2301      	movs	r3, #1
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	e001      	b.n	8004ca0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d15c      	bne.n	8004d64 <osMutexNew+0x102>
      mem = -1;
 8004caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cae:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d015      	beq.n	8004ce2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d006      	beq.n	8004ccc <osMutexNew+0x6a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	2b4f      	cmp	r3, #79	; 0x4f
 8004cc4:	d902      	bls.n	8004ccc <osMutexNew+0x6a>
          mem = 1;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	e00c      	b.n	8004ce6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d108      	bne.n	8004ce6 <osMutexNew+0x84>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d104      	bne.n	8004ce6 <osMutexNew+0x84>
            mem = 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	e001      	b.n	8004ce6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d112      	bne.n	8004d12 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	2004      	movs	r0, #4
 8004cfa:	f000 fb18 	bl	800532e <xQueueCreateMutexStatic>
 8004cfe:	61f8      	str	r0, [r7, #28]
 8004d00:	e016      	b.n	8004d30 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	4619      	mov	r1, r3
 8004d08:	2001      	movs	r0, #1
 8004d0a:	f000 fb10 	bl	800532e <xQueueCreateMutexStatic>
 8004d0e:	61f8      	str	r0, [r7, #28]
 8004d10:	e00e      	b.n	8004d30 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10b      	bne.n	8004d30 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d004      	beq.n	8004d28 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004d1e:	2004      	movs	r0, #4
 8004d20:	f000 faed 	bl	80052fe <xQueueCreateMutex>
 8004d24:	61f8      	str	r0, [r7, #28]
 8004d26:	e003      	b.n	8004d30 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004d28:	2001      	movs	r0, #1
 8004d2a:	f000 fae8 	bl	80052fe <xQueueCreateMutex>
 8004d2e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00c      	beq.n	8004d50 <osMutexNew+0xee>
        if (attr != NULL) {
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <osMutexNew+0xe2>
          name = attr->name;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	e001      	b.n	8004d48 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004d48:	68f9      	ldr	r1, [r7, #12]
 8004d4a:	69f8      	ldr	r0, [r7, #28]
 8004d4c:	f001 f822 	bl	8005d94 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d006      	beq.n	8004d64 <osMutexNew+0x102>
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004d64:	69fb      	ldr	r3, [r7, #28]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3720      	adds	r7, #32
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b086      	sub	sp, #24
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f023 0301 	bic.w	r3, r3, #1
 8004d7e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d8c:	f3ef 8305 	mrs	r3, IPSR
 8004d90:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d92:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004d98:	f06f 0305 	mvn.w	r3, #5
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	e02c      	b.n	8004dfa <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d103      	bne.n	8004dae <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004da6:	f06f 0303 	mvn.w	r3, #3
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	e025      	b.n	8004dfa <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d011      	beq.n	8004dd8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004db4:	6839      	ldr	r1, [r7, #0]
 8004db6:	6938      	ldr	r0, [r7, #16]
 8004db8:	f000 fb08 	bl	80053cc <xQueueTakeMutexRecursive>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d01b      	beq.n	8004dfa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004dc8:	f06f 0301 	mvn.w	r3, #1
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	e014      	b.n	8004dfa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004dd0:	f06f 0302 	mvn.w	r3, #2
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	e010      	b.n	8004dfa <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004dd8:	6839      	ldr	r1, [r7, #0]
 8004dda:	6938      	ldr	r0, [r7, #16]
 8004ddc:	f000 fda6 	bl	800592c <xQueueSemaphoreTake>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d009      	beq.n	8004dfa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004dec:	f06f 0301 	mvn.w	r3, #1
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	e002      	b.n	8004dfa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004df4:	f06f 0302 	mvn.w	r3, #2
 8004df8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004dfa:	697b      	ldr	r3, [r7, #20]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f023 0301 	bic.w	r3, r3, #1
 8004e12:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e20:	f3ef 8305 	mrs	r3, IPSR
 8004e24:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e26:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004e2c:	f06f 0305 	mvn.w	r3, #5
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e01f      	b.n	8004e74 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d103      	bne.n	8004e42 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004e3a:	f06f 0303 	mvn.w	r3, #3
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	e018      	b.n	8004e74 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d009      	beq.n	8004e5c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004e48:	6938      	ldr	r0, [r7, #16]
 8004e4a:	f000 fa8b 	bl	8005364 <xQueueGiveMutexRecursive>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d00f      	beq.n	8004e74 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004e54:	f06f 0302 	mvn.w	r3, #2
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	e00b      	b.n	8004e74 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2100      	movs	r1, #0
 8004e62:	6938      	ldr	r0, [r7, #16]
 8004e64:	f000 fae8 	bl	8005438 <xQueueGenericSend>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d002      	beq.n	8004e74 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004e6e:	f06f 0302 	mvn.w	r3, #2
 8004e72:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004e74:	697b      	ldr	r3, [r7, #20]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4a07      	ldr	r2, [pc, #28]	; (8004eac <vApplicationGetIdleTaskMemory+0x2c>)
 8004e90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	4a06      	ldr	r2, [pc, #24]	; (8004eb0 <vApplicationGetIdleTaskMemory+0x30>)
 8004e96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2280      	movs	r2, #128	; 0x80
 8004e9c:	601a      	str	r2, [r3, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	200001e0 	.word	0x200001e0
 8004eb0:	2000029c 	.word	0x2000029c

08004eb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4a07      	ldr	r2, [pc, #28]	; (8004ee0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ec4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4a06      	ldr	r2, [pc, #24]	; (8004ee4 <vApplicationGetTimerTaskMemory+0x30>)
 8004eca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ed2:	601a      	str	r2, [r3, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	2000049c 	.word	0x2000049c
 8004ee4:	20000558 	.word	0x20000558

08004ee8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f103 0208 	add.w	r2, r3, #8
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f103 0208 	add.w	r2, r3, #8
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f103 0208 	add.w	r2, r3, #8
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f42:	b480      	push	{r7}
 8004f44:	b085      	sub	sp, #20
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	601a      	str	r2, [r3, #0]
}
 8004f7e:	bf00      	nop
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fa0:	d103      	bne.n	8004faa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	e00c      	b.n	8004fc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3308      	adds	r3, #8
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	e002      	b.n	8004fb8 <vListInsert+0x2e>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d2f6      	bcs.n	8004fb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	601a      	str	r2, [r3, #0]
}
 8004ff0:	bf00      	nop
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6892      	ldr	r2, [r2, #8]
 8005012:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6852      	ldr	r2, [r2, #4]
 800501c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	429a      	cmp	r2, r3
 8005026:	d103      	bne.n	8005030 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	1e5a      	subs	r2, r3, #1
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005076:	bf00      	nop
 8005078:	e7fe      	b.n	8005078 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800507a:	f003 fa23 	bl	80084c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005086:	68f9      	ldr	r1, [r7, #12]
 8005088:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800508a:	fb01 f303 	mul.w	r3, r1, r3
 800508e:	441a      	add	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050aa:	3b01      	subs	r3, #1
 80050ac:	68f9      	ldr	r1, [r7, #12]
 80050ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050b0:	fb01 f303 	mul.w	r3, r1, r3
 80050b4:	441a      	add	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	22ff      	movs	r2, #255	; 0xff
 80050be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	22ff      	movs	r2, #255	; 0xff
 80050c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d114      	bne.n	80050fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01a      	beq.n	800510e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3310      	adds	r3, #16
 80050dc:	4618      	mov	r0, r3
 80050de:	f001 ff79 	bl	8006fd4 <xTaskRemoveFromEventList>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d012      	beq.n	800510e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050e8:	4b0c      	ldr	r3, [pc, #48]	; (800511c <xQueueGenericReset+0xcc>)
 80050ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	e009      	b.n	800510e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	3310      	adds	r3, #16
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff fef2 	bl	8004ee8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	3324      	adds	r3, #36	; 0x24
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff feed 	bl	8004ee8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800510e:	f003 fa09 	bl	8008524 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005112:	2301      	movs	r3, #1
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	e000ed04 	.word	0xe000ed04

08005120 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08e      	sub	sp, #56	; 0x38
 8005124:	af02      	add	r7, sp, #8
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10a      	bne.n	800514a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005146:	bf00      	nop
 8005148:	e7fe      	b.n	8005148 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10a      	bne.n	8005166 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005162:	bf00      	nop
 8005164:	e7fe      	b.n	8005164 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <xQueueGenericCreateStatic+0x52>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <xQueueGenericCreateStatic+0x56>
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <xQueueGenericCreateStatic+0x58>
 8005176:	2300      	movs	r3, #0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10a      	bne.n	8005192 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	623b      	str	r3, [r7, #32]
}
 800518e:	bf00      	nop
 8005190:	e7fe      	b.n	8005190 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d102      	bne.n	800519e <xQueueGenericCreateStatic+0x7e>
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <xQueueGenericCreateStatic+0x82>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <xQueueGenericCreateStatic+0x84>
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	61fb      	str	r3, [r7, #28]
}
 80051ba:	bf00      	nop
 80051bc:	e7fe      	b.n	80051bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051be:	2350      	movs	r3, #80	; 0x50
 80051c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b50      	cmp	r3, #80	; 0x50
 80051c6:	d00a      	beq.n	80051de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	61bb      	str	r3, [r7, #24]
}
 80051da:	bf00      	nop
 80051dc:	e7fe      	b.n	80051dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00d      	beq.n	8005206 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	4613      	mov	r3, r2
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	68b9      	ldr	r1, [r7, #8]
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 f83f 	bl	8005284 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005208:	4618      	mov	r0, r3
 800520a:	3730      	adds	r7, #48	; 0x30
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08a      	sub	sp, #40	; 0x28
 8005214:	af02      	add	r7, sp, #8
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	4613      	mov	r3, r2
 800521c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	613b      	str	r3, [r7, #16]
}
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	fb02 f303 	mul.w	r3, r2, r3
 8005242:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	3350      	adds	r3, #80	; 0x50
 8005248:	4618      	mov	r0, r3
 800524a:	f003 fa5d 	bl	8008708 <pvPortMalloc>
 800524e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d011      	beq.n	800527a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	3350      	adds	r3, #80	; 0x50
 800525e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005268:	79fa      	ldrb	r2, [r7, #7]
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	4613      	mov	r3, r2
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 f805 	bl	8005284 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800527a:	69bb      	ldr	r3, [r7, #24]
	}
 800527c:	4618      	mov	r0, r3
 800527e:	3720      	adds	r7, #32
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d103      	bne.n	80052a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e002      	b.n	80052a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052b2:	2101      	movs	r1, #1
 80052b4:	69b8      	ldr	r0, [r7, #24]
 80052b6:	f7ff fecb 	bl	8005050 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	78fa      	ldrb	r2, [r7, #3]
 80052be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b082      	sub	sp, #8
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00e      	beq.n	80052f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80052ea:	2300      	movs	r3, #0
 80052ec:	2200      	movs	r2, #0
 80052ee:	2100      	movs	r1, #0
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f8a1 	bl	8005438 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80052f6:	bf00      	nop
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b086      	sub	sp, #24
 8005302:	af00      	add	r7, sp, #0
 8005304:	4603      	mov	r3, r0
 8005306:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005308:	2301      	movs	r3, #1
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	2300      	movs	r3, #0
 800530e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	461a      	mov	r2, r3
 8005314:	6939      	ldr	r1, [r7, #16]
 8005316:	6978      	ldr	r0, [r7, #20]
 8005318:	f7ff ff7a 	bl	8005210 <xQueueGenericCreate>
 800531c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7ff ffd3 	bl	80052ca <prvInitialiseMutex>

		return xNewQueue;
 8005324:	68fb      	ldr	r3, [r7, #12]
	}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800532e:	b580      	push	{r7, lr}
 8005330:	b088      	sub	sp, #32
 8005332:	af02      	add	r7, sp, #8
 8005334:	4603      	mov	r3, r0
 8005336:	6039      	str	r1, [r7, #0]
 8005338:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800533a:	2301      	movs	r3, #1
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	2300      	movs	r3, #0
 8005340:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2200      	movs	r2, #0
 800534a:	6939      	ldr	r1, [r7, #16]
 800534c:	6978      	ldr	r0, [r7, #20]
 800534e:	f7ff fee7 	bl	8005120 <xQueueGenericCreateStatic>
 8005352:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f7ff ffb8 	bl	80052ca <prvInitialiseMutex>

		return xNewQueue;
 800535a:	68fb      	ldr	r3, [r7, #12]
	}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005364:	b590      	push	{r4, r7, lr}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	60fb      	str	r3, [r7, #12]
}
 8005388:	bf00      	nop
 800538a:	e7fe      	b.n	800538a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	689c      	ldr	r4, [r3, #8]
 8005390:	f002 f808 	bl	80073a4 <xTaskGetCurrentTaskHandle>
 8005394:	4603      	mov	r3, r0
 8005396:	429c      	cmp	r4, r3
 8005398:	d111      	bne.n	80053be <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	1e5a      	subs	r2, r3, #1
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80053ac:	2300      	movs	r3, #0
 80053ae:	2200      	movs	r2, #0
 80053b0:	2100      	movs	r1, #0
 80053b2:	6938      	ldr	r0, [r7, #16]
 80053b4:	f000 f840 	bl	8005438 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80053b8:	2301      	movs	r3, #1
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	e001      	b.n	80053c2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80053c2:	697b      	ldr	r3, [r7, #20]
	}
 80053c4:	4618      	mov	r0, r3
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd90      	pop	{r4, r7, pc}

080053cc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80053cc:	b590      	push	{r4, r7, lr}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	60fb      	str	r3, [r7, #12]
}
 80053f2:	bf00      	nop
 80053f4:	e7fe      	b.n	80053f4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	689c      	ldr	r4, [r3, #8]
 80053fa:	f001 ffd3 	bl	80073a4 <xTaskGetCurrentTaskHandle>
 80053fe:	4603      	mov	r3, r0
 8005400:	429c      	cmp	r4, r3
 8005402:	d107      	bne.n	8005414 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800540e:	2301      	movs	r3, #1
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e00c      	b.n	800542e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005414:	6839      	ldr	r1, [r7, #0]
 8005416:	6938      	ldr	r0, [r7, #16]
 8005418:	f000 fa88 	bl	800592c <xQueueSemaphoreTake>
 800541c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800542e:	697b      	ldr	r3, [r7, #20]
	}
 8005430:	4618      	mov	r0, r3
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	bd90      	pop	{r4, r7, pc}

08005438 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08e      	sub	sp, #56	; 0x38
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005446:	2300      	movs	r3, #0
 8005448:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <xQueueGenericSend+0x32>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005466:	bf00      	nop
 8005468:	e7fe      	b.n	8005468 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d103      	bne.n	8005478 <xQueueGenericSend+0x40>
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <xQueueGenericSend+0x44>
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <xQueueGenericSend+0x46>
 800547c:	2300      	movs	r3, #0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <xQueueGenericSend+0x60>
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005494:	bf00      	nop
 8005496:	e7fe      	b.n	8005496 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d103      	bne.n	80054a6 <xQueueGenericSend+0x6e>
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d101      	bne.n	80054aa <xQueueGenericSend+0x72>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e000      	b.n	80054ac <xQueueGenericSend+0x74>
 80054aa:	2300      	movs	r3, #0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	623b      	str	r3, [r7, #32]
}
 80054c2:	bf00      	nop
 80054c4:	e7fe      	b.n	80054c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054c6:	f001 ff7d 	bl	80073c4 <xTaskGetSchedulerState>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <xQueueGenericSend+0x9e>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <xQueueGenericSend+0xa2>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <xQueueGenericSend+0xa4>
 80054da:	2300      	movs	r3, #0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	61fb      	str	r3, [r7, #28]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054f6:	f002 ffe5 	bl	80084c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005502:	429a      	cmp	r2, r3
 8005504:	d302      	bcc.n	800550c <xQueueGenericSend+0xd4>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b02      	cmp	r3, #2
 800550a:	d129      	bne.n	8005560 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005512:	f000 fb2f 	bl	8005b74 <prvCopyDataToQueue>
 8005516:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	2b00      	cmp	r3, #0
 800551e:	d010      	beq.n	8005542 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005522:	3324      	adds	r3, #36	; 0x24
 8005524:	4618      	mov	r0, r3
 8005526:	f001 fd55 	bl	8006fd4 <xTaskRemoveFromEventList>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d013      	beq.n	8005558 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005530:	4b3f      	ldr	r3, [pc, #252]	; (8005630 <xQueueGenericSend+0x1f8>)
 8005532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	e00a      	b.n	8005558 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005544:	2b00      	cmp	r3, #0
 8005546:	d007      	beq.n	8005558 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005548:	4b39      	ldr	r3, [pc, #228]	; (8005630 <xQueueGenericSend+0x1f8>)
 800554a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005558:	f002 ffe4 	bl	8008524 <vPortExitCritical>
				return pdPASS;
 800555c:	2301      	movs	r3, #1
 800555e:	e063      	b.n	8005628 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d103      	bne.n	800556e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005566:	f002 ffdd 	bl	8008524 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800556a:	2300      	movs	r3, #0
 800556c:	e05c      	b.n	8005628 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800556e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005570:	2b00      	cmp	r3, #0
 8005572:	d106      	bne.n	8005582 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005574:	f107 0314 	add.w	r3, r7, #20
 8005578:	4618      	mov	r0, r3
 800557a:	f001 fdb5 	bl	80070e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800557e:	2301      	movs	r3, #1
 8005580:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005582:	f002 ffcf 	bl	8008524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005586:	f001 fafb 	bl	8006b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800558a:	f002 ff9b 	bl	80084c4 <vPortEnterCritical>
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005594:	b25b      	sxtb	r3, r3
 8005596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800559a:	d103      	bne.n	80055a4 <xQueueGenericSend+0x16c>
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055aa:	b25b      	sxtb	r3, r3
 80055ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055b0:	d103      	bne.n	80055ba <xQueueGenericSend+0x182>
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055ba:	f002 ffb3 	bl	8008524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055be:	1d3a      	adds	r2, r7, #4
 80055c0:	f107 0314 	add.w	r3, r7, #20
 80055c4:	4611      	mov	r1, r2
 80055c6:	4618      	mov	r0, r3
 80055c8:	f001 fda4 	bl	8007114 <xTaskCheckForTimeOut>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d124      	bne.n	800561c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055d4:	f000 fbc6 	bl	8005d64 <prvIsQueueFull>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d018      	beq.n	8005610 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	3310      	adds	r3, #16
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	4611      	mov	r1, r2
 80055e6:	4618      	mov	r0, r3
 80055e8:	f001 fca4 	bl	8006f34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ee:	f000 fb51 	bl	8005c94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055f2:	f001 fad3 	bl	8006b9c <xTaskResumeAll>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f47f af7c 	bne.w	80054f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80055fe:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <xQueueGenericSend+0x1f8>)
 8005600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	e772      	b.n	80054f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005612:	f000 fb3f 	bl	8005c94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005616:	f001 fac1 	bl	8006b9c <xTaskResumeAll>
 800561a:	e76c      	b.n	80054f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800561c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800561e:	f000 fb39 	bl	8005c94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005622:	f001 fabb 	bl	8006b9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005626:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005628:	4618      	mov	r0, r3
 800562a:	3738      	adds	r7, #56	; 0x38
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	e000ed04 	.word	0xe000ed04

08005634 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b090      	sub	sp, #64	; 0x40
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800565e:	bf00      	nop
 8005660:	e7fe      	b.n	8005660 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d103      	bne.n	8005670 <xQueueGenericSendFromISR+0x3c>
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <xQueueGenericSendFromISR+0x40>
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <xQueueGenericSendFromISR+0x42>
 8005674:	2300      	movs	r3, #0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800568c:	bf00      	nop
 800568e:	e7fe      	b.n	800568e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d103      	bne.n	800569e <xQueueGenericSendFromISR+0x6a>
 8005696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <xQueueGenericSendFromISR+0x6e>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <xQueueGenericSendFromISR+0x70>
 80056a2:	2300      	movs	r3, #0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	623b      	str	r3, [r7, #32]
}
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056be:	f002 ffe3 	bl	8008688 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056c2:	f3ef 8211 	mrs	r2, BASEPRI
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	61fa      	str	r2, [r7, #28]
 80056d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d302      	bcc.n	80056f0 <xQueueGenericSendFromISR+0xbc>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d12f      	bne.n	8005750 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005706:	f000 fa35 	bl	8005b74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800570a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005712:	d112      	bne.n	800573a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	2b00      	cmp	r3, #0
 800571a:	d016      	beq.n	800574a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571e:	3324      	adds	r3, #36	; 0x24
 8005720:	4618      	mov	r0, r3
 8005722:	f001 fc57 	bl	8006fd4 <xTaskRemoveFromEventList>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00e      	beq.n	800574a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00b      	beq.n	800574a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	e007      	b.n	800574a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800573a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800573e:	3301      	adds	r3, #1
 8005740:	b2db      	uxtb	r3, r3
 8005742:	b25a      	sxtb	r2, r3
 8005744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800574a:	2301      	movs	r3, #1
 800574c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800574e:	e001      	b.n	8005754 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005750:	2300      	movs	r3, #0
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005756:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800575e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005762:	4618      	mov	r0, r3
 8005764:	3740      	adds	r7, #64	; 0x40
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08c      	sub	sp, #48	; 0x30
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005778:	2300      	movs	r3, #0
 800577a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <xQueueReceive+0x30>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	623b      	str	r3, [r7, #32]
}
 8005798:	bf00      	nop
 800579a:	e7fe      	b.n	800579a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d103      	bne.n	80057aa <xQueueReceive+0x3e>
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <xQueueReceive+0x42>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <xQueueReceive+0x44>
 80057ae:	2300      	movs	r3, #0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <xQueueReceive+0x5e>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	61fb      	str	r3, [r7, #28]
}
 80057c6:	bf00      	nop
 80057c8:	e7fe      	b.n	80057c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057ca:	f001 fdfb 	bl	80073c4 <xTaskGetSchedulerState>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <xQueueReceive+0x6e>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <xQueueReceive+0x72>
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <xQueueReceive+0x74>
 80057de:	2300      	movs	r3, #0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <xQueueReceive+0x8e>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	61bb      	str	r3, [r7, #24]
}
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057fa:	f002 fe63 	bl	80084c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d01f      	beq.n	800584a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580e:	f000 fa1b 	bl	8005c48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	1e5a      	subs	r2, r3, #1
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00f      	beq.n	8005842 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	3310      	adds	r3, #16
 8005826:	4618      	mov	r0, r3
 8005828:	f001 fbd4 	bl	8006fd4 <xTaskRemoveFromEventList>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005832:	4b3d      	ldr	r3, [pc, #244]	; (8005928 <xQueueReceive+0x1bc>)
 8005834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005842:	f002 fe6f 	bl	8008524 <vPortExitCritical>
				return pdPASS;
 8005846:	2301      	movs	r3, #1
 8005848:	e069      	b.n	800591e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d103      	bne.n	8005858 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005850:	f002 fe68 	bl	8008524 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005854:	2300      	movs	r3, #0
 8005856:	e062      	b.n	800591e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800585e:	f107 0310 	add.w	r3, r7, #16
 8005862:	4618      	mov	r0, r3
 8005864:	f001 fc40 	bl	80070e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800586c:	f002 fe5a 	bl	8008524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005870:	f001 f986 	bl	8006b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005874:	f002 fe26 	bl	80084c4 <vPortEnterCritical>
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800587e:	b25b      	sxtb	r3, r3
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005884:	d103      	bne.n	800588e <xQueueReceive+0x122>
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005894:	b25b      	sxtb	r3, r3
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800589a:	d103      	bne.n	80058a4 <xQueueReceive+0x138>
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058a4:	f002 fe3e 	bl	8008524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058a8:	1d3a      	adds	r2, r7, #4
 80058aa:	f107 0310 	add.w	r3, r7, #16
 80058ae:	4611      	mov	r1, r2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f001 fc2f 	bl	8007114 <xTaskCheckForTimeOut>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d123      	bne.n	8005904 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058be:	f000 fa3b 	bl	8005d38 <prvIsQueueEmpty>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d017      	beq.n	80058f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	3324      	adds	r3, #36	; 0x24
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	4611      	mov	r1, r2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f001 fb2f 	bl	8006f34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d8:	f000 f9dc 	bl	8005c94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058dc:	f001 f95e 	bl	8006b9c <xTaskResumeAll>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d189      	bne.n	80057fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80058e6:	4b10      	ldr	r3, [pc, #64]	; (8005928 <xQueueReceive+0x1bc>)
 80058e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	e780      	b.n	80057fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058fa:	f000 f9cb 	bl	8005c94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058fe:	f001 f94d 	bl	8006b9c <xTaskResumeAll>
 8005902:	e77a      	b.n	80057fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005906:	f000 f9c5 	bl	8005c94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800590a:	f001 f947 	bl	8006b9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800590e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005910:	f000 fa12 	bl	8005d38 <prvIsQueueEmpty>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	f43f af6f 	beq.w	80057fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800591c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800591e:	4618      	mov	r0, r3
 8005920:	3730      	adds	r7, #48	; 0x30
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	e000ed04 	.word	0xe000ed04

0800592c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b08e      	sub	sp, #56	; 0x38
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005936:	2300      	movs	r3, #0
 8005938:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800593e:	2300      	movs	r3, #0
 8005940:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10a      	bne.n	800595e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	623b      	str	r3, [r7, #32]
}
 800595a:	bf00      	nop
 800595c:	e7fe      	b.n	800595c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	61fb      	str	r3, [r7, #28]
}
 8005978:	bf00      	nop
 800597a:	e7fe      	b.n	800597a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800597c:	f001 fd22 	bl	80073c4 <xTaskGetSchedulerState>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d102      	bne.n	800598c <xQueueSemaphoreTake+0x60>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <xQueueSemaphoreTake+0x64>
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <xQueueSemaphoreTake+0x66>
 8005990:	2300      	movs	r3, #0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10a      	bne.n	80059ac <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	61bb      	str	r3, [r7, #24]
}
 80059a8:	bf00      	nop
 80059aa:	e7fe      	b.n	80059aa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059ac:	f002 fd8a 	bl	80084c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d024      	beq.n	8005a06 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80059bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059be:	1e5a      	subs	r2, r3, #1
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d104      	bne.n	80059d6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80059cc:	f001 fe70 	bl	80076b0 <pvTaskIncrementMutexHeldCount>
 80059d0:	4602      	mov	r2, r0
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00f      	beq.n	80059fe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e0:	3310      	adds	r3, #16
 80059e2:	4618      	mov	r0, r3
 80059e4:	f001 faf6 	bl	8006fd4 <xTaskRemoveFromEventList>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d007      	beq.n	80059fe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059ee:	4b54      	ldr	r3, [pc, #336]	; (8005b40 <xQueueSemaphoreTake+0x214>)
 80059f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059fe:	f002 fd91 	bl	8008524 <vPortExitCritical>
				return pdPASS;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e097      	b.n	8005b36 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d111      	bne.n	8005a30 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	617b      	str	r3, [r7, #20]
}
 8005a24:	bf00      	nop
 8005a26:	e7fe      	b.n	8005a26 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005a28:	f002 fd7c 	bl	8008524 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e082      	b.n	8005b36 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a36:	f107 030c 	add.w	r3, r7, #12
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f001 fb54 	bl	80070e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a40:	2301      	movs	r3, #1
 8005a42:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a44:	f002 fd6e 	bl	8008524 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a48:	f001 f89a 	bl	8006b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a4c:	f002 fd3a 	bl	80084c4 <vPortEnterCritical>
 8005a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a56:	b25b      	sxtb	r3, r3
 8005a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a5c:	d103      	bne.n	8005a66 <xQueueSemaphoreTake+0x13a>
 8005a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a6c:	b25b      	sxtb	r3, r3
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a72:	d103      	bne.n	8005a7c <xQueueSemaphoreTake+0x150>
 8005a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a7c:	f002 fd52 	bl	8008524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a80:	463a      	mov	r2, r7
 8005a82:	f107 030c 	add.w	r3, r7, #12
 8005a86:	4611      	mov	r1, r2
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f001 fb43 	bl	8007114 <xTaskCheckForTimeOut>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d132      	bne.n	8005afa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a96:	f000 f94f 	bl	8005d38 <prvIsQueueEmpty>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d026      	beq.n	8005aee <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d109      	bne.n	8005abc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005aa8:	f002 fd0c 	bl	80084c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 fca5 	bl	8007400 <xTaskPriorityInherit>
 8005ab6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005ab8:	f002 fd34 	bl	8008524 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abe:	3324      	adds	r3, #36	; 0x24
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f001 fa35 	bl	8006f34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005aca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005acc:	f000 f8e2 	bl	8005c94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ad0:	f001 f864 	bl	8006b9c <xTaskResumeAll>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f47f af68 	bne.w	80059ac <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005adc:	4b18      	ldr	r3, [pc, #96]	; (8005b40 <xQueueSemaphoreTake+0x214>)
 8005ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	e75e      	b.n	80059ac <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005aee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005af0:	f000 f8d0 	bl	8005c94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005af4:	f001 f852 	bl	8006b9c <xTaskResumeAll>
 8005af8:	e758      	b.n	80059ac <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005afa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005afc:	f000 f8ca 	bl	8005c94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b00:	f001 f84c 	bl	8006b9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b06:	f000 f917 	bl	8005d38 <prvIsQueueEmpty>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f43f af4d 	beq.w	80059ac <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00d      	beq.n	8005b34 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005b18:	f002 fcd4 	bl	80084c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b1e:	f000 f811 	bl	8005b44 <prvGetDisinheritPriorityAfterTimeout>
 8005b22:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f001 fd3e 	bl	80075ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005b30:	f002 fcf8 	bl	8008524 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3738      	adds	r7, #56	; 0x38
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	e000ed04 	.word	0xe000ed04

08005b44 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d006      	beq.n	8005b62 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	e001      	b.n	8005b66 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005b66:	68fb      	ldr	r3, [r7, #12]
	}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10d      	bne.n	8005bae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d14d      	bne.n	8005c36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f001 fc96 	bl	80074d0 <xTaskPriorityDisinherit>
 8005ba4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	609a      	str	r2, [r3, #8]
 8005bac:	e043      	b.n	8005c36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d119      	bne.n	8005be8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6858      	ldr	r0, [r3, #4]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	f002 ffb8 	bl	8008b34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	441a      	add	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d32b      	bcc.n	8005c36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	e026      	b.n	8005c36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68d8      	ldr	r0, [r3, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	f002 ff9e 	bl	8008b34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	425b      	negs	r3, r3
 8005c02:	441a      	add	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d207      	bcs.n	8005c24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	425b      	negs	r3, r3
 8005c1e:	441a      	add	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d105      	bne.n	8005c36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c3e:	697b      	ldr	r3, [r7, #20]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d018      	beq.n	8005c8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	441a      	add	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d303      	bcc.n	8005c7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68d9      	ldr	r1, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	461a      	mov	r2, r3
 8005c86:	6838      	ldr	r0, [r7, #0]
 8005c88:	f002 ff54 	bl	8008b34 <memcpy>
	}
}
 8005c8c:	bf00      	nop
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c9c:	f002 fc12 	bl	80084c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ca6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ca8:	e011      	b.n	8005cce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d012      	beq.n	8005cd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3324      	adds	r3, #36	; 0x24
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f001 f98c 	bl	8006fd4 <xTaskRemoveFromEventList>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cc2:	f001 fa89 	bl	80071d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	dce9      	bgt.n	8005caa <prvUnlockQueue+0x16>
 8005cd6:	e000      	b.n	8005cda <prvUnlockQueue+0x46>
					break;
 8005cd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	22ff      	movs	r2, #255	; 0xff
 8005cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ce2:	f002 fc1f 	bl	8008524 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ce6:	f002 fbed 	bl	80084c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cf0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cf2:	e011      	b.n	8005d18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d012      	beq.n	8005d22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3310      	adds	r3, #16
 8005d00:	4618      	mov	r0, r3
 8005d02:	f001 f967 	bl	8006fd4 <xTaskRemoveFromEventList>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d0c:	f001 fa64 	bl	80071d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d10:	7bbb      	ldrb	r3, [r7, #14]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	dce9      	bgt.n	8005cf4 <prvUnlockQueue+0x60>
 8005d20:	e000      	b.n	8005d24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	22ff      	movs	r2, #255	; 0xff
 8005d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d2c:	f002 fbfa 	bl	8008524 <vPortExitCritical>
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d40:	f002 fbc0 	bl	80084c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d102      	bne.n	8005d52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	e001      	b.n	8005d56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d56:	f002 fbe5 	bl	8008524 <vPortExitCritical>

	return xReturn;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d6c:	f002 fbaa 	bl	80084c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d102      	bne.n	8005d82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e001      	b.n	8005d86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d86:	f002 fbcd 	bl	8008524 <vPortExitCritical>

	return xReturn;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	e014      	b.n	8005dce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005da4:	4a0f      	ldr	r2, [pc, #60]	; (8005de4 <vQueueAddToRegistry+0x50>)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10b      	bne.n	8005dc8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005db0:	490c      	ldr	r1, [pc, #48]	; (8005de4 <vQueueAddToRegistry+0x50>)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005dba:	4a0a      	ldr	r2, [pc, #40]	; (8005de4 <vQueueAddToRegistry+0x50>)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	00db      	lsls	r3, r3, #3
 8005dc0:	4413      	add	r3, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005dc6:	e006      	b.n	8005dd6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b07      	cmp	r3, #7
 8005dd2:	d9e7      	bls.n	8005da4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20000958 	.word	0x20000958

08005de8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005df8:	f002 fb64 	bl	80084c4 <vPortEnterCritical>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e02:	b25b      	sxtb	r3, r3
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e08:	d103      	bne.n	8005e12 <vQueueWaitForMessageRestricted+0x2a>
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e18:	b25b      	sxtb	r3, r3
 8005e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e1e:	d103      	bne.n	8005e28 <vQueueWaitForMessageRestricted+0x40>
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e28:	f002 fb7c 	bl	8008524 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d106      	bne.n	8005e42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	3324      	adds	r3, #36	; 0x24
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f001 f89d 	bl	8006f7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e42:	6978      	ldr	r0, [r7, #20]
 8005e44:	f7ff ff26 	bl	8005c94 <prvUnlockQueue>
	}
 8005e48:	bf00      	nop
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08c      	sub	sp, #48	; 0x30
 8005e54:	af02      	add	r7, sp, #8
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d110      	bne.n	8005e84 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8005e62:	2301      	movs	r3, #1
 8005e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d81b      	bhi.n	8005ea6 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	61fb      	str	r3, [r7, #28]
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	61bb      	str	r3, [r7, #24]
}
 8005ea2:	bf00      	nop
 8005ea4:	e7fe      	b.n	8005ea4 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d90a      	bls.n	8005ec4 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	617b      	str	r3, [r7, #20]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3324      	adds	r3, #36	; 0x24
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f002 fc15 	bl	8008708 <pvPortMalloc>
 8005ede:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00a      	beq.n	8005efc <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	6a38      	ldr	r0, [r7, #32]
 8005ef8:	f000 fbb3 	bl	8006662 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8005efc:	6a3b      	ldr	r3, [r7, #32]
	}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3728      	adds	r7, #40	; 0x28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8005f06:	b480      	push	{r7}
 8005f08:	b087      	sub	sp, #28
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10a      	bne.n	8005f2e <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	60fb      	str	r3, [r7, #12]
}
 8005f2a:	bf00      	nop
 8005f2c:	e7fe      	b.n	8005f2c <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4413      	add	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d304      	bcc.n	8005f5e <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8005f5e:	697b      	ldr	r3, [r7, #20]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	617b      	str	r3, [r7, #20]
size_t xReturn;

	configASSERT( pxStreamBuffer );
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <xStreamBufferBytesAvailable+0x28>
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	60fb      	str	r3, [r7, #12]
}
 8005f90:	bf00      	nop
 8005f92:	e7fe      	b.n	8005f92 <xStreamBufferBytesAvailable+0x26>

	xReturn = prvBytesInBuffer( pxStreamBuffer );
 8005f94:	6978      	ldr	r0, [r7, #20]
 8005f96:	f000 fb44 	bl	8006622 <prvBytesInBuffer>
 8005f9a:	6138      	str	r0, [r7, #16]
	return xReturn;
 8005f9c:	693b      	ldr	r3, [r7, #16]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b090      	sub	sp, #64	; 0x40
 8005faa:	af02      	add	r7, sp, #8
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	607a      	str	r2, [r7, #4]
 8005fb2:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10a      	bne.n	8005fdc <xStreamBufferSend+0x36>
	__asm volatile
 8005fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fd8:	bf00      	nop
 8005fda:	e7fe      	b.n	8005fda <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10a      	bne.n	8005ff8 <xStreamBufferSend+0x52>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	623b      	str	r3, [r7, #32]
}
 8005ff4:	bf00      	nop
 8005ff6:	e7fe      	b.n	8005ff6 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8005ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffa:	7f1b      	ldrb	r3, [r3, #28]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d011      	beq.n	8006028 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8006004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006006:	3304      	adds	r3, #4
 8006008:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 800600a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	429a      	cmp	r2, r3
 8006010:	d80a      	bhi.n	8006028 <xStreamBufferSend+0x82>
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	61fb      	str	r3, [r7, #28]
}
 8006024:	bf00      	nop
 8006026:	e7fe      	b.n	8006026 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d03e      	beq.n	80060ac <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800602e:	f107 0310 	add.w	r3, r7, #16
 8006032:	4618      	mov	r0, r3
 8006034:	f001 f832 	bl	800709c <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8006038:	f002 fa44 	bl	80084c4 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800603c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800603e:	f7ff ff62 	bl	8005f06 <xStreamBufferSpacesAvailable>
 8006042:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8006044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	429a      	cmp	r2, r3
 800604a:	d217      	bcs.n	800607c <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 800604c:	2000      	movs	r0, #0
 800604e:	f001 fd45 	bl	8007adc <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <xStreamBufferSend+0xca>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	61bb      	str	r3, [r7, #24]
}
 800606c:	bf00      	nop
 800606e:	e7fe      	b.n	800606e <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8006070:	f001 f998 	bl	80073a4 <xTaskGetCurrentTaskHandle>
 8006074:	4602      	mov	r2, r0
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	615a      	str	r2, [r3, #20]
 800607a:	e002      	b.n	8006082 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 800607c:	f002 fa52 	bl	8008524 <vPortExitCritical>
					break;
 8006080:	e014      	b.n	80060ac <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8006082:	f002 fa4f 	bl	8008524 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2200      	movs	r2, #0
 800608a:	2100      	movs	r1, #0
 800608c:	2000      	movs	r0, #0
 800608e:	f001 fb23 	bl	80076d8 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8006092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006094:	2200      	movs	r2, #0
 8006096:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8006098:	463a      	mov	r2, r7
 800609a:	f107 0310 	add.w	r3, r7, #16
 800609e:	4611      	mov	r1, r2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f001 f837 	bl	8007114 <xTaskCheckForTimeOut>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0c5      	beq.n	8006038 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 80060ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d103      	bne.n	80060ba <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80060b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060b4:	f7ff ff27 	bl	8005f06 <xStreamBufferSpacesAvailable>
 80060b8:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060c6:	f000 f894 	bl	80061f2 <prvWriteMessageToBuffer>
 80060ca:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 80060cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d019      	beq.n	8006106 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80060d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060d4:	f000 faa5 	bl	8006622 <prvBytesInBuffer>
 80060d8:	4602      	mov	r2, r0
 80060da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d311      	bcc.n	8006106 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 80060e2:	f000 fd4d 	bl	8006b80 <vTaskSuspendAll>
 80060e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d009      	beq.n	8006102 <xStreamBufferSend+0x15c>
 80060ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f0:	6918      	ldr	r0, [r3, #16]
 80060f2:	2300      	movs	r3, #0
 80060f4:	2200      	movs	r2, #0
 80060f6:	2100      	movs	r1, #0
 80060f8:	f001 fb4e 	bl	8007798 <xTaskGenericNotify>
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	2200      	movs	r2, #0
 8006100:	611a      	str	r2, [r3, #16]
 8006102:	f000 fd4b 	bl	8006b9c <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006108:	4618      	mov	r0, r3
 800610a:	3738      	adds	r7, #56	; 0x38
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b090      	sub	sp, #64	; 0x40
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <xStreamBufferSendFromISR+0x32>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	623b      	str	r3, [r7, #32]
}
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	61fb      	str	r3, [r7, #28]
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	7f1b      	ldrb	r3, [r3, #28]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800616a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616c:	3304      	adds	r3, #4
 800616e:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8006170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006172:	f7ff fec8 	bl	8005f06 <xStreamBufferSpacesAvailable>
 8006176:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8006178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	68b9      	ldr	r1, [r7, #8]
 8006182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006184:	f000 f835 	bl	80061f2 <prvWriteMessageToBuffer>
 8006188:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	2b00      	cmp	r3, #0
 800618e:	d02b      	beq.n	80061e8 <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8006190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006192:	f000 fa46 	bl	8006622 <prvBytesInBuffer>
 8006196:	4602      	mov	r2, r0
 8006198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	429a      	cmp	r2, r3
 800619e:	d323      	bcc.n	80061e8 <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 80061a0:	f3ef 8211 	mrs	r2, BASEPRI
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	61ba      	str	r2, [r7, #24]
 80061b6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80061b8:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 80061ba:	627b      	str	r3, [r7, #36]	; 0x24
 80061bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00b      	beq.n	80061dc <xStreamBufferSendFromISR+0xcc>
 80061c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c6:	6918      	ldr	r0, [r3, #16]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	2300      	movs	r3, #0
 80061ce:	2200      	movs	r2, #0
 80061d0:	2100      	movs	r1, #0
 80061d2:	f001 fb9f 	bl	8007914 <xTaskGenericNotifyFromISR>
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	2200      	movs	r2, #0
 80061da:	611a      	str	r2, [r3, #16]
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	613b      	str	r3, [r7, #16]
	__asm volatile
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f383 8811 	msr	BASEPRI, r3
}
 80061e6:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3738      	adds	r7, #56	; 0x38
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b086      	sub	sp, #24
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	607a      	str	r2, [r7, #4]
 80061fe:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d102      	bne.n	800620c <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8006206:	2300      	movs	r3, #0
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	e01d      	b.n	8006248 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	7f1b      	ldrb	r3, [r3, #28]
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d108      	bne.n	800622a <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8006218:	2301      	movs	r3, #1
 800621a:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	4293      	cmp	r3, r2
 8006222:	bf28      	it	cs
 8006224:	4613      	movcs	r3, r2
 8006226:	607b      	str	r3, [r7, #4]
 8006228:	e00e      	b.n	8006248 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	429a      	cmp	r2, r3
 8006230:	d308      	bcc.n	8006244 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8006232:	2301      	movs	r3, #1
 8006234:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8006236:	1d3b      	adds	r3, r7, #4
 8006238:	2204      	movs	r2, #4
 800623a:	4619      	mov	r1, r3
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f904 	bl	800644a <prvWriteBytesToBuffer>
 8006242:	e001      	b.n	8006248 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8006244:	2300      	movs	r3, #0
 8006246:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d007      	beq.n	800625e <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	461a      	mov	r2, r3
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 f8f8 	bl	800644a <prvWriteBytesToBuffer>
 800625a:	6138      	str	r0, [r7, #16]
 800625c:	e001      	b.n	8006262 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800625e:	2300      	movs	r3, #0
 8006260:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8006262:	693b      	ldr	r3, [r7, #16]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08e      	sub	sp, #56	; 0x38
 8006270:	af02      	add	r7, sp, #8
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
 8006278:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800627e:	2300      	movs	r3, #0
 8006280:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10a      	bne.n	800629e <xStreamBufferReceive+0x32>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	61fb      	str	r3, [r7, #28]
}
 800629a:	bf00      	nop
 800629c:	e7fe      	b.n	800629c <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10a      	bne.n	80062ba <xStreamBufferReceive+0x4e>
	__asm volatile
 80062a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	61bb      	str	r3, [r7, #24]
}
 80062b6:	bf00      	nop
 80062b8:	e7fe      	b.n	80062b8 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	7f1b      	ldrb	r3, [r3, #28]
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80062c6:	2304      	movs	r3, #4
 80062c8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ca:	e001      	b.n	80062d0 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80062cc:	2300      	movs	r3, #0
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d034      	beq.n	8006340 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 80062d6:	f002 f8f5 	bl	80084c4 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80062da:	6a38      	ldr	r0, [r7, #32]
 80062dc:	f000 f9a1 	bl	8006622 <prvBytesInBuffer>
 80062e0:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 80062e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d816      	bhi.n	8006318 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 80062ea:	2000      	movs	r0, #0
 80062ec:	f001 fbf6 	bl	8007adc <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <xStreamBufferReceive+0xa2>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	617b      	str	r3, [r7, #20]
}
 800630a:	bf00      	nop
 800630c:	e7fe      	b.n	800630c <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800630e:	f001 f849 	bl	80073a4 <xTaskGetCurrentTaskHandle>
 8006312:	4602      	mov	r2, r0
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006318:	f002 f904 	bl	8008524 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800631c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	429a      	cmp	r2, r3
 8006322:	d811      	bhi.n	8006348 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2200      	movs	r2, #0
 8006328:	2100      	movs	r1, #0
 800632a:	2000      	movs	r0, #0
 800632c:	f001 f9d4 	bl	80076d8 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	2200      	movs	r2, #0
 8006334:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8006336:	6a38      	ldr	r0, [r7, #32]
 8006338:	f000 f973 	bl	8006622 <prvBytesInBuffer>
 800633c:	62b8      	str	r0, [r7, #40]	; 0x28
 800633e:	e003      	b.n	8006348 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8006340:	6a38      	ldr	r0, [r7, #32]
 8006342:	f000 f96e 	bl	8006622 <prvBytesInBuffer>
 8006346:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8006348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	429a      	cmp	r2, r3
 800634e:	d91d      	bls.n	800638c <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	68b9      	ldr	r1, [r7, #8]
 800635a:	6a38      	ldr	r0, [r7, #32]
 800635c:	f000 f81b 	bl	8006396 <prvReadMessageFromBuffer>
 8006360:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	2b00      	cmp	r3, #0
 8006366:	d011      	beq.n	800638c <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8006368:	f000 fc0a 	bl	8006b80 <vTaskSuspendAll>
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d009      	beq.n	8006388 <xStreamBufferReceive+0x11c>
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	6958      	ldr	r0, [r3, #20]
 8006378:	2300      	movs	r3, #0
 800637a:	2200      	movs	r2, #0
 800637c:	2100      	movs	r1, #0
 800637e:	f001 fa0b 	bl	8007798 <xTaskGenericNotify>
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	2200      	movs	r2, #0
 8006386:	615a      	str	r2, [r3, #20]
 8006388:	f000 fc08 	bl	8006b9c <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800638e:	4618      	mov	r0, r3
 8006390:	3730      	adds	r7, #48	; 0x30
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b088      	sub	sp, #32
 800639a:	af00      	add	r7, sp, #0
 800639c:	60f8      	str	r0, [r7, #12]
 800639e:	60b9      	str	r1, [r7, #8]
 80063a0:	607a      	str	r2, [r7, #4]
 80063a2:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d019      	beq.n	80063de <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80063b0:	f107 0110 	add.w	r1, r7, #16
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 f8b8 	bl	800652e <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d907      	bls.n	80063e2 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 80063d8:	2300      	movs	r3, #0
 80063da:	61fb      	str	r3, [r7, #28]
 80063dc:	e001      	b.n	80063e2 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	69fa      	ldr	r2, [r7, #28]
 80063e6:	68b9      	ldr	r1, [r7, #8]
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 f8a0 	bl	800652e <prvReadBytesFromBuffer>
 80063ee:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 80063f0:	697b      	ldr	r3, [r7, #20]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3720      	adds	r7, #32
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
 80063fa:	b480      	push	{r7}
 80063fc:	b087      	sub	sp, #28
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	613b      	str	r3, [r7, #16]
BaseType_t xReturn;
size_t xTail;

	configASSERT( pxStreamBuffer );
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <xStreamBufferIsEmpty+0x28>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	60bb      	str	r3, [r7, #8]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <xStreamBufferIsEmpty+0x26>

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	60fb      	str	r3, [r7, #12]
	if( pxStreamBuffer->xHead == xTail )
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	429a      	cmp	r2, r3
 8006430:	d102      	bne.n	8006438 <xStreamBufferIsEmpty+0x3e>
	{
		xReturn = pdTRUE;
 8006432:	2301      	movs	r3, #1
 8006434:	617b      	str	r3, [r7, #20]
 8006436:	e001      	b.n	800643c <xStreamBufferIsEmpty+0x42>
	}
	else
	{
		xReturn = pdFALSE;
 8006438:	2300      	movs	r3, #0
 800643a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800643c:	697b      	ldr	r3, [r7, #20]
}
 800643e:	4618      	mov	r0, r3
 8006440:	371c      	adds	r7, #28
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b08a      	sub	sp, #40	; 0x28
 800644e:	af00      	add	r7, sp, #0
 8006450:	60f8      	str	r0, [r7, #12]
 8006452:	60b9      	str	r1, [r7, #8]
 8006454:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10a      	bne.n	8006472 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800645c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006460:	f383 8811 	msr	BASEPRI, r3
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	61fb      	str	r3, [r7, #28]
}
 800646e:	bf00      	nop
 8006470:	e7fe      	b.n	8006470 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	4293      	cmp	r3, r2
 8006484:	bf28      	it	cs
 8006486:	4613      	movcs	r3, r2
 8006488:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800648a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	441a      	add	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	429a      	cmp	r2, r3
 8006496:	d90a      	bls.n	80064ae <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	61bb      	str	r3, [r7, #24]
}
 80064aa:	bf00      	nop
 80064ac:	e7fe      	b.n	80064ac <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	699a      	ldr	r2, [r3, #24]
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	4413      	add	r3, r2
 80064b6:	6a3a      	ldr	r2, [r7, #32]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f002 fb3a 	bl	8008b34 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d91c      	bls.n	8006502 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	1ad2      	subs	r2, r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d90a      	bls.n	80064ec <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	617b      	str	r3, [r7, #20]
}
 80064e8:	bf00      	nop
 80064ea:	e7fe      	b.n	80064ea <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6998      	ldr	r0, [r3, #24]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	18d1      	adds	r1, r2, r3
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	461a      	mov	r2, r3
 80064fe:	f002 fb19 	bl	8008b34 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8006502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4413      	add	r3, r2
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006510:	429a      	cmp	r2, r3
 8006512:	d304      	bcc.n	800651e <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006522:	605a      	str	r2, [r3, #4]

	return xCount;
 8006524:	687b      	ldr	r3, [r7, #4]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3728      	adds	r7, #40	; 0x28
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b08a      	sub	sp, #40	; 0x28
 8006532:	af00      	add	r7, sp, #0
 8006534:	60f8      	str	r0, [r7, #12]
 8006536:	60b9      	str	r1, [r7, #8]
 8006538:	607a      	str	r2, [r7, #4]
 800653a:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	4293      	cmp	r3, r2
 8006542:	bf28      	it	cs
 8006544:	4613      	movcs	r3, r2
 8006546:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d064      	beq.n	8006618 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	6a3a      	ldr	r2, [r7, #32]
 800655e:	4293      	cmp	r3, r2
 8006560:	bf28      	it	cs
 8006562:	4613      	movcs	r3, r2
 8006564:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	429a      	cmp	r2, r3
 800656c:	d90a      	bls.n	8006584 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	61bb      	str	r3, [r7, #24]
}
 8006580:	bf00      	nop
 8006582:	e7fe      	b.n	8006582 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8006584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	441a      	add	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	429a      	cmp	r2, r3
 8006590:	d90a      	bls.n	80065a8 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	617b      	str	r3, [r7, #20]
}
 80065a4:	bf00      	nop
 80065a6:	e7fe      	b.n	80065a6 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	699a      	ldr	r2, [r3, #24]
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	4413      	add	r3, r2
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	4619      	mov	r1, r3
 80065b4:	68b8      	ldr	r0, [r7, #8]
 80065b6:	f002 fabd 	bl	8008b34 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80065ba:	6a3a      	ldr	r2, [r7, #32]
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d919      	bls.n	80065f6 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80065c2:	6a3a      	ldr	r2, [r7, #32]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d90a      	bls.n	80065e0 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	613b      	str	r3, [r7, #16]
}
 80065dc:	bf00      	nop
 80065de:	e7fe      	b.n	80065de <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	18d0      	adds	r0, r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6999      	ldr	r1, [r3, #24]
 80065ea:	6a3a      	ldr	r2, [r7, #32]
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	f002 fa9f 	bl	8008b34 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80065f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	4413      	add	r3, r2
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006604:	429a      	cmp	r2, r3
 8006606:	d304      	bcc.n	8006612 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006616:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8006618:	6a3b      	ldr	r3, [r7, #32]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3728      	adds	r7, #40	; 0x28
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	4413      	add	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	429a      	cmp	r2, r3
 8006648:	d304      	bcc.n	8006654 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8006654:	68fb      	ldr	r3, [r7, #12]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b086      	sub	sp, #24
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	607a      	str	r2, [r7, #4]
 800666e:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8006670:	2355      	movs	r3, #85	; 0x55
 8006672:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6979      	ldr	r1, [r7, #20]
 8006678:	68b8      	ldr	r0, [r7, #8]
 800667a:	f002 fa69 	bl	8008b50 <memset>
 800667e:	4602      	mov	r2, r0
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	4293      	cmp	r3, r2
 8006684:	d00a      	beq.n	800669c <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	613b      	str	r3, [r7, #16]
}
 8006698:	bf00      	nop
 800669a:	e7fe      	b.n	800669a <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800669c:	2224      	movs	r2, #36	; 0x24
 800669e:	2100      	movs	r1, #0
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f002 fa55 	bl	8008b50 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 80066be:	771a      	strb	r2, [r3, #28]
}
 80066c0:	bf00      	nop
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08e      	sub	sp, #56	; 0x38
 80066cc:	af04      	add	r7, sp, #16
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10a      	bne.n	80066f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	623b      	str	r3, [r7, #32]
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10a      	bne.n	800670e <xTaskCreateStatic+0x46>
	__asm volatile
 80066f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fc:	f383 8811 	msr	BASEPRI, r3
 8006700:	f3bf 8f6f 	isb	sy
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	61fb      	str	r3, [r7, #28]
}
 800670a:	bf00      	nop
 800670c:	e7fe      	b.n	800670c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800670e:	23bc      	movs	r3, #188	; 0xbc
 8006710:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2bbc      	cmp	r3, #188	; 0xbc
 8006716:	d00a      	beq.n	800672e <xTaskCreateStatic+0x66>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	61bb      	str	r3, [r7, #24]
}
 800672a:	bf00      	nop
 800672c:	e7fe      	b.n	800672c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800672e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01e      	beq.n	8006774 <xTaskCreateStatic+0xac>
 8006736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006738:	2b00      	cmp	r3, #0
 800673a:	d01b      	beq.n	8006774 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800673c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006744:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	2202      	movs	r2, #2
 800674a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800674e:	2300      	movs	r3, #0
 8006750:	9303      	str	r3, [sp, #12]
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	9302      	str	r3, [sp, #8]
 8006756:	f107 0314 	add.w	r3, r7, #20
 800675a:	9301      	str	r3, [sp, #4]
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 f850 	bl	800680c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800676c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800676e:	f000 f8f3 	bl	8006958 <prvAddNewTaskToReadyList>
 8006772:	e001      	b.n	8006778 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006778:	697b      	ldr	r3, [r7, #20]
	}
 800677a:	4618      	mov	r0, r3
 800677c:	3728      	adds	r7, #40	; 0x28
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006782:	b580      	push	{r7, lr}
 8006784:	b08c      	sub	sp, #48	; 0x30
 8006786:	af04      	add	r7, sp, #16
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	603b      	str	r3, [r7, #0]
 800678e:	4613      	mov	r3, r2
 8006790:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006792:	88fb      	ldrh	r3, [r7, #6]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4618      	mov	r0, r3
 8006798:	f001 ffb6 	bl	8008708 <pvPortMalloc>
 800679c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00e      	beq.n	80067c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067a4:	20bc      	movs	r0, #188	; 0xbc
 80067a6:	f001 ffaf 	bl	8008708 <pvPortMalloc>
 80067aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	631a      	str	r2, [r3, #48]	; 0x30
 80067b8:	e005      	b.n	80067c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067ba:	6978      	ldr	r0, [r7, #20]
 80067bc:	f002 f870 	bl	80088a0 <vPortFree>
 80067c0:	e001      	b.n	80067c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d017      	beq.n	80067fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067d4:	88fa      	ldrh	r2, [r7, #6]
 80067d6:	2300      	movs	r3, #0
 80067d8:	9303      	str	r3, [sp, #12]
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	9302      	str	r3, [sp, #8]
 80067de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	68b9      	ldr	r1, [r7, #8]
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 f80e 	bl	800680c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067f0:	69f8      	ldr	r0, [r7, #28]
 80067f2:	f000 f8b1 	bl	8006958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067f6:	2301      	movs	r3, #1
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	e002      	b.n	8006802 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006800:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006802:	69bb      	ldr	r3, [r7, #24]
	}
 8006804:	4618      	mov	r0, r3
 8006806:	3720      	adds	r7, #32
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b088      	sub	sp, #32
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	461a      	mov	r2, r3
 8006824:	21a5      	movs	r1, #165	; 0xa5
 8006826:	f002 f993 	bl	8008b50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006834:	3b01      	subs	r3, #1
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	f023 0307 	bic.w	r3, r3, #7
 8006842:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <prvInitialiseNewTask+0x58>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	617b      	str	r3, [r7, #20]
}
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01f      	beq.n	80068aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800686a:	2300      	movs	r3, #0
 800686c:	61fb      	str	r3, [r7, #28]
 800686e:	e012      	b.n	8006896 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	4413      	add	r3, r2
 8006876:	7819      	ldrb	r1, [r3, #0]
 8006878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	4413      	add	r3, r2
 800687e:	3334      	adds	r3, #52	; 0x34
 8006880:	460a      	mov	r2, r1
 8006882:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	4413      	add	r3, r2
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d006      	beq.n	800689e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	3301      	adds	r3, #1
 8006894:	61fb      	str	r3, [r7, #28]
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	2b0f      	cmp	r3, #15
 800689a:	d9e9      	bls.n	8006870 <prvInitialiseNewTask+0x64>
 800689c:	e000      	b.n	80068a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800689e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068a8:	e003      	b.n	80068b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b4:	2b37      	cmp	r3, #55	; 0x37
 80068b6:	d901      	bls.n	80068bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068b8:	2337      	movs	r3, #55	; 0x37
 80068ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80068c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ca:	2200      	movs	r2, #0
 80068cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	3304      	adds	r3, #4
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fe fb28 	bl	8004f28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	3318      	adds	r3, #24
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fe fb23 	bl	8004f28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	2200      	movs	r2, #0
 8006904:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	3354      	adds	r3, #84	; 0x54
 800690c:	2260      	movs	r2, #96	; 0x60
 800690e:	2100      	movs	r1, #0
 8006910:	4618      	mov	r0, r3
 8006912:	f002 f91d 	bl	8008b50 <memset>
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	4a0c      	ldr	r2, [pc, #48]	; (800694c <prvInitialiseNewTask+0x140>)
 800691a:	659a      	str	r2, [r3, #88]	; 0x58
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	4a0c      	ldr	r2, [pc, #48]	; (8006950 <prvInitialiseNewTask+0x144>)
 8006920:	65da      	str	r2, [r3, #92]	; 0x5c
 8006922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006924:	4a0b      	ldr	r2, [pc, #44]	; (8006954 <prvInitialiseNewTask+0x148>)
 8006926:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	68f9      	ldr	r1, [r7, #12]
 800692c:	69b8      	ldr	r0, [r7, #24]
 800692e:	f001 fc9d 	bl	800826c <pxPortInitialiseStack>
 8006932:	4602      	mov	r2, r0
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800693e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006942:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006944:	bf00      	nop
 8006946:	3720      	adds	r7, #32
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	0800968c 	.word	0x0800968c
 8006950:	080096ac 	.word	0x080096ac
 8006954:	0800966c 	.word	0x0800966c

08006958 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006960:	f001 fdb0 	bl	80084c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006964:	4b2d      	ldr	r3, [pc, #180]	; (8006a1c <prvAddNewTaskToReadyList+0xc4>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3301      	adds	r3, #1
 800696a:	4a2c      	ldr	r2, [pc, #176]	; (8006a1c <prvAddNewTaskToReadyList+0xc4>)
 800696c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800696e:	4b2c      	ldr	r3, [pc, #176]	; (8006a20 <prvAddNewTaskToReadyList+0xc8>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d109      	bne.n	800698a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006976:	4a2a      	ldr	r2, [pc, #168]	; (8006a20 <prvAddNewTaskToReadyList+0xc8>)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800697c:	4b27      	ldr	r3, [pc, #156]	; (8006a1c <prvAddNewTaskToReadyList+0xc4>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d110      	bne.n	80069a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006984:	f000 fc4c 	bl	8007220 <prvInitialiseTaskLists>
 8006988:	e00d      	b.n	80069a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800698a:	4b26      	ldr	r3, [pc, #152]	; (8006a24 <prvAddNewTaskToReadyList+0xcc>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d109      	bne.n	80069a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006992:	4b23      	ldr	r3, [pc, #140]	; (8006a20 <prvAddNewTaskToReadyList+0xc8>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	429a      	cmp	r2, r3
 800699e:	d802      	bhi.n	80069a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069a0:	4a1f      	ldr	r2, [pc, #124]	; (8006a20 <prvAddNewTaskToReadyList+0xc8>)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069a6:	4b20      	ldr	r3, [pc, #128]	; (8006a28 <prvAddNewTaskToReadyList+0xd0>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3301      	adds	r3, #1
 80069ac:	4a1e      	ldr	r2, [pc, #120]	; (8006a28 <prvAddNewTaskToReadyList+0xd0>)
 80069ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80069b0:	4b1d      	ldr	r3, [pc, #116]	; (8006a28 <prvAddNewTaskToReadyList+0xd0>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069bc:	4b1b      	ldr	r3, [pc, #108]	; (8006a2c <prvAddNewTaskToReadyList+0xd4>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d903      	bls.n	80069cc <prvAddNewTaskToReadyList+0x74>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	4a18      	ldr	r2, [pc, #96]	; (8006a2c <prvAddNewTaskToReadyList+0xd4>)
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d0:	4613      	mov	r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <prvAddNewTaskToReadyList+0xd8>)
 80069da:	441a      	add	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3304      	adds	r3, #4
 80069e0:	4619      	mov	r1, r3
 80069e2:	4610      	mov	r0, r2
 80069e4:	f7fe faad 	bl	8004f42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069e8:	f001 fd9c 	bl	8008524 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069ec:	4b0d      	ldr	r3, [pc, #52]	; (8006a24 <prvAddNewTaskToReadyList+0xcc>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00e      	beq.n	8006a12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069f4:	4b0a      	ldr	r3, [pc, #40]	; (8006a20 <prvAddNewTaskToReadyList+0xc8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d207      	bcs.n	8006a12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a02:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <prvAddNewTaskToReadyList+0xdc>)
 8006a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a12:	bf00      	nop
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20000e6c 	.word	0x20000e6c
 8006a20:	20000998 	.word	0x20000998
 8006a24:	20000e78 	.word	0x20000e78
 8006a28:	20000e88 	.word	0x20000e88
 8006a2c:	20000e74 	.word	0x20000e74
 8006a30:	2000099c 	.word	0x2000099c
 8006a34:	e000ed04 	.word	0xe000ed04

08006a38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a40:	2300      	movs	r3, #0
 8006a42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d017      	beq.n	8006a7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a4a:	4b13      	ldr	r3, [pc, #76]	; (8006a98 <vTaskDelay+0x60>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <vTaskDelay+0x30>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	60bb      	str	r3, [r7, #8]
}
 8006a64:	bf00      	nop
 8006a66:	e7fe      	b.n	8006a66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a68:	f000 f88a 	bl	8006b80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f001 f85a 	bl	8007b28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a74:	f000 f892 	bl	8006b9c <xTaskResumeAll>
 8006a78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d107      	bne.n	8006a90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a80:	4b06      	ldr	r3, [pc, #24]	; (8006a9c <vTaskDelay+0x64>)
 8006a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a90:	bf00      	nop
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	20000e94 	.word	0x20000e94
 8006a9c:	e000ed04 	.word	0xe000ed04

08006aa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08a      	sub	sp, #40	; 0x28
 8006aa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006aae:	463a      	mov	r2, r7
 8006ab0:	1d39      	adds	r1, r7, #4
 8006ab2:	f107 0308 	add.w	r3, r7, #8
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fe f9e2 	bl	8004e80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	9202      	str	r2, [sp, #8]
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	2300      	movs	r3, #0
 8006acc:	460a      	mov	r2, r1
 8006ace:	4924      	ldr	r1, [pc, #144]	; (8006b60 <vTaskStartScheduler+0xc0>)
 8006ad0:	4824      	ldr	r0, [pc, #144]	; (8006b64 <vTaskStartScheduler+0xc4>)
 8006ad2:	f7ff fdf9 	bl	80066c8 <xTaskCreateStatic>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	4a23      	ldr	r2, [pc, #140]	; (8006b68 <vTaskStartScheduler+0xc8>)
 8006ada:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006adc:	4b22      	ldr	r3, [pc, #136]	; (8006b68 <vTaskStartScheduler+0xc8>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	e001      	b.n	8006aee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d102      	bne.n	8006afa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006af4:	f001 f86c 	bl	8007bd0 <xTimerCreateTimerTask>
 8006af8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d11b      	bne.n	8006b38 <vTaskStartScheduler+0x98>
	__asm volatile
 8006b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	613b      	str	r3, [r7, #16]
}
 8006b12:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b14:	4b15      	ldr	r3, [pc, #84]	; (8006b6c <vTaskStartScheduler+0xcc>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3354      	adds	r3, #84	; 0x54
 8006b1a:	4a15      	ldr	r2, [pc, #84]	; (8006b70 <vTaskStartScheduler+0xd0>)
 8006b1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b1e:	4b15      	ldr	r3, [pc, #84]	; (8006b74 <vTaskStartScheduler+0xd4>)
 8006b20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b26:	4b14      	ldr	r3, [pc, #80]	; (8006b78 <vTaskStartScheduler+0xd8>)
 8006b28:	2201      	movs	r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b2c:	4b13      	ldr	r3, [pc, #76]	; (8006b7c <vTaskStartScheduler+0xdc>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b32:	f001 fc25 	bl	8008380 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b36:	e00e      	b.n	8006b56 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b3e:	d10a      	bne.n	8006b56 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	60fb      	str	r3, [r7, #12]
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <vTaskStartScheduler+0xb4>
}
 8006b56:	bf00      	nop
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	0800959c 	.word	0x0800959c
 8006b64:	080071f1 	.word	0x080071f1
 8006b68:	20000e90 	.word	0x20000e90
 8006b6c:	20000998 	.word	0x20000998
 8006b70:	20000010 	.word	0x20000010
 8006b74:	20000e8c 	.word	0x20000e8c
 8006b78:	20000e78 	.word	0x20000e78
 8006b7c:	20000e70 	.word	0x20000e70

08006b80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b84:	4b04      	ldr	r3, [pc, #16]	; (8006b98 <vTaskSuspendAll+0x18>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	4a03      	ldr	r2, [pc, #12]	; (8006b98 <vTaskSuspendAll+0x18>)
 8006b8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b8e:	bf00      	nop
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	20000e94 	.word	0x20000e94

08006b9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006baa:	4b42      	ldr	r3, [pc, #264]	; (8006cb4 <xTaskResumeAll+0x118>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	603b      	str	r3, [r7, #0]
}
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bc8:	f001 fc7c 	bl	80084c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bcc:	4b39      	ldr	r3, [pc, #228]	; (8006cb4 <xTaskResumeAll+0x118>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	4a38      	ldr	r2, [pc, #224]	; (8006cb4 <xTaskResumeAll+0x118>)
 8006bd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bd6:	4b37      	ldr	r3, [pc, #220]	; (8006cb4 <xTaskResumeAll+0x118>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d162      	bne.n	8006ca4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bde:	4b36      	ldr	r3, [pc, #216]	; (8006cb8 <xTaskResumeAll+0x11c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d05e      	beq.n	8006ca4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006be6:	e02f      	b.n	8006c48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006be8:	4b34      	ldr	r3, [pc, #208]	; (8006cbc <xTaskResumeAll+0x120>)
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3318      	adds	r3, #24
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fe fa01 	bl	8004ffc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fe f9fc 	bl	8004ffc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c08:	4b2d      	ldr	r3, [pc, #180]	; (8006cc0 <xTaskResumeAll+0x124>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d903      	bls.n	8006c18 <xTaskResumeAll+0x7c>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	4a2a      	ldr	r2, [pc, #168]	; (8006cc0 <xTaskResumeAll+0x124>)
 8006c16:	6013      	str	r3, [r2, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4a27      	ldr	r2, [pc, #156]	; (8006cc4 <xTaskResumeAll+0x128>)
 8006c26:	441a      	add	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4610      	mov	r0, r2
 8006c30:	f7fe f987 	bl	8004f42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c38:	4b23      	ldr	r3, [pc, #140]	; (8006cc8 <xTaskResumeAll+0x12c>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d302      	bcc.n	8006c48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c42:	4b22      	ldr	r3, [pc, #136]	; (8006ccc <xTaskResumeAll+0x130>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c48:	4b1c      	ldr	r3, [pc, #112]	; (8006cbc <xTaskResumeAll+0x120>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1cb      	bne.n	8006be8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c56:	f000 fb85 	bl	8007364 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c5a:	4b1d      	ldr	r3, [pc, #116]	; (8006cd0 <xTaskResumeAll+0x134>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d010      	beq.n	8006c88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c66:	f000 f847 	bl	8006cf8 <xTaskIncrementTick>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c70:	4b16      	ldr	r3, [pc, #88]	; (8006ccc <xTaskResumeAll+0x130>)
 8006c72:	2201      	movs	r2, #1
 8006c74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f1      	bne.n	8006c66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006c82:	4b13      	ldr	r3, [pc, #76]	; (8006cd0 <xTaskResumeAll+0x134>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c88:	4b10      	ldr	r3, [pc, #64]	; (8006ccc <xTaskResumeAll+0x130>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d009      	beq.n	8006ca4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c90:	2301      	movs	r3, #1
 8006c92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c94:	4b0f      	ldr	r3, [pc, #60]	; (8006cd4 <xTaskResumeAll+0x138>)
 8006c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ca4:	f001 fc3e 	bl	8008524 <vPortExitCritical>

	return xAlreadyYielded;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000e94 	.word	0x20000e94
 8006cb8:	20000e6c 	.word	0x20000e6c
 8006cbc:	20000e2c 	.word	0x20000e2c
 8006cc0:	20000e74 	.word	0x20000e74
 8006cc4:	2000099c 	.word	0x2000099c
 8006cc8:	20000998 	.word	0x20000998
 8006ccc:	20000e80 	.word	0x20000e80
 8006cd0:	20000e7c 	.word	0x20000e7c
 8006cd4:	e000ed04 	.word	0xe000ed04

08006cd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006cde:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <xTaskGetTickCount+0x1c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ce4:	687b      	ldr	r3, [r7, #4]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	20000e70 	.word	0x20000e70

08006cf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d02:	4b4f      	ldr	r3, [pc, #316]	; (8006e40 <xTaskIncrementTick+0x148>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f040 808f 	bne.w	8006e2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d0c:	4b4d      	ldr	r3, [pc, #308]	; (8006e44 <xTaskIncrementTick+0x14c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3301      	adds	r3, #1
 8006d12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d14:	4a4b      	ldr	r2, [pc, #300]	; (8006e44 <xTaskIncrementTick+0x14c>)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d120      	bne.n	8006d62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d20:	4b49      	ldr	r3, [pc, #292]	; (8006e48 <xTaskIncrementTick+0x150>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00a      	beq.n	8006d40 <xTaskIncrementTick+0x48>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	603b      	str	r3, [r7, #0]
}
 8006d3c:	bf00      	nop
 8006d3e:	e7fe      	b.n	8006d3e <xTaskIncrementTick+0x46>
 8006d40:	4b41      	ldr	r3, [pc, #260]	; (8006e48 <xTaskIncrementTick+0x150>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	4b41      	ldr	r3, [pc, #260]	; (8006e4c <xTaskIncrementTick+0x154>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a3f      	ldr	r2, [pc, #252]	; (8006e48 <xTaskIncrementTick+0x150>)
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	4a3f      	ldr	r2, [pc, #252]	; (8006e4c <xTaskIncrementTick+0x154>)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	4b3e      	ldr	r3, [pc, #248]	; (8006e50 <xTaskIncrementTick+0x158>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	4a3d      	ldr	r2, [pc, #244]	; (8006e50 <xTaskIncrementTick+0x158>)
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	f000 fb01 	bl	8007364 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d62:	4b3c      	ldr	r3, [pc, #240]	; (8006e54 <xTaskIncrementTick+0x15c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d349      	bcc.n	8006e00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d6c:	4b36      	ldr	r3, [pc, #216]	; (8006e48 <xTaskIncrementTick+0x150>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d104      	bne.n	8006d80 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d76:	4b37      	ldr	r3, [pc, #220]	; (8006e54 <xTaskIncrementTick+0x15c>)
 8006d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d7c:	601a      	str	r2, [r3, #0]
					break;
 8006d7e:	e03f      	b.n	8006e00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d80:	4b31      	ldr	r3, [pc, #196]	; (8006e48 <xTaskIncrementTick+0x150>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d203      	bcs.n	8006da0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d98:	4a2e      	ldr	r2, [pc, #184]	; (8006e54 <xTaskIncrementTick+0x15c>)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d9e:	e02f      	b.n	8006e00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	3304      	adds	r3, #4
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fe f929 	bl	8004ffc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d004      	beq.n	8006dbc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	3318      	adds	r3, #24
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe f920 	bl	8004ffc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc0:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <xTaskIncrementTick+0x160>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d903      	bls.n	8006dd0 <xTaskIncrementTick+0xd8>
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	4a22      	ldr	r2, [pc, #136]	; (8006e58 <xTaskIncrementTick+0x160>)
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4a1f      	ldr	r2, [pc, #124]	; (8006e5c <xTaskIncrementTick+0x164>)
 8006dde:	441a      	add	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	3304      	adds	r3, #4
 8006de4:	4619      	mov	r1, r3
 8006de6:	4610      	mov	r0, r2
 8006de8:	f7fe f8ab 	bl	8004f42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df0:	4b1b      	ldr	r3, [pc, #108]	; (8006e60 <xTaskIncrementTick+0x168>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d3b8      	bcc.n	8006d6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dfe:	e7b5      	b.n	8006d6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e00:	4b17      	ldr	r3, [pc, #92]	; (8006e60 <xTaskIncrementTick+0x168>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e06:	4915      	ldr	r1, [pc, #84]	; (8006e5c <xTaskIncrementTick+0x164>)
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d901      	bls.n	8006e1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006e1c:	4b11      	ldr	r3, [pc, #68]	; (8006e64 <xTaskIncrementTick+0x16c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d007      	beq.n	8006e34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006e24:	2301      	movs	r3, #1
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	e004      	b.n	8006e34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e2a:	4b0f      	ldr	r3, [pc, #60]	; (8006e68 <xTaskIncrementTick+0x170>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	4a0d      	ldr	r2, [pc, #52]	; (8006e68 <xTaskIncrementTick+0x170>)
 8006e32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e34:	697b      	ldr	r3, [r7, #20]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000e94 	.word	0x20000e94
 8006e44:	20000e70 	.word	0x20000e70
 8006e48:	20000e24 	.word	0x20000e24
 8006e4c:	20000e28 	.word	0x20000e28
 8006e50:	20000e84 	.word	0x20000e84
 8006e54:	20000e8c 	.word	0x20000e8c
 8006e58:	20000e74 	.word	0x20000e74
 8006e5c:	2000099c 	.word	0x2000099c
 8006e60:	20000998 	.word	0x20000998
 8006e64:	20000e80 	.word	0x20000e80
 8006e68:	20000e7c 	.word	0x20000e7c

08006e6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e72:	4b2a      	ldr	r3, [pc, #168]	; (8006f1c <vTaskSwitchContext+0xb0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e7a:	4b29      	ldr	r3, [pc, #164]	; (8006f20 <vTaskSwitchContext+0xb4>)
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e80:	e046      	b.n	8006f10 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006e82:	4b27      	ldr	r3, [pc, #156]	; (8006f20 <vTaskSwitchContext+0xb4>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e88:	4b26      	ldr	r3, [pc, #152]	; (8006f24 <vTaskSwitchContext+0xb8>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	e010      	b.n	8006eb2 <vTaskSwitchContext+0x46>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10a      	bne.n	8006eac <vTaskSwitchContext+0x40>
	__asm volatile
 8006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	607b      	str	r3, [r7, #4]
}
 8006ea8:	bf00      	nop
 8006eaa:	e7fe      	b.n	8006eaa <vTaskSwitchContext+0x3e>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	60fb      	str	r3, [r7, #12]
 8006eb2:	491d      	ldr	r1, [pc, #116]	; (8006f28 <vTaskSwitchContext+0xbc>)
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0e4      	beq.n	8006e90 <vTaskSwitchContext+0x24>
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <vTaskSwitchContext+0xbc>)
 8006ed2:	4413      	add	r3, r2
 8006ed4:	60bb      	str	r3, [r7, #8]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	605a      	str	r2, [r3, #4]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d104      	bne.n	8006ef6 <vTaskSwitchContext+0x8a>
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	605a      	str	r2, [r3, #4]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	4a0b      	ldr	r2, [pc, #44]	; (8006f2c <vTaskSwitchContext+0xc0>)
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	4a08      	ldr	r2, [pc, #32]	; (8006f24 <vTaskSwitchContext+0xb8>)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f06:	4b09      	ldr	r3, [pc, #36]	; (8006f2c <vTaskSwitchContext+0xc0>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3354      	adds	r3, #84	; 0x54
 8006f0c:	4a08      	ldr	r2, [pc, #32]	; (8006f30 <vTaskSwitchContext+0xc4>)
 8006f0e:	6013      	str	r3, [r2, #0]
}
 8006f10:	bf00      	nop
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	20000e94 	.word	0x20000e94
 8006f20:	20000e80 	.word	0x20000e80
 8006f24:	20000e74 	.word	0x20000e74
 8006f28:	2000099c 	.word	0x2000099c
 8006f2c:	20000998 	.word	0x20000998
 8006f30:	20000010 	.word	0x20000010

08006f34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10a      	bne.n	8006f5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	60fb      	str	r3, [r7, #12]
}
 8006f56:	bf00      	nop
 8006f58:	e7fe      	b.n	8006f58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f5a:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <vTaskPlaceOnEventList+0x44>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3318      	adds	r3, #24
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fe f811 	bl	8004f8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f68:	2101      	movs	r1, #1
 8006f6a:	6838      	ldr	r0, [r7, #0]
 8006f6c:	f000 fddc 	bl	8007b28 <prvAddCurrentTaskToDelayedList>
}
 8006f70:	bf00      	nop
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	20000998 	.word	0x20000998

08006f7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10a      	bne.n	8006fa4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	617b      	str	r3, [r7, #20]
}
 8006fa0:	bf00      	nop
 8006fa2:	e7fe      	b.n	8006fa2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fa4:	4b0a      	ldr	r3, [pc, #40]	; (8006fd0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3318      	adds	r3, #24
 8006faa:	4619      	mov	r1, r3
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f7fd ffc8 	bl	8004f42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fbc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fbe:	6879      	ldr	r1, [r7, #4]
 8006fc0:	68b8      	ldr	r0, [r7, #8]
 8006fc2:	f000 fdb1 	bl	8007b28 <prvAddCurrentTaskToDelayedList>
	}
 8006fc6:	bf00      	nop
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	20000998 	.word	0x20000998

08006fd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10a      	bne.n	8007000 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	60fb      	str	r3, [r7, #12]
}
 8006ffc:	bf00      	nop
 8006ffe:	e7fe      	b.n	8006ffe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	3318      	adds	r3, #24
 8007004:	4618      	mov	r0, r3
 8007006:	f7fd fff9 	bl	8004ffc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800700a:	4b1e      	ldr	r3, [pc, #120]	; (8007084 <xTaskRemoveFromEventList+0xb0>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d11d      	bne.n	800704e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	3304      	adds	r3, #4
 8007016:	4618      	mov	r0, r3
 8007018:	f7fd fff0 	bl	8004ffc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007020:	4b19      	ldr	r3, [pc, #100]	; (8007088 <xTaskRemoveFromEventList+0xb4>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	429a      	cmp	r2, r3
 8007026:	d903      	bls.n	8007030 <xTaskRemoveFromEventList+0x5c>
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	4a16      	ldr	r2, [pc, #88]	; (8007088 <xTaskRemoveFromEventList+0xb4>)
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007034:	4613      	mov	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4a13      	ldr	r2, [pc, #76]	; (800708c <xTaskRemoveFromEventList+0xb8>)
 800703e:	441a      	add	r2, r3
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	3304      	adds	r3, #4
 8007044:	4619      	mov	r1, r3
 8007046:	4610      	mov	r0, r2
 8007048:	f7fd ff7b 	bl	8004f42 <vListInsertEnd>
 800704c:	e005      	b.n	800705a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	3318      	adds	r3, #24
 8007052:	4619      	mov	r1, r3
 8007054:	480e      	ldr	r0, [pc, #56]	; (8007090 <xTaskRemoveFromEventList+0xbc>)
 8007056:	f7fd ff74 	bl	8004f42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705e:	4b0d      	ldr	r3, [pc, #52]	; (8007094 <xTaskRemoveFromEventList+0xc0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	429a      	cmp	r2, r3
 8007066:	d905      	bls.n	8007074 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007068:	2301      	movs	r3, #1
 800706a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800706c:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <xTaskRemoveFromEventList+0xc4>)
 800706e:	2201      	movs	r2, #1
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	e001      	b.n	8007078 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007074:	2300      	movs	r3, #0
 8007076:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007078:	697b      	ldr	r3, [r7, #20]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3718      	adds	r7, #24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000e94 	.word	0x20000e94
 8007088:	20000e74 	.word	0x20000e74
 800708c:	2000099c 	.word	0x2000099c
 8007090:	20000e2c 	.word	0x20000e2c
 8007094:	20000998 	.word	0x20000998
 8007098:	20000e80 	.word	0x20000e80

0800709c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10a      	bne.n	80070c0 <vTaskSetTimeOutState+0x24>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	60fb      	str	r3, [r7, #12]
}
 80070bc:	bf00      	nop
 80070be:	e7fe      	b.n	80070be <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80070c0:	f001 fa00 	bl	80084c4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070c4:	4b06      	ldr	r3, [pc, #24]	; (80070e0 <vTaskSetTimeOutState+0x44>)
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80070cc:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <vTaskSetTimeOutState+0x48>)
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80070d4:	f001 fa26 	bl	8008524 <vPortExitCritical>
}
 80070d8:	bf00      	nop
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000e84 	.word	0x20000e84
 80070e4:	20000e70 	.word	0x20000e70

080070e8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070f0:	4b06      	ldr	r3, [pc, #24]	; (800710c <vTaskInternalSetTimeOutState+0x24>)
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070f8:	4b05      	ldr	r3, [pc, #20]	; (8007110 <vTaskInternalSetTimeOutState+0x28>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	605a      	str	r2, [r3, #4]
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	20000e84 	.word	0x20000e84
 8007110:	20000e70 	.word	0x20000e70

08007114 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10a      	bne.n	800713a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	613b      	str	r3, [r7, #16]
}
 8007136:	bf00      	nop
 8007138:	e7fe      	b.n	8007138 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10a      	bne.n	8007156 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	60fb      	str	r3, [r7, #12]
}
 8007152:	bf00      	nop
 8007154:	e7fe      	b.n	8007154 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007156:	f001 f9b5 	bl	80084c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800715a:	4b1d      	ldr	r3, [pc, #116]	; (80071d0 <xTaskCheckForTimeOut+0xbc>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007172:	d102      	bne.n	800717a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007174:	2300      	movs	r3, #0
 8007176:	61fb      	str	r3, [r7, #28]
 8007178:	e023      	b.n	80071c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	4b15      	ldr	r3, [pc, #84]	; (80071d4 <xTaskCheckForTimeOut+0xc0>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	429a      	cmp	r2, r3
 8007184:	d007      	beq.n	8007196 <xTaskCheckForTimeOut+0x82>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	429a      	cmp	r2, r3
 800718e:	d302      	bcc.n	8007196 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007190:	2301      	movs	r3, #1
 8007192:	61fb      	str	r3, [r7, #28]
 8007194:	e015      	b.n	80071c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	429a      	cmp	r2, r3
 800719e:	d20b      	bcs.n	80071b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	1ad2      	subs	r2, r2, r3
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff ff9b 	bl	80070e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071b2:	2300      	movs	r3, #0
 80071b4:	61fb      	str	r3, [r7, #28]
 80071b6:	e004      	b.n	80071c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2200      	movs	r2, #0
 80071bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071be:	2301      	movs	r3, #1
 80071c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071c2:	f001 f9af 	bl	8008524 <vPortExitCritical>

	return xReturn;
 80071c6:	69fb      	ldr	r3, [r7, #28]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3720      	adds	r7, #32
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20000e70 	.word	0x20000e70
 80071d4:	20000e84 	.word	0x20000e84

080071d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071d8:	b480      	push	{r7}
 80071da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80071dc:	4b03      	ldr	r3, [pc, #12]	; (80071ec <vTaskMissedYield+0x14>)
 80071de:	2201      	movs	r2, #1
 80071e0:	601a      	str	r2, [r3, #0]
}
 80071e2:	bf00      	nop
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	20000e80 	.word	0x20000e80

080071f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071f8:	f000 f852 	bl	80072a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071fc:	4b06      	ldr	r3, [pc, #24]	; (8007218 <prvIdleTask+0x28>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d9f9      	bls.n	80071f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007204:	4b05      	ldr	r3, [pc, #20]	; (800721c <prvIdleTask+0x2c>)
 8007206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007214:	e7f0      	b.n	80071f8 <prvIdleTask+0x8>
 8007216:	bf00      	nop
 8007218:	2000099c 	.word	0x2000099c
 800721c:	e000ed04 	.word	0xe000ed04

08007220 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007226:	2300      	movs	r3, #0
 8007228:	607b      	str	r3, [r7, #4]
 800722a:	e00c      	b.n	8007246 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	4613      	mov	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4a12      	ldr	r2, [pc, #72]	; (8007280 <prvInitialiseTaskLists+0x60>)
 8007238:	4413      	add	r3, r2
 800723a:	4618      	mov	r0, r3
 800723c:	f7fd fe54 	bl	8004ee8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3301      	adds	r3, #1
 8007244:	607b      	str	r3, [r7, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b37      	cmp	r3, #55	; 0x37
 800724a:	d9ef      	bls.n	800722c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800724c:	480d      	ldr	r0, [pc, #52]	; (8007284 <prvInitialiseTaskLists+0x64>)
 800724e:	f7fd fe4b 	bl	8004ee8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007252:	480d      	ldr	r0, [pc, #52]	; (8007288 <prvInitialiseTaskLists+0x68>)
 8007254:	f7fd fe48 	bl	8004ee8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007258:	480c      	ldr	r0, [pc, #48]	; (800728c <prvInitialiseTaskLists+0x6c>)
 800725a:	f7fd fe45 	bl	8004ee8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800725e:	480c      	ldr	r0, [pc, #48]	; (8007290 <prvInitialiseTaskLists+0x70>)
 8007260:	f7fd fe42 	bl	8004ee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007264:	480b      	ldr	r0, [pc, #44]	; (8007294 <prvInitialiseTaskLists+0x74>)
 8007266:	f7fd fe3f 	bl	8004ee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800726a:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <prvInitialiseTaskLists+0x78>)
 800726c:	4a05      	ldr	r2, [pc, #20]	; (8007284 <prvInitialiseTaskLists+0x64>)
 800726e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007270:	4b0a      	ldr	r3, [pc, #40]	; (800729c <prvInitialiseTaskLists+0x7c>)
 8007272:	4a05      	ldr	r2, [pc, #20]	; (8007288 <prvInitialiseTaskLists+0x68>)
 8007274:	601a      	str	r2, [r3, #0]
}
 8007276:	bf00      	nop
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	2000099c 	.word	0x2000099c
 8007284:	20000dfc 	.word	0x20000dfc
 8007288:	20000e10 	.word	0x20000e10
 800728c:	20000e2c 	.word	0x20000e2c
 8007290:	20000e40 	.word	0x20000e40
 8007294:	20000e58 	.word	0x20000e58
 8007298:	20000e24 	.word	0x20000e24
 800729c:	20000e28 	.word	0x20000e28

080072a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072a6:	e019      	b.n	80072dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072a8:	f001 f90c 	bl	80084c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ac:	4b10      	ldr	r3, [pc, #64]	; (80072f0 <prvCheckTasksWaitingTermination+0x50>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3304      	adds	r3, #4
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fd fe9f 	bl	8004ffc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072be:	4b0d      	ldr	r3, [pc, #52]	; (80072f4 <prvCheckTasksWaitingTermination+0x54>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	4a0b      	ldr	r2, [pc, #44]	; (80072f4 <prvCheckTasksWaitingTermination+0x54>)
 80072c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072c8:	4b0b      	ldr	r3, [pc, #44]	; (80072f8 <prvCheckTasksWaitingTermination+0x58>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	4a0a      	ldr	r2, [pc, #40]	; (80072f8 <prvCheckTasksWaitingTermination+0x58>)
 80072d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072d2:	f001 f927 	bl	8008524 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f810 	bl	80072fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072dc:	4b06      	ldr	r3, [pc, #24]	; (80072f8 <prvCheckTasksWaitingTermination+0x58>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e1      	bne.n	80072a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20000e40 	.word	0x20000e40
 80072f4:	20000e6c 	.word	0x20000e6c
 80072f8:	20000e54 	.word	0x20000e54

080072fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3354      	adds	r3, #84	; 0x54
 8007308:	4618      	mov	r0, r3
 800730a:	f001 fccb 	bl	8008ca4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007314:	2b00      	cmp	r3, #0
 8007316:	d108      	bne.n	800732a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731c:	4618      	mov	r0, r3
 800731e:	f001 fabf 	bl	80088a0 <vPortFree>
				vPortFree( pxTCB );
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f001 fabc 	bl	80088a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007328:	e018      	b.n	800735c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007330:	2b01      	cmp	r3, #1
 8007332:	d103      	bne.n	800733c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f001 fab3 	bl	80088a0 <vPortFree>
	}
 800733a:	e00f      	b.n	800735c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007342:	2b02      	cmp	r3, #2
 8007344:	d00a      	beq.n	800735c <prvDeleteTCB+0x60>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	60fb      	str	r3, [r7, #12]
}
 8007358:	bf00      	nop
 800735a:	e7fe      	b.n	800735a <prvDeleteTCB+0x5e>
	}
 800735c:	bf00      	nop
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800736a:	4b0c      	ldr	r3, [pc, #48]	; (800739c <prvResetNextTaskUnblockTime+0x38>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d104      	bne.n	800737e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007374:	4b0a      	ldr	r3, [pc, #40]	; (80073a0 <prvResetNextTaskUnblockTime+0x3c>)
 8007376:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800737a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800737c:	e008      	b.n	8007390 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800737e:	4b07      	ldr	r3, [pc, #28]	; (800739c <prvResetNextTaskUnblockTime+0x38>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	4a04      	ldr	r2, [pc, #16]	; (80073a0 <prvResetNextTaskUnblockTime+0x3c>)
 800738e:	6013      	str	r3, [r2, #0]
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	20000e24 	.word	0x20000e24
 80073a0:	20000e8c 	.word	0x20000e8c

080073a4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80073aa:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <xTaskGetCurrentTaskHandle+0x1c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	607b      	str	r3, [r7, #4]

		return xReturn;
 80073b0:	687b      	ldr	r3, [r7, #4]
	}
 80073b2:	4618      	mov	r0, r3
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	20000998 	.word	0x20000998

080073c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073ca:	4b0b      	ldr	r3, [pc, #44]	; (80073f8 <xTaskGetSchedulerState+0x34>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d102      	bne.n	80073d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073d2:	2301      	movs	r3, #1
 80073d4:	607b      	str	r3, [r7, #4]
 80073d6:	e008      	b.n	80073ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073d8:	4b08      	ldr	r3, [pc, #32]	; (80073fc <xTaskGetSchedulerState+0x38>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073e0:	2302      	movs	r3, #2
 80073e2:	607b      	str	r3, [r7, #4]
 80073e4:	e001      	b.n	80073ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073e6:	2300      	movs	r3, #0
 80073e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073ea:	687b      	ldr	r3, [r7, #4]
	}
 80073ec:	4618      	mov	r0, r3
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	20000e78 	.word	0x20000e78
 80073fc:	20000e94 	.word	0x20000e94

08007400 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d051      	beq.n	80074ba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741a:	4b2a      	ldr	r3, [pc, #168]	; (80074c4 <xTaskPriorityInherit+0xc4>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007420:	429a      	cmp	r2, r3
 8007422:	d241      	bcs.n	80074a8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	2b00      	cmp	r3, #0
 800742a:	db06      	blt.n	800743a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800742c:	4b25      	ldr	r3, [pc, #148]	; (80074c4 <xTaskPriorityInherit+0xc4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007432:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	6959      	ldr	r1, [r3, #20]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4a1f      	ldr	r2, [pc, #124]	; (80074c8 <xTaskPriorityInherit+0xc8>)
 800744c:	4413      	add	r3, r2
 800744e:	4299      	cmp	r1, r3
 8007450:	d122      	bne.n	8007498 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	3304      	adds	r3, #4
 8007456:	4618      	mov	r0, r3
 8007458:	f7fd fdd0 	bl	8004ffc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800745c:	4b19      	ldr	r3, [pc, #100]	; (80074c4 <xTaskPriorityInherit+0xc4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746a:	4b18      	ldr	r3, [pc, #96]	; (80074cc <xTaskPriorityInherit+0xcc>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d903      	bls.n	800747a <xTaskPriorityInherit+0x7a>
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007476:	4a15      	ldr	r2, [pc, #84]	; (80074cc <xTaskPriorityInherit+0xcc>)
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747e:	4613      	mov	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4a10      	ldr	r2, [pc, #64]	; (80074c8 <xTaskPriorityInherit+0xc8>)
 8007488:	441a      	add	r2, r3
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	3304      	adds	r3, #4
 800748e:	4619      	mov	r1, r3
 8007490:	4610      	mov	r0, r2
 8007492:	f7fd fd56 	bl	8004f42 <vListInsertEnd>
 8007496:	e004      	b.n	80074a2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007498:	4b0a      	ldr	r3, [pc, #40]	; (80074c4 <xTaskPriorityInherit+0xc4>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80074a2:	2301      	movs	r3, #1
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	e008      	b.n	80074ba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074ac:	4b05      	ldr	r3, [pc, #20]	; (80074c4 <xTaskPriorityInherit+0xc4>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d201      	bcs.n	80074ba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80074b6:	2301      	movs	r3, #1
 80074b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074ba:	68fb      	ldr	r3, [r7, #12]
	}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	20000998 	.word	0x20000998
 80074c8:	2000099c 	.word	0x2000099c
 80074cc:	20000e74 	.word	0x20000e74

080074d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074dc:	2300      	movs	r3, #0
 80074de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d056      	beq.n	8007594 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074e6:	4b2e      	ldr	r3, [pc, #184]	; (80075a0 <xTaskPriorityDisinherit+0xd0>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d00a      	beq.n	8007506 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	60fb      	str	r3, [r7, #12]
}
 8007502:	bf00      	nop
 8007504:	e7fe      	b.n	8007504 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10a      	bne.n	8007524 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	60bb      	str	r3, [r7, #8]
}
 8007520:	bf00      	nop
 8007522:	e7fe      	b.n	8007522 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007528:	1e5a      	subs	r2, r3, #1
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007536:	429a      	cmp	r2, r3
 8007538:	d02c      	beq.n	8007594 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753e:	2b00      	cmp	r3, #0
 8007540:	d128      	bne.n	8007594 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	3304      	adds	r3, #4
 8007546:	4618      	mov	r0, r3
 8007548:	f7fd fd58 	bl	8004ffc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007564:	4b0f      	ldr	r3, [pc, #60]	; (80075a4 <xTaskPriorityDisinherit+0xd4>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	429a      	cmp	r2, r3
 800756a:	d903      	bls.n	8007574 <xTaskPriorityDisinherit+0xa4>
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007570:	4a0c      	ldr	r2, [pc, #48]	; (80075a4 <xTaskPriorityDisinherit+0xd4>)
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007578:	4613      	mov	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4a09      	ldr	r2, [pc, #36]	; (80075a8 <xTaskPriorityDisinherit+0xd8>)
 8007582:	441a      	add	r2, r3
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	3304      	adds	r3, #4
 8007588:	4619      	mov	r1, r3
 800758a:	4610      	mov	r0, r2
 800758c:	f7fd fcd9 	bl	8004f42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007590:	2301      	movs	r3, #1
 8007592:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007594:	697b      	ldr	r3, [r7, #20]
	}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20000998 	.word	0x20000998
 80075a4:	20000e74 	.word	0x20000e74
 80075a8:	2000099c 	.word	0x2000099c

080075ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80075ba:	2301      	movs	r3, #1
 80075bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d06a      	beq.n	800769a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10a      	bne.n	80075e2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	60fb      	str	r3, [r7, #12]
}
 80075de:	bf00      	nop
 80075e0:	e7fe      	b.n	80075e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d902      	bls.n	80075f2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	61fb      	str	r3, [r7, #28]
 80075f0:	e002      	b.n	80075f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fc:	69fa      	ldr	r2, [r7, #28]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d04b      	beq.n	800769a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	429a      	cmp	r2, r3
 800760a:	d146      	bne.n	800769a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800760c:	4b25      	ldr	r3, [pc, #148]	; (80076a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	429a      	cmp	r2, r3
 8007614:	d10a      	bne.n	800762c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	60bb      	str	r3, [r7, #8]
}
 8007628:	bf00      	nop
 800762a:	e7fe      	b.n	800762a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007630:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	2b00      	cmp	r3, #0
 800763e:	db04      	blt.n	800764a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	6959      	ldr	r1, [r3, #20]
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	4613      	mov	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4a13      	ldr	r2, [pc, #76]	; (80076a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800765a:	4413      	add	r3, r2
 800765c:	4299      	cmp	r1, r3
 800765e:	d11c      	bne.n	800769a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	3304      	adds	r3, #4
 8007664:	4618      	mov	r0, r3
 8007666:	f7fd fcc9 	bl	8004ffc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766e:	4b0f      	ldr	r3, [pc, #60]	; (80076ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d903      	bls.n	800767e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767a:	4a0c      	ldr	r2, [pc, #48]	; (80076ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4a07      	ldr	r2, [pc, #28]	; (80076a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800768c:	441a      	add	r2, r3
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	3304      	adds	r3, #4
 8007692:	4619      	mov	r1, r3
 8007694:	4610      	mov	r0, r2
 8007696:	f7fd fc54 	bl	8004f42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800769a:	bf00      	nop
 800769c:	3720      	adds	r7, #32
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	20000998 	.word	0x20000998
 80076a8:	2000099c 	.word	0x2000099c
 80076ac:	20000e74 	.word	0x20000e74

080076b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80076b4:	4b07      	ldr	r3, [pc, #28]	; (80076d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d004      	beq.n	80076c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80076bc:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076c2:	3201      	adds	r2, #1
 80076c4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80076c6:	4b03      	ldr	r3, [pc, #12]	; (80076d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80076c8:	681b      	ldr	r3, [r3, #0]
	}
 80076ca:	4618      	mov	r0, r3
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	20000998 	.word	0x20000998

080076d8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
 80076e4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80076e6:	f000 feed 	bl	80084c4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80076ea:	4b29      	ldr	r3, [pc, #164]	; (8007790 <xTaskNotifyWait+0xb8>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d01c      	beq.n	8007732 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80076f8:	4b25      	ldr	r3, [pc, #148]	; (8007790 <xTaskNotifyWait+0xb8>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	43d2      	mvns	r2, r2
 8007704:	400a      	ands	r2, r1
 8007706:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800770a:	4b21      	ldr	r3, [pc, #132]	; (8007790 <xTaskNotifyWait+0xb8>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00b      	beq.n	8007732 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800771a:	2101      	movs	r1, #1
 800771c:	6838      	ldr	r0, [r7, #0]
 800771e:	f000 fa03 	bl	8007b28 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007722:	4b1c      	ldr	r3, [pc, #112]	; (8007794 <xTaskNotifyWait+0xbc>)
 8007724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007732:	f000 fef7 	bl	8008524 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007736:	f000 fec5 	bl	80084c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d005      	beq.n	800774c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007740:	4b13      	ldr	r3, [pc, #76]	; (8007790 <xTaskNotifyWait+0xb8>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800774c:	4b10      	ldr	r3, [pc, #64]	; (8007790 <xTaskNotifyWait+0xb8>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b02      	cmp	r3, #2
 8007758:	d002      	beq.n	8007760 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800775a:	2300      	movs	r3, #0
 800775c:	617b      	str	r3, [r7, #20]
 800775e:	e00a      	b.n	8007776 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007760:	4b0b      	ldr	r3, [pc, #44]	; (8007790 <xTaskNotifyWait+0xb8>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	43d2      	mvns	r2, r2
 800776c:	400a      	ands	r2, r1
 800776e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8007772:	2301      	movs	r3, #1
 8007774:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007776:	4b06      	ldr	r3, [pc, #24]	; (8007790 <xTaskNotifyWait+0xb8>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8007780:	f000 fed0 	bl	8008524 <vPortExitCritical>

		return xReturn;
 8007784:	697b      	ldr	r3, [r7, #20]
	}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	20000998 	.word	0x20000998
 8007794:	e000ed04 	.word	0xe000ed04

08007798 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007798:	b580      	push	{r7, lr}
 800779a:	b08a      	sub	sp, #40	; 0x28
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	4613      	mov	r3, r2
 80077a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80077a8:	2301      	movs	r3, #1
 80077aa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10a      	bne.n	80077c8 <xTaskGenericNotify+0x30>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	61bb      	str	r3, [r7, #24]
}
 80077c4:	bf00      	nop
 80077c6:	e7fe      	b.n	80077c6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80077cc:	f000 fe7a 	bl	80084c4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d004      	beq.n	80077e0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80077e6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80077f0:	79fb      	ldrb	r3, [r7, #7]
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d82d      	bhi.n	8007852 <xTaskGenericNotify+0xba>
 80077f6:	a201      	add	r2, pc, #4	; (adr r2, 80077fc <xTaskGenericNotify+0x64>)
 80077f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fc:	08007875 	.word	0x08007875
 8007800:	08007811 	.word	0x08007811
 8007804:	08007823 	.word	0x08007823
 8007808:	08007833 	.word	0x08007833
 800780c:	0800783d 	.word	0x0800783d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	431a      	orrs	r2, r3
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007820:	e02b      	b.n	800787a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007830:	e023      	b.n	800787a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800783a:	e01e      	b.n	800787a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800783c:	7ffb      	ldrb	r3, [r7, #31]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d004      	beq.n	800784c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800784a:	e016      	b.n	800787a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800784c:	2300      	movs	r3, #0
 800784e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8007850:	e013      	b.n	800787a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800785c:	d00c      	beq.n	8007878 <xTaskGenericNotify+0xe0>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	617b      	str	r3, [r7, #20]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <xTaskGenericNotify+0xda>
					break;
 8007874:	bf00      	nop
 8007876:	e000      	b.n	800787a <xTaskGenericNotify+0xe2>

					break;
 8007878:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800787a:	7ffb      	ldrb	r3, [r7, #31]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d13a      	bne.n	80078f6 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	3304      	adds	r3, #4
 8007884:	4618      	mov	r0, r3
 8007886:	f7fd fbb9 	bl	8004ffc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788e:	4b1d      	ldr	r3, [pc, #116]	; (8007904 <xTaskGenericNotify+0x16c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d903      	bls.n	800789e <xTaskGenericNotify+0x106>
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789a:	4a1a      	ldr	r2, [pc, #104]	; (8007904 <xTaskGenericNotify+0x16c>)
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a2:	4613      	mov	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4a17      	ldr	r2, [pc, #92]	; (8007908 <xTaskGenericNotify+0x170>)
 80078ac:	441a      	add	r2, r3
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	3304      	adds	r3, #4
 80078b2:	4619      	mov	r1, r3
 80078b4:	4610      	mov	r0, r2
 80078b6:	f7fd fb44 	bl	8004f42 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <xTaskGenericNotify+0x140>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	613b      	str	r3, [r7, #16]
}
 80078d4:	bf00      	nop
 80078d6:	e7fe      	b.n	80078d6 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078dc:	4b0b      	ldr	r3, [pc, #44]	; (800790c <xTaskGenericNotify+0x174>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d907      	bls.n	80078f6 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80078e6:	4b0a      	ldr	r3, [pc, #40]	; (8007910 <xTaskGenericNotify+0x178>)
 80078e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80078f6:	f000 fe15 	bl	8008524 <vPortExitCritical>

		return xReturn;
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3728      	adds	r7, #40	; 0x28
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	20000e74 	.word	0x20000e74
 8007908:	2000099c 	.word	0x2000099c
 800790c:	20000998 	.word	0x20000998
 8007910:	e000ed04 	.word	0xe000ed04

08007914 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007914:	b580      	push	{r7, lr}
 8007916:	b08e      	sub	sp, #56	; 0x38
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	4613      	mov	r3, r2
 8007922:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007924:	2301      	movs	r3, #1
 8007926:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10a      	bne.n	8007944 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007940:	bf00      	nop
 8007942:	e7fe      	b.n	8007942 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007944:	f000 fea0 	bl	8008688 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800794c:	f3ef 8211 	mrs	r2, BASEPRI
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	623a      	str	r2, [r7, #32]
 8007962:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007964:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007966:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d004      	beq.n	8007978 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800797e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007984:	2202      	movs	r2, #2
 8007986:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800798a:	79fb      	ldrb	r3, [r7, #7]
 800798c:	2b04      	cmp	r3, #4
 800798e:	d82f      	bhi.n	80079f0 <xTaskGenericNotifyFromISR+0xdc>
 8007990:	a201      	add	r2, pc, #4	; (adr r2, 8007998 <xTaskGenericNotifyFromISR+0x84>)
 8007992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007996:	bf00      	nop
 8007998:	08007a13 	.word	0x08007a13
 800799c:	080079ad 	.word	0x080079ad
 80079a0:	080079bf 	.word	0x080079bf
 80079a4:	080079cf 	.word	0x080079cf
 80079a8:	080079d9 	.word	0x080079d9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	431a      	orrs	r2, r3
 80079b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80079bc:	e02c      	b.n	8007a18 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80079cc:	e024      	b.n	8007a18 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80079d6:	e01f      	b.n	8007a18 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80079d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d004      	beq.n	80079ea <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80079e8:	e016      	b.n	8007a18 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80079ea:	2300      	movs	r3, #0
 80079ec:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80079ee:	e013      	b.n	8007a18 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80079f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079fa:	d00c      	beq.n	8007a16 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	61bb      	str	r3, [r7, #24]
}
 8007a0e:	bf00      	nop
 8007a10:	e7fe      	b.n	8007a10 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8007a12:	bf00      	nop
 8007a14:	e000      	b.n	8007a18 <xTaskGenericNotifyFromISR+0x104>
					break;
 8007a16:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007a18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d146      	bne.n	8007aae <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00a      	beq.n	8007a3e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	617b      	str	r3, [r7, #20]
}
 8007a3a:	bf00      	nop
 8007a3c:	e7fe      	b.n	8007a3c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a3e:	4b21      	ldr	r3, [pc, #132]	; (8007ac4 <xTaskGenericNotifyFromISR+0x1b0>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d11d      	bne.n	8007a82 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	3304      	adds	r3, #4
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fd fad6 	bl	8004ffc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a54:	4b1c      	ldr	r3, [pc, #112]	; (8007ac8 <xTaskGenericNotifyFromISR+0x1b4>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d903      	bls.n	8007a64 <xTaskGenericNotifyFromISR+0x150>
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a60:	4a19      	ldr	r2, [pc, #100]	; (8007ac8 <xTaskGenericNotifyFromISR+0x1b4>)
 8007a62:	6013      	str	r3, [r2, #0]
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a68:	4613      	mov	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4a16      	ldr	r2, [pc, #88]	; (8007acc <xTaskGenericNotifyFromISR+0x1b8>)
 8007a72:	441a      	add	r2, r3
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	3304      	adds	r3, #4
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	f7fd fa61 	bl	8004f42 <vListInsertEnd>
 8007a80:	e005      	b.n	8007a8e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	3318      	adds	r3, #24
 8007a86:	4619      	mov	r1, r3
 8007a88:	4811      	ldr	r0, [pc, #68]	; (8007ad0 <xTaskGenericNotifyFromISR+0x1bc>)
 8007a8a:	f7fd fa5a 	bl	8004f42 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a92:	4b10      	ldr	r3, [pc, #64]	; (8007ad4 <xTaskGenericNotifyFromISR+0x1c0>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d908      	bls.n	8007aae <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007aa8:	4b0b      	ldr	r3, [pc, #44]	; (8007ad8 <xTaskGenericNotifyFromISR+0x1c4>)
 8007aaa:	2201      	movs	r2, #1
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f383 8811 	msr	BASEPRI, r3
}
 8007ab8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3738      	adds	r7, #56	; 0x38
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	20000e94 	.word	0x20000e94
 8007ac8:	20000e74 	.word	0x20000e74
 8007acc:	2000099c 	.word	0x2000099c
 8007ad0:	20000e2c 	.word	0x20000e2c
 8007ad4:	20000998 	.word	0x20000998
 8007ad8:	20000e80 	.word	0x20000e80

08007adc <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d102      	bne.n	8007af0 <xTaskNotifyStateClear+0x14>
 8007aea:	4b0e      	ldr	r3, [pc, #56]	; (8007b24 <xTaskNotifyStateClear+0x48>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	e000      	b.n	8007af2 <xTaskNotifyStateClear+0x16>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8007af4:	f000 fce6 	bl	80084c4 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d106      	bne.n	8007b12 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	e001      	b.n	8007b16 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8007b16:	f000 fd05 	bl	8008524 <vPortExitCritical>

		return xReturn;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
	}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	20000998 	.word	0x20000998

08007b28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b32:	4b21      	ldr	r3, [pc, #132]	; (8007bb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b38:	4b20      	ldr	r3, [pc, #128]	; (8007bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fd fa5c 	bl	8004ffc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b4a:	d10a      	bne.n	8007b62 <prvAddCurrentTaskToDelayedList+0x3a>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d007      	beq.n	8007b62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b52:	4b1a      	ldr	r3, [pc, #104]	; (8007bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3304      	adds	r3, #4
 8007b58:	4619      	mov	r1, r3
 8007b5a:	4819      	ldr	r0, [pc, #100]	; (8007bc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007b5c:	f7fd f9f1 	bl	8004f42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b60:	e026      	b.n	8007bb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4413      	add	r3, r2
 8007b68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b6a:	4b14      	ldr	r3, [pc, #80]	; (8007bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d209      	bcs.n	8007b8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b7a:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	4b0f      	ldr	r3, [pc, #60]	; (8007bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3304      	adds	r3, #4
 8007b84:	4619      	mov	r1, r3
 8007b86:	4610      	mov	r0, r2
 8007b88:	f7fd f9ff 	bl	8004f8a <vListInsert>
}
 8007b8c:	e010      	b.n	8007bb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b8e:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	4b0a      	ldr	r3, [pc, #40]	; (8007bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3304      	adds	r3, #4
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	f7fd f9f5 	bl	8004f8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ba0:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d202      	bcs.n	8007bb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007baa:	4a08      	ldr	r2, [pc, #32]	; (8007bcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	6013      	str	r3, [r2, #0]
}
 8007bb0:	bf00      	nop
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	20000e70 	.word	0x20000e70
 8007bbc:	20000998 	.word	0x20000998
 8007bc0:	20000e58 	.word	0x20000e58
 8007bc4:	20000e28 	.word	0x20000e28
 8007bc8:	20000e24 	.word	0x20000e24
 8007bcc:	20000e8c 	.word	0x20000e8c

08007bd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08a      	sub	sp, #40	; 0x28
 8007bd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007bda:	f000 fb07 	bl	80081ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007bde:	4b1c      	ldr	r3, [pc, #112]	; (8007c50 <xTimerCreateTimerTask+0x80>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d021      	beq.n	8007c2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007bee:	1d3a      	adds	r2, r7, #4
 8007bf0:	f107 0108 	add.w	r1, r7, #8
 8007bf4:	f107 030c 	add.w	r3, r7, #12
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fd f95b 	bl	8004eb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007bfe:	6879      	ldr	r1, [r7, #4]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	9202      	str	r2, [sp, #8]
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	2302      	movs	r3, #2
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	460a      	mov	r2, r1
 8007c10:	4910      	ldr	r1, [pc, #64]	; (8007c54 <xTimerCreateTimerTask+0x84>)
 8007c12:	4811      	ldr	r0, [pc, #68]	; (8007c58 <xTimerCreateTimerTask+0x88>)
 8007c14:	f7fe fd58 	bl	80066c8 <xTaskCreateStatic>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	4a10      	ldr	r2, [pc, #64]	; (8007c5c <xTimerCreateTimerTask+0x8c>)
 8007c1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c1e:	4b0f      	ldr	r3, [pc, #60]	; (8007c5c <xTimerCreateTimerTask+0x8c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c26:	2301      	movs	r3, #1
 8007c28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10a      	bne.n	8007c46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	613b      	str	r3, [r7, #16]
}
 8007c42:	bf00      	nop
 8007c44:	e7fe      	b.n	8007c44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007c46:	697b      	ldr	r3, [r7, #20]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	20000ec8 	.word	0x20000ec8
 8007c54:	080095a4 	.word	0x080095a4
 8007c58:	08007d95 	.word	0x08007d95
 8007c5c:	20000ecc 	.word	0x20000ecc

08007c60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08a      	sub	sp, #40	; 0x28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10a      	bne.n	8007c8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	623b      	str	r3, [r7, #32]
}
 8007c8a:	bf00      	nop
 8007c8c:	e7fe      	b.n	8007c8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c8e:	4b1a      	ldr	r3, [pc, #104]	; (8007cf8 <xTimerGenericCommand+0x98>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d02a      	beq.n	8007cec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2b05      	cmp	r3, #5
 8007ca6:	dc18      	bgt.n	8007cda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ca8:	f7ff fb8c 	bl	80073c4 <xTaskGetSchedulerState>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d109      	bne.n	8007cc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007cb2:	4b11      	ldr	r3, [pc, #68]	; (8007cf8 <xTimerGenericCommand+0x98>)
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	f107 0110 	add.w	r1, r7, #16
 8007cba:	2300      	movs	r3, #0
 8007cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cbe:	f7fd fbbb 	bl	8005438 <xQueueGenericSend>
 8007cc2:	6278      	str	r0, [r7, #36]	; 0x24
 8007cc4:	e012      	b.n	8007cec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007cc6:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <xTimerGenericCommand+0x98>)
 8007cc8:	6818      	ldr	r0, [r3, #0]
 8007cca:	f107 0110 	add.w	r1, r7, #16
 8007cce:	2300      	movs	r3, #0
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f7fd fbb1 	bl	8005438 <xQueueGenericSend>
 8007cd6:	6278      	str	r0, [r7, #36]	; 0x24
 8007cd8:	e008      	b.n	8007cec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007cda:	4b07      	ldr	r3, [pc, #28]	; (8007cf8 <xTimerGenericCommand+0x98>)
 8007cdc:	6818      	ldr	r0, [r3, #0]
 8007cde:	f107 0110 	add.w	r1, r7, #16
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	f7fd fca5 	bl	8005634 <xQueueGenericSendFromISR>
 8007cea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3728      	adds	r7, #40	; 0x28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20000ec8 	.word	0x20000ec8

08007cfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d06:	4b22      	ldr	r3, [pc, #136]	; (8007d90 <prvProcessExpiredTimer+0x94>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	3304      	adds	r3, #4
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fd f971 	bl	8004ffc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d022      	beq.n	8007d6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	699a      	ldr	r2, [r3, #24]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	18d1      	adds	r1, r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	6978      	ldr	r0, [r7, #20]
 8007d36:	f000 f8d1 	bl	8007edc <prvInsertTimerInActiveList>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d01f      	beq.n	8007d80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d40:	2300      	movs	r3, #0
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	2300      	movs	r3, #0
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	2100      	movs	r1, #0
 8007d4a:	6978      	ldr	r0, [r7, #20]
 8007d4c:	f7ff ff88 	bl	8007c60 <xTimerGenericCommand>
 8007d50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d113      	bne.n	8007d80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	60fb      	str	r3, [r7, #12]
}
 8007d6a:	bf00      	nop
 8007d6c:	e7fe      	b.n	8007d6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d74:	f023 0301 	bic.w	r3, r3, #1
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	6978      	ldr	r0, [r7, #20]
 8007d86:	4798      	blx	r3
}
 8007d88:	bf00      	nop
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	20000ec0 	.word	0x20000ec0

08007d94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d9c:	f107 0308 	add.w	r3, r7, #8
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 f857 	bl	8007e54 <prvGetNextExpireTime>
 8007da6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	4619      	mov	r1, r3
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 f803 	bl	8007db8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007db2:	f000 f8d5 	bl	8007f60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007db6:	e7f1      	b.n	8007d9c <prvTimerTask+0x8>

08007db8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007dc2:	f7fe fedd 	bl	8006b80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007dc6:	f107 0308 	add.w	r3, r7, #8
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 f866 	bl	8007e9c <prvSampleTimeNow>
 8007dd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d130      	bne.n	8007e3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10a      	bne.n	8007df4 <prvProcessTimerOrBlockTask+0x3c>
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d806      	bhi.n	8007df4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007de6:	f7fe fed9 	bl	8006b9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007dea:	68f9      	ldr	r1, [r7, #12]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7ff ff85 	bl	8007cfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007df2:	e024      	b.n	8007e3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d008      	beq.n	8007e0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007dfa:	4b13      	ldr	r3, [pc, #76]	; (8007e48 <prvProcessTimerOrBlockTask+0x90>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <prvProcessTimerOrBlockTask+0x50>
 8007e04:	2301      	movs	r3, #1
 8007e06:	e000      	b.n	8007e0a <prvProcessTimerOrBlockTask+0x52>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e0c:	4b0f      	ldr	r3, [pc, #60]	; (8007e4c <prvProcessTimerOrBlockTask+0x94>)
 8007e0e:	6818      	ldr	r0, [r3, #0]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	f7fd ffe5 	bl	8005de8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e1e:	f7fe febd 	bl	8006b9c <xTaskResumeAll>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10a      	bne.n	8007e3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e28:	4b09      	ldr	r3, [pc, #36]	; (8007e50 <prvProcessTimerOrBlockTask+0x98>)
 8007e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	f3bf 8f6f 	isb	sy
}
 8007e38:	e001      	b.n	8007e3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e3a:	f7fe feaf 	bl	8006b9c <xTaskResumeAll>
}
 8007e3e:	bf00      	nop
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000ec4 	.word	0x20000ec4
 8007e4c:	20000ec8 	.word	0x20000ec8
 8007e50:	e000ed04 	.word	0xe000ed04

08007e54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e5c:	4b0e      	ldr	r3, [pc, #56]	; (8007e98 <prvGetNextExpireTime+0x44>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <prvGetNextExpireTime+0x16>
 8007e66:	2201      	movs	r2, #1
 8007e68:	e000      	b.n	8007e6c <prvGetNextExpireTime+0x18>
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d105      	bne.n	8007e84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e78:	4b07      	ldr	r3, [pc, #28]	; (8007e98 <prvGetNextExpireTime+0x44>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	60fb      	str	r3, [r7, #12]
 8007e82:	e001      	b.n	8007e88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e88:	68fb      	ldr	r3, [r7, #12]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	20000ec0 	.word	0x20000ec0

08007e9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ea4:	f7fe ff18 	bl	8006cd8 <xTaskGetTickCount>
 8007ea8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007eaa:	4b0b      	ldr	r3, [pc, #44]	; (8007ed8 <prvSampleTimeNow+0x3c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d205      	bcs.n	8007ec0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007eb4:	f000 f936 	bl	8008124 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	e002      	b.n	8007ec6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ec6:	4a04      	ldr	r2, [pc, #16]	; (8007ed8 <prvSampleTimeNow+0x3c>)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	20000ed0 	.word	0x20000ed0

08007edc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
 8007ee8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007eea:	2300      	movs	r3, #0
 8007eec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d812      	bhi.n	8007f28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	1ad2      	subs	r2, r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d302      	bcc.n	8007f16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f10:	2301      	movs	r3, #1
 8007f12:	617b      	str	r3, [r7, #20]
 8007f14:	e01b      	b.n	8007f4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f16:	4b10      	ldr	r3, [pc, #64]	; (8007f58 <prvInsertTimerInActiveList+0x7c>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4610      	mov	r0, r2
 8007f22:	f7fd f832 	bl	8004f8a <vListInsert>
 8007f26:	e012      	b.n	8007f4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d206      	bcs.n	8007f3e <prvInsertTimerInActiveList+0x62>
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d302      	bcc.n	8007f3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	e007      	b.n	8007f4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f3e:	4b07      	ldr	r3, [pc, #28]	; (8007f5c <prvInsertTimerInActiveList+0x80>)
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3304      	adds	r3, #4
 8007f46:	4619      	mov	r1, r3
 8007f48:	4610      	mov	r0, r2
 8007f4a:	f7fd f81e 	bl	8004f8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f4e:	697b      	ldr	r3, [r7, #20]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	20000ec4 	.word	0x20000ec4
 8007f5c:	20000ec0 	.word	0x20000ec0

08007f60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b08e      	sub	sp, #56	; 0x38
 8007f64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f66:	e0ca      	b.n	80080fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	da18      	bge.n	8007fa0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f6e:	1d3b      	adds	r3, r7, #4
 8007f70:	3304      	adds	r3, #4
 8007f72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10a      	bne.n	8007f90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7e:	f383 8811 	msr	BASEPRI, r3
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	61fb      	str	r3, [r7, #28]
}
 8007f8c:	bf00      	nop
 8007f8e:	e7fe      	b.n	8007f8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f96:	6850      	ldr	r0, [r2, #4]
 8007f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f9a:	6892      	ldr	r2, [r2, #8]
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f2c0 80aa 	blt.w	80080fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d004      	beq.n	8007fbe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fd f81f 	bl	8004ffc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fbe:	463b      	mov	r3, r7
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7ff ff6b 	bl	8007e9c <prvSampleTimeNow>
 8007fc6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b09      	cmp	r3, #9
 8007fcc:	f200 8097 	bhi.w	80080fe <prvProcessReceivedCommands+0x19e>
 8007fd0:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <prvProcessReceivedCommands+0x78>)
 8007fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd6:	bf00      	nop
 8007fd8:	08008001 	.word	0x08008001
 8007fdc:	08008001 	.word	0x08008001
 8007fe0:	08008001 	.word	0x08008001
 8007fe4:	08008075 	.word	0x08008075
 8007fe8:	08008089 	.word	0x08008089
 8007fec:	080080d3 	.word	0x080080d3
 8007ff0:	08008001 	.word	0x08008001
 8007ff4:	08008001 	.word	0x08008001
 8007ff8:	08008075 	.word	0x08008075
 8007ffc:	08008089 	.word	0x08008089
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008006:	f043 0301 	orr.w	r3, r3, #1
 800800a:	b2da      	uxtb	r2, r3
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	18d1      	adds	r1, r2, r3
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800801e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008020:	f7ff ff5c 	bl	8007edc <prvInsertTimerInActiveList>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d069      	beq.n	80080fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008030:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b00      	cmp	r3, #0
 800803e:	d05e      	beq.n	80080fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	441a      	add	r2, r3
 8008048:	2300      	movs	r3, #0
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	2300      	movs	r3, #0
 800804e:	2100      	movs	r1, #0
 8008050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008052:	f7ff fe05 	bl	8007c60 <xTimerGenericCommand>
 8008056:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d14f      	bne.n	80080fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	61bb      	str	r3, [r7, #24]
}
 8008070:	bf00      	nop
 8008072:	e7fe      	b.n	8008072 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800807a:	f023 0301 	bic.w	r3, r3, #1
 800807e:	b2da      	uxtb	r2, r3
 8008080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008086:	e03a      	b.n	80080fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800808e:	f043 0301 	orr.w	r3, r3, #1
 8008092:	b2da      	uxtb	r2, r3
 8008094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80080a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10a      	bne.n	80080be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	617b      	str	r3, [r7, #20]
}
 80080ba:	bf00      	nop
 80080bc:	e7fe      	b.n	80080bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80080be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	18d1      	adds	r1, r2, r3
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080cc:	f7ff ff06 	bl	8007edc <prvInsertTimerInActiveList>
					break;
 80080d0:	e015      	b.n	80080fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80080d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080d8:	f003 0302 	and.w	r3, r3, #2
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d103      	bne.n	80080e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80080e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080e2:	f000 fbdd 	bl	80088a0 <vPortFree>
 80080e6:	e00a      	b.n	80080fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080ee:	f023 0301 	bic.w	r3, r3, #1
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80080fa:	e000      	b.n	80080fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80080fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080fe:	4b08      	ldr	r3, [pc, #32]	; (8008120 <prvProcessReceivedCommands+0x1c0>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	1d39      	adds	r1, r7, #4
 8008104:	2200      	movs	r2, #0
 8008106:	4618      	mov	r0, r3
 8008108:	f7fd fb30 	bl	800576c <xQueueReceive>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	f47f af2a 	bne.w	8007f68 <prvProcessReceivedCommands+0x8>
	}
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop
 8008118:	3730      	adds	r7, #48	; 0x30
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	20000ec8 	.word	0x20000ec8

08008124 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b088      	sub	sp, #32
 8008128:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800812a:	e048      	b.n	80081be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800812c:	4b2d      	ldr	r3, [pc, #180]	; (80081e4 <prvSwitchTimerLists+0xc0>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008136:	4b2b      	ldr	r3, [pc, #172]	; (80081e4 <prvSwitchTimerLists+0xc0>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	3304      	adds	r3, #4
 8008144:	4618      	mov	r0, r3
 8008146:	f7fc ff59 	bl	8004ffc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008158:	f003 0304 	and.w	r3, r3, #4
 800815c:	2b00      	cmp	r3, #0
 800815e:	d02e      	beq.n	80081be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	4413      	add	r3, r2
 8008168:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	429a      	cmp	r2, r3
 8008170:	d90e      	bls.n	8008190 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800817e:	4b19      	ldr	r3, [pc, #100]	; (80081e4 <prvSwitchTimerLists+0xc0>)
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3304      	adds	r3, #4
 8008186:	4619      	mov	r1, r3
 8008188:	4610      	mov	r0, r2
 800818a:	f7fc fefe 	bl	8004f8a <vListInsert>
 800818e:	e016      	b.n	80081be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008190:	2300      	movs	r3, #0
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	2300      	movs	r3, #0
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	2100      	movs	r1, #0
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f7ff fd60 	bl	8007c60 <xTimerGenericCommand>
 80081a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10a      	bne.n	80081be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80081a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	603b      	str	r3, [r7, #0]
}
 80081ba:	bf00      	nop
 80081bc:	e7fe      	b.n	80081bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081be:	4b09      	ldr	r3, [pc, #36]	; (80081e4 <prvSwitchTimerLists+0xc0>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1b1      	bne.n	800812c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80081c8:	4b06      	ldr	r3, [pc, #24]	; (80081e4 <prvSwitchTimerLists+0xc0>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80081ce:	4b06      	ldr	r3, [pc, #24]	; (80081e8 <prvSwitchTimerLists+0xc4>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a04      	ldr	r2, [pc, #16]	; (80081e4 <prvSwitchTimerLists+0xc0>)
 80081d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80081d6:	4a04      	ldr	r2, [pc, #16]	; (80081e8 <prvSwitchTimerLists+0xc4>)
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	6013      	str	r3, [r2, #0]
}
 80081dc:	bf00      	nop
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	20000ec0 	.word	0x20000ec0
 80081e8:	20000ec4 	.word	0x20000ec4

080081ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80081f2:	f000 f967 	bl	80084c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80081f6:	4b15      	ldr	r3, [pc, #84]	; (800824c <prvCheckForValidListAndQueue+0x60>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d120      	bne.n	8008240 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80081fe:	4814      	ldr	r0, [pc, #80]	; (8008250 <prvCheckForValidListAndQueue+0x64>)
 8008200:	f7fc fe72 	bl	8004ee8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008204:	4813      	ldr	r0, [pc, #76]	; (8008254 <prvCheckForValidListAndQueue+0x68>)
 8008206:	f7fc fe6f 	bl	8004ee8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800820a:	4b13      	ldr	r3, [pc, #76]	; (8008258 <prvCheckForValidListAndQueue+0x6c>)
 800820c:	4a10      	ldr	r2, [pc, #64]	; (8008250 <prvCheckForValidListAndQueue+0x64>)
 800820e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008210:	4b12      	ldr	r3, [pc, #72]	; (800825c <prvCheckForValidListAndQueue+0x70>)
 8008212:	4a10      	ldr	r2, [pc, #64]	; (8008254 <prvCheckForValidListAndQueue+0x68>)
 8008214:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008216:	2300      	movs	r3, #0
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	4b11      	ldr	r3, [pc, #68]	; (8008260 <prvCheckForValidListAndQueue+0x74>)
 800821c:	4a11      	ldr	r2, [pc, #68]	; (8008264 <prvCheckForValidListAndQueue+0x78>)
 800821e:	2110      	movs	r1, #16
 8008220:	200a      	movs	r0, #10
 8008222:	f7fc ff7d 	bl	8005120 <xQueueGenericCreateStatic>
 8008226:	4603      	mov	r3, r0
 8008228:	4a08      	ldr	r2, [pc, #32]	; (800824c <prvCheckForValidListAndQueue+0x60>)
 800822a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800822c:	4b07      	ldr	r3, [pc, #28]	; (800824c <prvCheckForValidListAndQueue+0x60>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d005      	beq.n	8008240 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008234:	4b05      	ldr	r3, [pc, #20]	; (800824c <prvCheckForValidListAndQueue+0x60>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	490b      	ldr	r1, [pc, #44]	; (8008268 <prvCheckForValidListAndQueue+0x7c>)
 800823a:	4618      	mov	r0, r3
 800823c:	f7fd fdaa 	bl	8005d94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008240:	f000 f970 	bl	8008524 <vPortExitCritical>
}
 8008244:	bf00      	nop
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20000ec8 	.word	0x20000ec8
 8008250:	20000e98 	.word	0x20000e98
 8008254:	20000eac 	.word	0x20000eac
 8008258:	20000ec0 	.word	0x20000ec0
 800825c:	20000ec4 	.word	0x20000ec4
 8008260:	20000f74 	.word	0x20000f74
 8008264:	20000ed4 	.word	0x20000ed4
 8008268:	080095ac 	.word	0x080095ac

0800826c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	3b04      	subs	r3, #4
 800827c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008284:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	3b04      	subs	r3, #4
 800828a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f023 0201 	bic.w	r2, r3, #1
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	3b04      	subs	r3, #4
 800829a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800829c:	4a0c      	ldr	r2, [pc, #48]	; (80082d0 <pxPortInitialiseStack+0x64>)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	3b14      	subs	r3, #20
 80082a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3b04      	subs	r3, #4
 80082b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f06f 0202 	mvn.w	r2, #2
 80082ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	3b20      	subs	r3, #32
 80082c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082c2:	68fb      	ldr	r3, [r7, #12]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	080082d5 	.word	0x080082d5

080082d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80082da:	2300      	movs	r3, #0
 80082dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80082de:	4b12      	ldr	r3, [pc, #72]	; (8008328 <prvTaskExitError+0x54>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082e6:	d00a      	beq.n	80082fe <prvTaskExitError+0x2a>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	60fb      	str	r3, [r7, #12]
}
 80082fa:	bf00      	nop
 80082fc:	e7fe      	b.n	80082fc <prvTaskExitError+0x28>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	60bb      	str	r3, [r7, #8]
}
 8008310:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008312:	bf00      	nop
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d0fc      	beq.n	8008314 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800831a:	bf00      	nop
 800831c:	bf00      	nop
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	2000000c 	.word	0x2000000c
 800832c:	00000000 	.word	0x00000000

08008330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008330:	4b07      	ldr	r3, [pc, #28]	; (8008350 <pxCurrentTCBConst2>)
 8008332:	6819      	ldr	r1, [r3, #0]
 8008334:	6808      	ldr	r0, [r1, #0]
 8008336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833a:	f380 8809 	msr	PSP, r0
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	f04f 0000 	mov.w	r0, #0
 8008346:	f380 8811 	msr	BASEPRI, r0
 800834a:	4770      	bx	lr
 800834c:	f3af 8000 	nop.w

08008350 <pxCurrentTCBConst2>:
 8008350:	20000998 	.word	0x20000998
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008354:	bf00      	nop
 8008356:	bf00      	nop

08008358 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008358:	4808      	ldr	r0, [pc, #32]	; (800837c <prvPortStartFirstTask+0x24>)
 800835a:	6800      	ldr	r0, [r0, #0]
 800835c:	6800      	ldr	r0, [r0, #0]
 800835e:	f380 8808 	msr	MSP, r0
 8008362:	f04f 0000 	mov.w	r0, #0
 8008366:	f380 8814 	msr	CONTROL, r0
 800836a:	b662      	cpsie	i
 800836c:	b661      	cpsie	f
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	df00      	svc	0
 8008378:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800837a:	bf00      	nop
 800837c:	e000ed08 	.word	0xe000ed08

08008380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008386:	4b46      	ldr	r3, [pc, #280]	; (80084a0 <xPortStartScheduler+0x120>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a46      	ldr	r2, [pc, #280]	; (80084a4 <xPortStartScheduler+0x124>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d10a      	bne.n	80083a6 <xPortStartScheduler+0x26>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	613b      	str	r3, [r7, #16]
}
 80083a2:	bf00      	nop
 80083a4:	e7fe      	b.n	80083a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80083a6:	4b3e      	ldr	r3, [pc, #248]	; (80084a0 <xPortStartScheduler+0x120>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a3f      	ldr	r2, [pc, #252]	; (80084a8 <xPortStartScheduler+0x128>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d10a      	bne.n	80083c6 <xPortStartScheduler+0x46>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	60fb      	str	r3, [r7, #12]
}
 80083c2:	bf00      	nop
 80083c4:	e7fe      	b.n	80083c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80083c6:	4b39      	ldr	r3, [pc, #228]	; (80084ac <xPortStartScheduler+0x12c>)
 80083c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	22ff      	movs	r2, #255	; 0xff
 80083d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083e0:	78fb      	ldrb	r3, [r7, #3]
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80083e8:	b2da      	uxtb	r2, r3
 80083ea:	4b31      	ldr	r3, [pc, #196]	; (80084b0 <xPortStartScheduler+0x130>)
 80083ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083ee:	4b31      	ldr	r3, [pc, #196]	; (80084b4 <xPortStartScheduler+0x134>)
 80083f0:	2207      	movs	r2, #7
 80083f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083f4:	e009      	b.n	800840a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80083f6:	4b2f      	ldr	r3, [pc, #188]	; (80084b4 <xPortStartScheduler+0x134>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3b01      	subs	r3, #1
 80083fc:	4a2d      	ldr	r2, [pc, #180]	; (80084b4 <xPortStartScheduler+0x134>)
 80083fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008400:	78fb      	ldrb	r3, [r7, #3]
 8008402:	b2db      	uxtb	r3, r3
 8008404:	005b      	lsls	r3, r3, #1
 8008406:	b2db      	uxtb	r3, r3
 8008408:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800840a:	78fb      	ldrb	r3, [r7, #3]
 800840c:	b2db      	uxtb	r3, r3
 800840e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008412:	2b80      	cmp	r3, #128	; 0x80
 8008414:	d0ef      	beq.n	80083f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008416:	4b27      	ldr	r3, [pc, #156]	; (80084b4 <xPortStartScheduler+0x134>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f1c3 0307 	rsb	r3, r3, #7
 800841e:	2b04      	cmp	r3, #4
 8008420:	d00a      	beq.n	8008438 <xPortStartScheduler+0xb8>
	__asm volatile
 8008422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008426:	f383 8811 	msr	BASEPRI, r3
 800842a:	f3bf 8f6f 	isb	sy
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	60bb      	str	r3, [r7, #8]
}
 8008434:	bf00      	nop
 8008436:	e7fe      	b.n	8008436 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008438:	4b1e      	ldr	r3, [pc, #120]	; (80084b4 <xPortStartScheduler+0x134>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	021b      	lsls	r3, r3, #8
 800843e:	4a1d      	ldr	r2, [pc, #116]	; (80084b4 <xPortStartScheduler+0x134>)
 8008440:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008442:	4b1c      	ldr	r3, [pc, #112]	; (80084b4 <xPortStartScheduler+0x134>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800844a:	4a1a      	ldr	r2, [pc, #104]	; (80084b4 <xPortStartScheduler+0x134>)
 800844c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	b2da      	uxtb	r2, r3
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008456:	4b18      	ldr	r3, [pc, #96]	; (80084b8 <xPortStartScheduler+0x138>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a17      	ldr	r2, [pc, #92]	; (80084b8 <xPortStartScheduler+0x138>)
 800845c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008460:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008462:	4b15      	ldr	r3, [pc, #84]	; (80084b8 <xPortStartScheduler+0x138>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a14      	ldr	r2, [pc, #80]	; (80084b8 <xPortStartScheduler+0x138>)
 8008468:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800846c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800846e:	f000 f8dd 	bl	800862c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008472:	4b12      	ldr	r3, [pc, #72]	; (80084bc <xPortStartScheduler+0x13c>)
 8008474:	2200      	movs	r2, #0
 8008476:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008478:	f000 f8fc 	bl	8008674 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800847c:	4b10      	ldr	r3, [pc, #64]	; (80084c0 <xPortStartScheduler+0x140>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a0f      	ldr	r2, [pc, #60]	; (80084c0 <xPortStartScheduler+0x140>)
 8008482:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008486:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008488:	f7ff ff66 	bl	8008358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800848c:	f7fe fcee 	bl	8006e6c <vTaskSwitchContext>
	prvTaskExitError();
 8008490:	f7ff ff20 	bl	80082d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3718      	adds	r7, #24
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	e000ed00 	.word	0xe000ed00
 80084a4:	410fc271 	.word	0x410fc271
 80084a8:	410fc270 	.word	0x410fc270
 80084ac:	e000e400 	.word	0xe000e400
 80084b0:	20000fc4 	.word	0x20000fc4
 80084b4:	20000fc8 	.word	0x20000fc8
 80084b8:	e000ed20 	.word	0xe000ed20
 80084bc:	2000000c 	.word	0x2000000c
 80084c0:	e000ef34 	.word	0xe000ef34

080084c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ce:	f383 8811 	msr	BASEPRI, r3
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	607b      	str	r3, [r7, #4]
}
 80084dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084de:	4b0f      	ldr	r3, [pc, #60]	; (800851c <vPortEnterCritical+0x58>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	3301      	adds	r3, #1
 80084e4:	4a0d      	ldr	r2, [pc, #52]	; (800851c <vPortEnterCritical+0x58>)
 80084e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80084e8:	4b0c      	ldr	r3, [pc, #48]	; (800851c <vPortEnterCritical+0x58>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d10f      	bne.n	8008510 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80084f0:	4b0b      	ldr	r3, [pc, #44]	; (8008520 <vPortEnterCritical+0x5c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <vPortEnterCritical+0x4c>
	__asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	603b      	str	r3, [r7, #0]
}
 800850c:	bf00      	nop
 800850e:	e7fe      	b.n	800850e <vPortEnterCritical+0x4a>
	}
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	2000000c 	.word	0x2000000c
 8008520:	e000ed04 	.word	0xe000ed04

08008524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800852a:	4b12      	ldr	r3, [pc, #72]	; (8008574 <vPortExitCritical+0x50>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10a      	bne.n	8008548 <vPortExitCritical+0x24>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	607b      	str	r3, [r7, #4]
}
 8008544:	bf00      	nop
 8008546:	e7fe      	b.n	8008546 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008548:	4b0a      	ldr	r3, [pc, #40]	; (8008574 <vPortExitCritical+0x50>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3b01      	subs	r3, #1
 800854e:	4a09      	ldr	r2, [pc, #36]	; (8008574 <vPortExitCritical+0x50>)
 8008550:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008552:	4b08      	ldr	r3, [pc, #32]	; (8008574 <vPortExitCritical+0x50>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d105      	bne.n	8008566 <vPortExitCritical+0x42>
 800855a:	2300      	movs	r3, #0
 800855c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	f383 8811 	msr	BASEPRI, r3
}
 8008564:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008566:	bf00      	nop
 8008568:	370c      	adds	r7, #12
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	2000000c 	.word	0x2000000c
	...

08008580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008580:	f3ef 8009 	mrs	r0, PSP
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	4b15      	ldr	r3, [pc, #84]	; (80085e0 <pxCurrentTCBConst>)
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	f01e 0f10 	tst.w	lr, #16
 8008590:	bf08      	it	eq
 8008592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800859a:	6010      	str	r0, [r2, #0]
 800859c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80085a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80085a4:	f380 8811 	msr	BASEPRI, r0
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f7fe fc5c 	bl	8006e6c <vTaskSwitchContext>
 80085b4:	f04f 0000 	mov.w	r0, #0
 80085b8:	f380 8811 	msr	BASEPRI, r0
 80085bc:	bc09      	pop	{r0, r3}
 80085be:	6819      	ldr	r1, [r3, #0]
 80085c0:	6808      	ldr	r0, [r1, #0]
 80085c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c6:	f01e 0f10 	tst.w	lr, #16
 80085ca:	bf08      	it	eq
 80085cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80085d0:	f380 8809 	msr	PSP, r0
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	f3af 8000 	nop.w

080085e0 <pxCurrentTCBConst>:
 80085e0:	20000998 	.word	0x20000998
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085e4:	bf00      	nop
 80085e6:	bf00      	nop

080085e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	607b      	str	r3, [r7, #4]
}
 8008600:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008602:	f7fe fb79 	bl	8006cf8 <xTaskIncrementTick>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d003      	beq.n	8008614 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800860c:	4b06      	ldr	r3, [pc, #24]	; (8008628 <xPortSysTickHandler+0x40>)
 800860e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	2300      	movs	r3, #0
 8008616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	f383 8811 	msr	BASEPRI, r3
}
 800861e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008620:	bf00      	nop
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	e000ed04 	.word	0xe000ed04

0800862c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800862c:	b480      	push	{r7}
 800862e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008630:	4b0b      	ldr	r3, [pc, #44]	; (8008660 <vPortSetupTimerInterrupt+0x34>)
 8008632:	2200      	movs	r2, #0
 8008634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008636:	4b0b      	ldr	r3, [pc, #44]	; (8008664 <vPortSetupTimerInterrupt+0x38>)
 8008638:	2200      	movs	r2, #0
 800863a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800863c:	4b0a      	ldr	r3, [pc, #40]	; (8008668 <vPortSetupTimerInterrupt+0x3c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a0a      	ldr	r2, [pc, #40]	; (800866c <vPortSetupTimerInterrupt+0x40>)
 8008642:	fba2 2303 	umull	r2, r3, r2, r3
 8008646:	099b      	lsrs	r3, r3, #6
 8008648:	4a09      	ldr	r2, [pc, #36]	; (8008670 <vPortSetupTimerInterrupt+0x44>)
 800864a:	3b01      	subs	r3, #1
 800864c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800864e:	4b04      	ldr	r3, [pc, #16]	; (8008660 <vPortSetupTimerInterrupt+0x34>)
 8008650:	2207      	movs	r2, #7
 8008652:	601a      	str	r2, [r3, #0]
}
 8008654:	bf00      	nop
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	e000e010 	.word	0xe000e010
 8008664:	e000e018 	.word	0xe000e018
 8008668:	20000000 	.word	0x20000000
 800866c:	10624dd3 	.word	0x10624dd3
 8008670:	e000e014 	.word	0xe000e014

08008674 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008674:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008684 <vPortEnableVFP+0x10>
 8008678:	6801      	ldr	r1, [r0, #0]
 800867a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800867e:	6001      	str	r1, [r0, #0]
 8008680:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008682:	bf00      	nop
 8008684:	e000ed88 	.word	0xe000ed88

08008688 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800868e:	f3ef 8305 	mrs	r3, IPSR
 8008692:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2b0f      	cmp	r3, #15
 8008698:	d914      	bls.n	80086c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800869a:	4a17      	ldr	r2, [pc, #92]	; (80086f8 <vPortValidateInterruptPriority+0x70>)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4413      	add	r3, r2
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80086a4:	4b15      	ldr	r3, [pc, #84]	; (80086fc <vPortValidateInterruptPriority+0x74>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	7afa      	ldrb	r2, [r7, #11]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d20a      	bcs.n	80086c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	607b      	str	r3, [r7, #4]
}
 80086c0:	bf00      	nop
 80086c2:	e7fe      	b.n	80086c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80086c4:	4b0e      	ldr	r3, [pc, #56]	; (8008700 <vPortValidateInterruptPriority+0x78>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80086cc:	4b0d      	ldr	r3, [pc, #52]	; (8008704 <vPortValidateInterruptPriority+0x7c>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d90a      	bls.n	80086ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80086d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	603b      	str	r3, [r7, #0]
}
 80086e6:	bf00      	nop
 80086e8:	e7fe      	b.n	80086e8 <vPortValidateInterruptPriority+0x60>
	}
 80086ea:	bf00      	nop
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	e000e3f0 	.word	0xe000e3f0
 80086fc:	20000fc4 	.word	0x20000fc4
 8008700:	e000ed0c 	.word	0xe000ed0c
 8008704:	20000fc8 	.word	0x20000fc8

08008708 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08a      	sub	sp, #40	; 0x28
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008710:	2300      	movs	r3, #0
 8008712:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008714:	f7fe fa34 	bl	8006b80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008718:	4b5b      	ldr	r3, [pc, #364]	; (8008888 <pvPortMalloc+0x180>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008720:	f000 f920 	bl	8008964 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008724:	4b59      	ldr	r3, [pc, #356]	; (800888c <pvPortMalloc+0x184>)
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4013      	ands	r3, r2
 800872c:	2b00      	cmp	r3, #0
 800872e:	f040 8093 	bne.w	8008858 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d01d      	beq.n	8008774 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008738:	2208      	movs	r2, #8
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4413      	add	r3, r2
 800873e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f003 0307 	and.w	r3, r3, #7
 8008746:	2b00      	cmp	r3, #0
 8008748:	d014      	beq.n	8008774 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f023 0307 	bic.w	r3, r3, #7
 8008750:	3308      	adds	r3, #8
 8008752:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <pvPortMalloc+0x6c>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	617b      	str	r3, [r7, #20]
}
 8008770:	bf00      	nop
 8008772:	e7fe      	b.n	8008772 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d06e      	beq.n	8008858 <pvPortMalloc+0x150>
 800877a:	4b45      	ldr	r3, [pc, #276]	; (8008890 <pvPortMalloc+0x188>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	429a      	cmp	r2, r3
 8008782:	d869      	bhi.n	8008858 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008784:	4b43      	ldr	r3, [pc, #268]	; (8008894 <pvPortMalloc+0x18c>)
 8008786:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008788:	4b42      	ldr	r3, [pc, #264]	; (8008894 <pvPortMalloc+0x18c>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800878e:	e004      	b.n	800879a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d903      	bls.n	80087ac <pvPortMalloc+0xa4>
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1f1      	bne.n	8008790 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087ac:	4b36      	ldr	r3, [pc, #216]	; (8008888 <pvPortMalloc+0x180>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d050      	beq.n	8008858 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2208      	movs	r2, #8
 80087bc:	4413      	add	r3, r2
 80087be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	1ad2      	subs	r2, r2, r3
 80087d0:	2308      	movs	r3, #8
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d91f      	bls.n	8008818 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4413      	add	r3, r2
 80087de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	f003 0307 	and.w	r3, r3, #7
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00a      	beq.n	8008800 <pvPortMalloc+0xf8>
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	613b      	str	r3, [r7, #16]
}
 80087fc:	bf00      	nop
 80087fe:	e7fe      	b.n	80087fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	1ad2      	subs	r2, r2, r3
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008812:	69b8      	ldr	r0, [r7, #24]
 8008814:	f000 f908 	bl	8008a28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008818:	4b1d      	ldr	r3, [pc, #116]	; (8008890 <pvPortMalloc+0x188>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	4a1b      	ldr	r2, [pc, #108]	; (8008890 <pvPortMalloc+0x188>)
 8008824:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008826:	4b1a      	ldr	r3, [pc, #104]	; (8008890 <pvPortMalloc+0x188>)
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	4b1b      	ldr	r3, [pc, #108]	; (8008898 <pvPortMalloc+0x190>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d203      	bcs.n	800883a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008832:	4b17      	ldr	r3, [pc, #92]	; (8008890 <pvPortMalloc+0x188>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a18      	ldr	r2, [pc, #96]	; (8008898 <pvPortMalloc+0x190>)
 8008838:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	4b13      	ldr	r3, [pc, #76]	; (800888c <pvPortMalloc+0x184>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	431a      	orrs	r2, r3
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800884e:	4b13      	ldr	r3, [pc, #76]	; (800889c <pvPortMalloc+0x194>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3301      	adds	r3, #1
 8008854:	4a11      	ldr	r2, [pc, #68]	; (800889c <pvPortMalloc+0x194>)
 8008856:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008858:	f7fe f9a0 	bl	8006b9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	f003 0307 	and.w	r3, r3, #7
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00a      	beq.n	800887c <pvPortMalloc+0x174>
	__asm volatile
 8008866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886a:	f383 8811 	msr	BASEPRI, r3
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	f3bf 8f4f 	dsb	sy
 8008876:	60fb      	str	r3, [r7, #12]
}
 8008878:	bf00      	nop
 800887a:	e7fe      	b.n	800887a <pvPortMalloc+0x172>
	return pvReturn;
 800887c:	69fb      	ldr	r3, [r7, #28]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3728      	adds	r7, #40	; 0x28
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20004bd4 	.word	0x20004bd4
 800888c:	20004be8 	.word	0x20004be8
 8008890:	20004bd8 	.word	0x20004bd8
 8008894:	20004bcc 	.word	0x20004bcc
 8008898:	20004bdc 	.word	0x20004bdc
 800889c:	20004be0 	.word	0x20004be0

080088a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d04d      	beq.n	800894e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088b2:	2308      	movs	r3, #8
 80088b4:	425b      	negs	r3, r3
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	4413      	add	r3, r2
 80088ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	4b24      	ldr	r3, [pc, #144]	; (8008958 <vPortFree+0xb8>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4013      	ands	r3, r2
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10a      	bne.n	80088e4 <vPortFree+0x44>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	60fb      	str	r3, [r7, #12]
}
 80088e0:	bf00      	nop
 80088e2:	e7fe      	b.n	80088e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00a      	beq.n	8008902 <vPortFree+0x62>
	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	60bb      	str	r3, [r7, #8]
}
 80088fe:	bf00      	nop
 8008900:	e7fe      	b.n	8008900 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	4b14      	ldr	r3, [pc, #80]	; (8008958 <vPortFree+0xb8>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4013      	ands	r3, r2
 800890c:	2b00      	cmp	r3, #0
 800890e:	d01e      	beq.n	800894e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d11a      	bne.n	800894e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	4b0e      	ldr	r3, [pc, #56]	; (8008958 <vPortFree+0xb8>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	43db      	mvns	r3, r3
 8008922:	401a      	ands	r2, r3
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008928:	f7fe f92a 	bl	8006b80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	4b0a      	ldr	r3, [pc, #40]	; (800895c <vPortFree+0xbc>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4413      	add	r3, r2
 8008936:	4a09      	ldr	r2, [pc, #36]	; (800895c <vPortFree+0xbc>)
 8008938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800893a:	6938      	ldr	r0, [r7, #16]
 800893c:	f000 f874 	bl	8008a28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008940:	4b07      	ldr	r3, [pc, #28]	; (8008960 <vPortFree+0xc0>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3301      	adds	r3, #1
 8008946:	4a06      	ldr	r2, [pc, #24]	; (8008960 <vPortFree+0xc0>)
 8008948:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800894a:	f7fe f927 	bl	8006b9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800894e:	bf00      	nop
 8008950:	3718      	adds	r7, #24
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	20004be8 	.word	0x20004be8
 800895c:	20004bd8 	.word	0x20004bd8
 8008960:	20004be4 	.word	0x20004be4

08008964 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800896a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800896e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008970:	4b27      	ldr	r3, [pc, #156]	; (8008a10 <prvHeapInit+0xac>)
 8008972:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00c      	beq.n	8008998 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3307      	adds	r3, #7
 8008982:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f023 0307 	bic.w	r3, r3, #7
 800898a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	4a1f      	ldr	r2, [pc, #124]	; (8008a10 <prvHeapInit+0xac>)
 8008994:	4413      	add	r3, r2
 8008996:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800899c:	4a1d      	ldr	r2, [pc, #116]	; (8008a14 <prvHeapInit+0xb0>)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089a2:	4b1c      	ldr	r3, [pc, #112]	; (8008a14 <prvHeapInit+0xb0>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	4413      	add	r3, r2
 80089ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089b0:	2208      	movs	r2, #8
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	1a9b      	subs	r3, r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f023 0307 	bic.w	r3, r3, #7
 80089be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4a15      	ldr	r2, [pc, #84]	; (8008a18 <prvHeapInit+0xb4>)
 80089c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089c6:	4b14      	ldr	r3, [pc, #80]	; (8008a18 <prvHeapInit+0xb4>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2200      	movs	r2, #0
 80089cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089ce:	4b12      	ldr	r3, [pc, #72]	; (8008a18 <prvHeapInit+0xb4>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2200      	movs	r2, #0
 80089d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	1ad2      	subs	r2, r2, r3
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089e4:	4b0c      	ldr	r3, [pc, #48]	; (8008a18 <prvHeapInit+0xb4>)
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	4a0a      	ldr	r2, [pc, #40]	; (8008a1c <prvHeapInit+0xb8>)
 80089f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	4a09      	ldr	r2, [pc, #36]	; (8008a20 <prvHeapInit+0xbc>)
 80089fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089fc:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <prvHeapInit+0xc0>)
 80089fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a02:	601a      	str	r2, [r3, #0]
}
 8008a04:	bf00      	nop
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	20000fcc 	.word	0x20000fcc
 8008a14:	20004bcc 	.word	0x20004bcc
 8008a18:	20004bd4 	.word	0x20004bd4
 8008a1c:	20004bdc 	.word	0x20004bdc
 8008a20:	20004bd8 	.word	0x20004bd8
 8008a24:	20004be8 	.word	0x20004be8

08008a28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a30:	4b28      	ldr	r3, [pc, #160]	; (8008ad4 <prvInsertBlockIntoFreeList+0xac>)
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	e002      	b.n	8008a3c <prvInsertBlockIntoFreeList+0x14>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d8f7      	bhi.n	8008a36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	4413      	add	r3, r2
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d108      	bne.n	8008a6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	441a      	add	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	441a      	add	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d118      	bne.n	8008ab0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	4b15      	ldr	r3, [pc, #84]	; (8008ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d00d      	beq.n	8008aa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	441a      	add	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	e008      	b.n	8008ab8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008aa6:	4b0c      	ldr	r3, [pc, #48]	; (8008ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	e003      	b.n	8008ab8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d002      	beq.n	8008ac6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ac6:	bf00      	nop
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	20004bcc 	.word	0x20004bcc
 8008ad8:	20004bd4 	.word	0x20004bd4

08008adc <__errno>:
 8008adc:	4b01      	ldr	r3, [pc, #4]	; (8008ae4 <__errno+0x8>)
 8008ade:	6818      	ldr	r0, [r3, #0]
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	20000010 	.word	0x20000010

08008ae8 <__libc_init_array>:
 8008ae8:	b570      	push	{r4, r5, r6, lr}
 8008aea:	4d0d      	ldr	r5, [pc, #52]	; (8008b20 <__libc_init_array+0x38>)
 8008aec:	4c0d      	ldr	r4, [pc, #52]	; (8008b24 <__libc_init_array+0x3c>)
 8008aee:	1b64      	subs	r4, r4, r5
 8008af0:	10a4      	asrs	r4, r4, #2
 8008af2:	2600      	movs	r6, #0
 8008af4:	42a6      	cmp	r6, r4
 8008af6:	d109      	bne.n	8008b0c <__libc_init_array+0x24>
 8008af8:	4d0b      	ldr	r5, [pc, #44]	; (8008b28 <__libc_init_array+0x40>)
 8008afa:	4c0c      	ldr	r4, [pc, #48]	; (8008b2c <__libc_init_array+0x44>)
 8008afc:	f000 fcf8 	bl	80094f0 <_init>
 8008b00:	1b64      	subs	r4, r4, r5
 8008b02:	10a4      	asrs	r4, r4, #2
 8008b04:	2600      	movs	r6, #0
 8008b06:	42a6      	cmp	r6, r4
 8008b08:	d105      	bne.n	8008b16 <__libc_init_array+0x2e>
 8008b0a:	bd70      	pop	{r4, r5, r6, pc}
 8008b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b10:	4798      	blx	r3
 8008b12:	3601      	adds	r6, #1
 8008b14:	e7ee      	b.n	8008af4 <__libc_init_array+0xc>
 8008b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b1a:	4798      	blx	r3
 8008b1c:	3601      	adds	r6, #1
 8008b1e:	e7f2      	b.n	8008b06 <__libc_init_array+0x1e>
 8008b20:	08009708 	.word	0x08009708
 8008b24:	08009708 	.word	0x08009708
 8008b28:	08009708 	.word	0x08009708
 8008b2c:	0800970c 	.word	0x0800970c

08008b30 <__retarget_lock_acquire_recursive>:
 8008b30:	4770      	bx	lr

08008b32 <__retarget_lock_release_recursive>:
 8008b32:	4770      	bx	lr

08008b34 <memcpy>:
 8008b34:	440a      	add	r2, r1
 8008b36:	4291      	cmp	r1, r2
 8008b38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008b3c:	d100      	bne.n	8008b40 <memcpy+0xc>
 8008b3e:	4770      	bx	lr
 8008b40:	b510      	push	{r4, lr}
 8008b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b4a:	4291      	cmp	r1, r2
 8008b4c:	d1f9      	bne.n	8008b42 <memcpy+0xe>
 8008b4e:	bd10      	pop	{r4, pc}

08008b50 <memset>:
 8008b50:	4402      	add	r2, r0
 8008b52:	4603      	mov	r3, r0
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d100      	bne.n	8008b5a <memset+0xa>
 8008b58:	4770      	bx	lr
 8008b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b5e:	e7f9      	b.n	8008b54 <memset+0x4>

08008b60 <sbrk_aligned>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	4e0e      	ldr	r6, [pc, #56]	; (8008b9c <sbrk_aligned+0x3c>)
 8008b64:	460c      	mov	r4, r1
 8008b66:	6831      	ldr	r1, [r6, #0]
 8008b68:	4605      	mov	r5, r0
 8008b6a:	b911      	cbnz	r1, 8008b72 <sbrk_aligned+0x12>
 8008b6c:	f000 f8f6 	bl	8008d5c <_sbrk_r>
 8008b70:	6030      	str	r0, [r6, #0]
 8008b72:	4621      	mov	r1, r4
 8008b74:	4628      	mov	r0, r5
 8008b76:	f000 f8f1 	bl	8008d5c <_sbrk_r>
 8008b7a:	1c43      	adds	r3, r0, #1
 8008b7c:	d00a      	beq.n	8008b94 <sbrk_aligned+0x34>
 8008b7e:	1cc4      	adds	r4, r0, #3
 8008b80:	f024 0403 	bic.w	r4, r4, #3
 8008b84:	42a0      	cmp	r0, r4
 8008b86:	d007      	beq.n	8008b98 <sbrk_aligned+0x38>
 8008b88:	1a21      	subs	r1, r4, r0
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	f000 f8e6 	bl	8008d5c <_sbrk_r>
 8008b90:	3001      	adds	r0, #1
 8008b92:	d101      	bne.n	8008b98 <sbrk_aligned+0x38>
 8008b94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008b98:	4620      	mov	r0, r4
 8008b9a:	bd70      	pop	{r4, r5, r6, pc}
 8008b9c:	20004bf4 	.word	0x20004bf4

08008ba0 <_malloc_r>:
 8008ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba4:	1ccd      	adds	r5, r1, #3
 8008ba6:	f025 0503 	bic.w	r5, r5, #3
 8008baa:	3508      	adds	r5, #8
 8008bac:	2d0c      	cmp	r5, #12
 8008bae:	bf38      	it	cc
 8008bb0:	250c      	movcc	r5, #12
 8008bb2:	2d00      	cmp	r5, #0
 8008bb4:	4607      	mov	r7, r0
 8008bb6:	db01      	blt.n	8008bbc <_malloc_r+0x1c>
 8008bb8:	42a9      	cmp	r1, r5
 8008bba:	d905      	bls.n	8008bc8 <_malloc_r+0x28>
 8008bbc:	230c      	movs	r3, #12
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	2600      	movs	r6, #0
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc8:	4e2e      	ldr	r6, [pc, #184]	; (8008c84 <_malloc_r+0xe4>)
 8008bca:	f000 f8f7 	bl	8008dbc <__malloc_lock>
 8008bce:	6833      	ldr	r3, [r6, #0]
 8008bd0:	461c      	mov	r4, r3
 8008bd2:	bb34      	cbnz	r4, 8008c22 <_malloc_r+0x82>
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	f7ff ffc2 	bl	8008b60 <sbrk_aligned>
 8008bdc:	1c43      	adds	r3, r0, #1
 8008bde:	4604      	mov	r4, r0
 8008be0:	d14d      	bne.n	8008c7e <_malloc_r+0xde>
 8008be2:	6834      	ldr	r4, [r6, #0]
 8008be4:	4626      	mov	r6, r4
 8008be6:	2e00      	cmp	r6, #0
 8008be8:	d140      	bne.n	8008c6c <_malloc_r+0xcc>
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	4631      	mov	r1, r6
 8008bee:	4638      	mov	r0, r7
 8008bf0:	eb04 0803 	add.w	r8, r4, r3
 8008bf4:	f000 f8b2 	bl	8008d5c <_sbrk_r>
 8008bf8:	4580      	cmp	r8, r0
 8008bfa:	d13a      	bne.n	8008c72 <_malloc_r+0xd2>
 8008bfc:	6821      	ldr	r1, [r4, #0]
 8008bfe:	3503      	adds	r5, #3
 8008c00:	1a6d      	subs	r5, r5, r1
 8008c02:	f025 0503 	bic.w	r5, r5, #3
 8008c06:	3508      	adds	r5, #8
 8008c08:	2d0c      	cmp	r5, #12
 8008c0a:	bf38      	it	cc
 8008c0c:	250c      	movcc	r5, #12
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4638      	mov	r0, r7
 8008c12:	f7ff ffa5 	bl	8008b60 <sbrk_aligned>
 8008c16:	3001      	adds	r0, #1
 8008c18:	d02b      	beq.n	8008c72 <_malloc_r+0xd2>
 8008c1a:	6823      	ldr	r3, [r4, #0]
 8008c1c:	442b      	add	r3, r5
 8008c1e:	6023      	str	r3, [r4, #0]
 8008c20:	e00e      	b.n	8008c40 <_malloc_r+0xa0>
 8008c22:	6822      	ldr	r2, [r4, #0]
 8008c24:	1b52      	subs	r2, r2, r5
 8008c26:	d41e      	bmi.n	8008c66 <_malloc_r+0xc6>
 8008c28:	2a0b      	cmp	r2, #11
 8008c2a:	d916      	bls.n	8008c5a <_malloc_r+0xba>
 8008c2c:	1961      	adds	r1, r4, r5
 8008c2e:	42a3      	cmp	r3, r4
 8008c30:	6025      	str	r5, [r4, #0]
 8008c32:	bf18      	it	ne
 8008c34:	6059      	strne	r1, [r3, #4]
 8008c36:	6863      	ldr	r3, [r4, #4]
 8008c38:	bf08      	it	eq
 8008c3a:	6031      	streq	r1, [r6, #0]
 8008c3c:	5162      	str	r2, [r4, r5]
 8008c3e:	604b      	str	r3, [r1, #4]
 8008c40:	4638      	mov	r0, r7
 8008c42:	f104 060b 	add.w	r6, r4, #11
 8008c46:	f000 f8bf 	bl	8008dc8 <__malloc_unlock>
 8008c4a:	f026 0607 	bic.w	r6, r6, #7
 8008c4e:	1d23      	adds	r3, r4, #4
 8008c50:	1af2      	subs	r2, r6, r3
 8008c52:	d0b6      	beq.n	8008bc2 <_malloc_r+0x22>
 8008c54:	1b9b      	subs	r3, r3, r6
 8008c56:	50a3      	str	r3, [r4, r2]
 8008c58:	e7b3      	b.n	8008bc2 <_malloc_r+0x22>
 8008c5a:	6862      	ldr	r2, [r4, #4]
 8008c5c:	42a3      	cmp	r3, r4
 8008c5e:	bf0c      	ite	eq
 8008c60:	6032      	streq	r2, [r6, #0]
 8008c62:	605a      	strne	r2, [r3, #4]
 8008c64:	e7ec      	b.n	8008c40 <_malloc_r+0xa0>
 8008c66:	4623      	mov	r3, r4
 8008c68:	6864      	ldr	r4, [r4, #4]
 8008c6a:	e7b2      	b.n	8008bd2 <_malloc_r+0x32>
 8008c6c:	4634      	mov	r4, r6
 8008c6e:	6876      	ldr	r6, [r6, #4]
 8008c70:	e7b9      	b.n	8008be6 <_malloc_r+0x46>
 8008c72:	230c      	movs	r3, #12
 8008c74:	603b      	str	r3, [r7, #0]
 8008c76:	4638      	mov	r0, r7
 8008c78:	f000 f8a6 	bl	8008dc8 <__malloc_unlock>
 8008c7c:	e7a1      	b.n	8008bc2 <_malloc_r+0x22>
 8008c7e:	6025      	str	r5, [r4, #0]
 8008c80:	e7de      	b.n	8008c40 <_malloc_r+0xa0>
 8008c82:	bf00      	nop
 8008c84:	20004bf0 	.word	0x20004bf0

08008c88 <cleanup_glue>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	6809      	ldr	r1, [r1, #0]
 8008c8e:	4605      	mov	r5, r0
 8008c90:	b109      	cbz	r1, 8008c96 <cleanup_glue+0xe>
 8008c92:	f7ff fff9 	bl	8008c88 <cleanup_glue>
 8008c96:	4621      	mov	r1, r4
 8008c98:	4628      	mov	r0, r5
 8008c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c9e:	f000 b899 	b.w	8008dd4 <_free_r>
	...

08008ca4 <_reclaim_reent>:
 8008ca4:	4b2c      	ldr	r3, [pc, #176]	; (8008d58 <_reclaim_reent+0xb4>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4283      	cmp	r3, r0
 8008caa:	b570      	push	{r4, r5, r6, lr}
 8008cac:	4604      	mov	r4, r0
 8008cae:	d051      	beq.n	8008d54 <_reclaim_reent+0xb0>
 8008cb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008cb2:	b143      	cbz	r3, 8008cc6 <_reclaim_reent+0x22>
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d14a      	bne.n	8008d50 <_reclaim_reent+0xac>
 8008cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cbc:	6819      	ldr	r1, [r3, #0]
 8008cbe:	b111      	cbz	r1, 8008cc6 <_reclaim_reent+0x22>
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f000 f887 	bl	8008dd4 <_free_r>
 8008cc6:	6961      	ldr	r1, [r4, #20]
 8008cc8:	b111      	cbz	r1, 8008cd0 <_reclaim_reent+0x2c>
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f000 f882 	bl	8008dd4 <_free_r>
 8008cd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008cd2:	b111      	cbz	r1, 8008cda <_reclaim_reent+0x36>
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f000 f87d 	bl	8008dd4 <_free_r>
 8008cda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008cdc:	b111      	cbz	r1, 8008ce4 <_reclaim_reent+0x40>
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f000 f878 	bl	8008dd4 <_free_r>
 8008ce4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008ce6:	b111      	cbz	r1, 8008cee <_reclaim_reent+0x4a>
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f000 f873 	bl	8008dd4 <_free_r>
 8008cee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008cf0:	b111      	cbz	r1, 8008cf8 <_reclaim_reent+0x54>
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f000 f86e 	bl	8008dd4 <_free_r>
 8008cf8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008cfa:	b111      	cbz	r1, 8008d02 <_reclaim_reent+0x5e>
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f000 f869 	bl	8008dd4 <_free_r>
 8008d02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008d04:	b111      	cbz	r1, 8008d0c <_reclaim_reent+0x68>
 8008d06:	4620      	mov	r0, r4
 8008d08:	f000 f864 	bl	8008dd4 <_free_r>
 8008d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d0e:	b111      	cbz	r1, 8008d16 <_reclaim_reent+0x72>
 8008d10:	4620      	mov	r0, r4
 8008d12:	f000 f85f 	bl	8008dd4 <_free_r>
 8008d16:	69a3      	ldr	r3, [r4, #24]
 8008d18:	b1e3      	cbz	r3, 8008d54 <_reclaim_reent+0xb0>
 8008d1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	4798      	blx	r3
 8008d20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008d22:	b1b9      	cbz	r1, 8008d54 <_reclaim_reent+0xb0>
 8008d24:	4620      	mov	r0, r4
 8008d26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008d2a:	f7ff bfad 	b.w	8008c88 <cleanup_glue>
 8008d2e:	5949      	ldr	r1, [r1, r5]
 8008d30:	b941      	cbnz	r1, 8008d44 <_reclaim_reent+0xa0>
 8008d32:	3504      	adds	r5, #4
 8008d34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d36:	2d80      	cmp	r5, #128	; 0x80
 8008d38:	68d9      	ldr	r1, [r3, #12]
 8008d3a:	d1f8      	bne.n	8008d2e <_reclaim_reent+0x8a>
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f000 f849 	bl	8008dd4 <_free_r>
 8008d42:	e7ba      	b.n	8008cba <_reclaim_reent+0x16>
 8008d44:	680e      	ldr	r6, [r1, #0]
 8008d46:	4620      	mov	r0, r4
 8008d48:	f000 f844 	bl	8008dd4 <_free_r>
 8008d4c:	4631      	mov	r1, r6
 8008d4e:	e7ef      	b.n	8008d30 <_reclaim_reent+0x8c>
 8008d50:	2500      	movs	r5, #0
 8008d52:	e7ef      	b.n	8008d34 <_reclaim_reent+0x90>
 8008d54:	bd70      	pop	{r4, r5, r6, pc}
 8008d56:	bf00      	nop
 8008d58:	20000010 	.word	0x20000010

08008d5c <_sbrk_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	4d06      	ldr	r5, [pc, #24]	; (8008d78 <_sbrk_r+0x1c>)
 8008d60:	2300      	movs	r3, #0
 8008d62:	4604      	mov	r4, r0
 8008d64:	4608      	mov	r0, r1
 8008d66:	602b      	str	r3, [r5, #0]
 8008d68:	f7f8 f990 	bl	800108c <_sbrk>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_sbrk_r+0x1a>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_sbrk_r+0x1a>
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	20004bf8 	.word	0x20004bf8

08008d7c <siprintf>:
 8008d7c:	b40e      	push	{r1, r2, r3}
 8008d7e:	b500      	push	{lr}
 8008d80:	b09c      	sub	sp, #112	; 0x70
 8008d82:	ab1d      	add	r3, sp, #116	; 0x74
 8008d84:	9002      	str	r0, [sp, #8]
 8008d86:	9006      	str	r0, [sp, #24]
 8008d88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d8c:	4809      	ldr	r0, [pc, #36]	; (8008db4 <siprintf+0x38>)
 8008d8e:	9107      	str	r1, [sp, #28]
 8008d90:	9104      	str	r1, [sp, #16]
 8008d92:	4909      	ldr	r1, [pc, #36]	; (8008db8 <siprintf+0x3c>)
 8008d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d98:	9105      	str	r1, [sp, #20]
 8008d9a:	6800      	ldr	r0, [r0, #0]
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	a902      	add	r1, sp, #8
 8008da0:	f000 f8c0 	bl	8008f24 <_svfiprintf_r>
 8008da4:	9b02      	ldr	r3, [sp, #8]
 8008da6:	2200      	movs	r2, #0
 8008da8:	701a      	strb	r2, [r3, #0]
 8008daa:	b01c      	add	sp, #112	; 0x70
 8008dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008db0:	b003      	add	sp, #12
 8008db2:	4770      	bx	lr
 8008db4:	20000010 	.word	0x20000010
 8008db8:	ffff0208 	.word	0xffff0208

08008dbc <__malloc_lock>:
 8008dbc:	4801      	ldr	r0, [pc, #4]	; (8008dc4 <__malloc_lock+0x8>)
 8008dbe:	f7ff beb7 	b.w	8008b30 <__retarget_lock_acquire_recursive>
 8008dc2:	bf00      	nop
 8008dc4:	20004bec 	.word	0x20004bec

08008dc8 <__malloc_unlock>:
 8008dc8:	4801      	ldr	r0, [pc, #4]	; (8008dd0 <__malloc_unlock+0x8>)
 8008dca:	f7ff beb2 	b.w	8008b32 <__retarget_lock_release_recursive>
 8008dce:	bf00      	nop
 8008dd0:	20004bec 	.word	0x20004bec

08008dd4 <_free_r>:
 8008dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dd6:	2900      	cmp	r1, #0
 8008dd8:	d044      	beq.n	8008e64 <_free_r+0x90>
 8008dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dde:	9001      	str	r0, [sp, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f1a1 0404 	sub.w	r4, r1, #4
 8008de6:	bfb8      	it	lt
 8008de8:	18e4      	addlt	r4, r4, r3
 8008dea:	f7ff ffe7 	bl	8008dbc <__malloc_lock>
 8008dee:	4a1e      	ldr	r2, [pc, #120]	; (8008e68 <_free_r+0x94>)
 8008df0:	9801      	ldr	r0, [sp, #4]
 8008df2:	6813      	ldr	r3, [r2, #0]
 8008df4:	b933      	cbnz	r3, 8008e04 <_free_r+0x30>
 8008df6:	6063      	str	r3, [r4, #4]
 8008df8:	6014      	str	r4, [r2, #0]
 8008dfa:	b003      	add	sp, #12
 8008dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e00:	f7ff bfe2 	b.w	8008dc8 <__malloc_unlock>
 8008e04:	42a3      	cmp	r3, r4
 8008e06:	d908      	bls.n	8008e1a <_free_r+0x46>
 8008e08:	6825      	ldr	r5, [r4, #0]
 8008e0a:	1961      	adds	r1, r4, r5
 8008e0c:	428b      	cmp	r3, r1
 8008e0e:	bf01      	itttt	eq
 8008e10:	6819      	ldreq	r1, [r3, #0]
 8008e12:	685b      	ldreq	r3, [r3, #4]
 8008e14:	1949      	addeq	r1, r1, r5
 8008e16:	6021      	streq	r1, [r4, #0]
 8008e18:	e7ed      	b.n	8008df6 <_free_r+0x22>
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	b10b      	cbz	r3, 8008e24 <_free_r+0x50>
 8008e20:	42a3      	cmp	r3, r4
 8008e22:	d9fa      	bls.n	8008e1a <_free_r+0x46>
 8008e24:	6811      	ldr	r1, [r2, #0]
 8008e26:	1855      	adds	r5, r2, r1
 8008e28:	42a5      	cmp	r5, r4
 8008e2a:	d10b      	bne.n	8008e44 <_free_r+0x70>
 8008e2c:	6824      	ldr	r4, [r4, #0]
 8008e2e:	4421      	add	r1, r4
 8008e30:	1854      	adds	r4, r2, r1
 8008e32:	42a3      	cmp	r3, r4
 8008e34:	6011      	str	r1, [r2, #0]
 8008e36:	d1e0      	bne.n	8008dfa <_free_r+0x26>
 8008e38:	681c      	ldr	r4, [r3, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	6053      	str	r3, [r2, #4]
 8008e3e:	4421      	add	r1, r4
 8008e40:	6011      	str	r1, [r2, #0]
 8008e42:	e7da      	b.n	8008dfa <_free_r+0x26>
 8008e44:	d902      	bls.n	8008e4c <_free_r+0x78>
 8008e46:	230c      	movs	r3, #12
 8008e48:	6003      	str	r3, [r0, #0]
 8008e4a:	e7d6      	b.n	8008dfa <_free_r+0x26>
 8008e4c:	6825      	ldr	r5, [r4, #0]
 8008e4e:	1961      	adds	r1, r4, r5
 8008e50:	428b      	cmp	r3, r1
 8008e52:	bf04      	itt	eq
 8008e54:	6819      	ldreq	r1, [r3, #0]
 8008e56:	685b      	ldreq	r3, [r3, #4]
 8008e58:	6063      	str	r3, [r4, #4]
 8008e5a:	bf04      	itt	eq
 8008e5c:	1949      	addeq	r1, r1, r5
 8008e5e:	6021      	streq	r1, [r4, #0]
 8008e60:	6054      	str	r4, [r2, #4]
 8008e62:	e7ca      	b.n	8008dfa <_free_r+0x26>
 8008e64:	b003      	add	sp, #12
 8008e66:	bd30      	pop	{r4, r5, pc}
 8008e68:	20004bf0 	.word	0x20004bf0

08008e6c <__ssputs_r>:
 8008e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e70:	688e      	ldr	r6, [r1, #8]
 8008e72:	429e      	cmp	r6, r3
 8008e74:	4682      	mov	sl, r0
 8008e76:	460c      	mov	r4, r1
 8008e78:	4690      	mov	r8, r2
 8008e7a:	461f      	mov	r7, r3
 8008e7c:	d838      	bhi.n	8008ef0 <__ssputs_r+0x84>
 8008e7e:	898a      	ldrh	r2, [r1, #12]
 8008e80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e84:	d032      	beq.n	8008eec <__ssputs_r+0x80>
 8008e86:	6825      	ldr	r5, [r4, #0]
 8008e88:	6909      	ldr	r1, [r1, #16]
 8008e8a:	eba5 0901 	sub.w	r9, r5, r1
 8008e8e:	6965      	ldr	r5, [r4, #20]
 8008e90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e98:	3301      	adds	r3, #1
 8008e9a:	444b      	add	r3, r9
 8008e9c:	106d      	asrs	r5, r5, #1
 8008e9e:	429d      	cmp	r5, r3
 8008ea0:	bf38      	it	cc
 8008ea2:	461d      	movcc	r5, r3
 8008ea4:	0553      	lsls	r3, r2, #21
 8008ea6:	d531      	bpl.n	8008f0c <__ssputs_r+0xa0>
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	f7ff fe79 	bl	8008ba0 <_malloc_r>
 8008eae:	4606      	mov	r6, r0
 8008eb0:	b950      	cbnz	r0, 8008ec8 <__ssputs_r+0x5c>
 8008eb2:	230c      	movs	r3, #12
 8008eb4:	f8ca 3000 	str.w	r3, [sl]
 8008eb8:	89a3      	ldrh	r3, [r4, #12]
 8008eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ebe:	81a3      	strh	r3, [r4, #12]
 8008ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec8:	6921      	ldr	r1, [r4, #16]
 8008eca:	464a      	mov	r2, r9
 8008ecc:	f7ff fe32 	bl	8008b34 <memcpy>
 8008ed0:	89a3      	ldrh	r3, [r4, #12]
 8008ed2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eda:	81a3      	strh	r3, [r4, #12]
 8008edc:	6126      	str	r6, [r4, #16]
 8008ede:	6165      	str	r5, [r4, #20]
 8008ee0:	444e      	add	r6, r9
 8008ee2:	eba5 0509 	sub.w	r5, r5, r9
 8008ee6:	6026      	str	r6, [r4, #0]
 8008ee8:	60a5      	str	r5, [r4, #8]
 8008eea:	463e      	mov	r6, r7
 8008eec:	42be      	cmp	r6, r7
 8008eee:	d900      	bls.n	8008ef2 <__ssputs_r+0x86>
 8008ef0:	463e      	mov	r6, r7
 8008ef2:	6820      	ldr	r0, [r4, #0]
 8008ef4:	4632      	mov	r2, r6
 8008ef6:	4641      	mov	r1, r8
 8008ef8:	f000 faa8 	bl	800944c <memmove>
 8008efc:	68a3      	ldr	r3, [r4, #8]
 8008efe:	1b9b      	subs	r3, r3, r6
 8008f00:	60a3      	str	r3, [r4, #8]
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	4433      	add	r3, r6
 8008f06:	6023      	str	r3, [r4, #0]
 8008f08:	2000      	movs	r0, #0
 8008f0a:	e7db      	b.n	8008ec4 <__ssputs_r+0x58>
 8008f0c:	462a      	mov	r2, r5
 8008f0e:	f000 fab7 	bl	8009480 <_realloc_r>
 8008f12:	4606      	mov	r6, r0
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d1e1      	bne.n	8008edc <__ssputs_r+0x70>
 8008f18:	6921      	ldr	r1, [r4, #16]
 8008f1a:	4650      	mov	r0, sl
 8008f1c:	f7ff ff5a 	bl	8008dd4 <_free_r>
 8008f20:	e7c7      	b.n	8008eb2 <__ssputs_r+0x46>
	...

08008f24 <_svfiprintf_r>:
 8008f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f28:	4698      	mov	r8, r3
 8008f2a:	898b      	ldrh	r3, [r1, #12]
 8008f2c:	061b      	lsls	r3, r3, #24
 8008f2e:	b09d      	sub	sp, #116	; 0x74
 8008f30:	4607      	mov	r7, r0
 8008f32:	460d      	mov	r5, r1
 8008f34:	4614      	mov	r4, r2
 8008f36:	d50e      	bpl.n	8008f56 <_svfiprintf_r+0x32>
 8008f38:	690b      	ldr	r3, [r1, #16]
 8008f3a:	b963      	cbnz	r3, 8008f56 <_svfiprintf_r+0x32>
 8008f3c:	2140      	movs	r1, #64	; 0x40
 8008f3e:	f7ff fe2f 	bl	8008ba0 <_malloc_r>
 8008f42:	6028      	str	r0, [r5, #0]
 8008f44:	6128      	str	r0, [r5, #16]
 8008f46:	b920      	cbnz	r0, 8008f52 <_svfiprintf_r+0x2e>
 8008f48:	230c      	movs	r3, #12
 8008f4a:	603b      	str	r3, [r7, #0]
 8008f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f50:	e0d1      	b.n	80090f6 <_svfiprintf_r+0x1d2>
 8008f52:	2340      	movs	r3, #64	; 0x40
 8008f54:	616b      	str	r3, [r5, #20]
 8008f56:	2300      	movs	r3, #0
 8008f58:	9309      	str	r3, [sp, #36]	; 0x24
 8008f5a:	2320      	movs	r3, #32
 8008f5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f60:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f64:	2330      	movs	r3, #48	; 0x30
 8008f66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009110 <_svfiprintf_r+0x1ec>
 8008f6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f6e:	f04f 0901 	mov.w	r9, #1
 8008f72:	4623      	mov	r3, r4
 8008f74:	469a      	mov	sl, r3
 8008f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f7a:	b10a      	cbz	r2, 8008f80 <_svfiprintf_r+0x5c>
 8008f7c:	2a25      	cmp	r2, #37	; 0x25
 8008f7e:	d1f9      	bne.n	8008f74 <_svfiprintf_r+0x50>
 8008f80:	ebba 0b04 	subs.w	fp, sl, r4
 8008f84:	d00b      	beq.n	8008f9e <_svfiprintf_r+0x7a>
 8008f86:	465b      	mov	r3, fp
 8008f88:	4622      	mov	r2, r4
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	4638      	mov	r0, r7
 8008f8e:	f7ff ff6d 	bl	8008e6c <__ssputs_r>
 8008f92:	3001      	adds	r0, #1
 8008f94:	f000 80aa 	beq.w	80090ec <_svfiprintf_r+0x1c8>
 8008f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f9a:	445a      	add	r2, fp
 8008f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 80a2 	beq.w	80090ec <_svfiprintf_r+0x1c8>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fb2:	f10a 0a01 	add.w	sl, sl, #1
 8008fb6:	9304      	str	r3, [sp, #16]
 8008fb8:	9307      	str	r3, [sp, #28]
 8008fba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fbe:	931a      	str	r3, [sp, #104]	; 0x68
 8008fc0:	4654      	mov	r4, sl
 8008fc2:	2205      	movs	r2, #5
 8008fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc8:	4851      	ldr	r0, [pc, #324]	; (8009110 <_svfiprintf_r+0x1ec>)
 8008fca:	f7f7 f929 	bl	8000220 <memchr>
 8008fce:	9a04      	ldr	r2, [sp, #16]
 8008fd0:	b9d8      	cbnz	r0, 800900a <_svfiprintf_r+0xe6>
 8008fd2:	06d0      	lsls	r0, r2, #27
 8008fd4:	bf44      	itt	mi
 8008fd6:	2320      	movmi	r3, #32
 8008fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fdc:	0711      	lsls	r1, r2, #28
 8008fde:	bf44      	itt	mi
 8008fe0:	232b      	movmi	r3, #43	; 0x2b
 8008fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8008fea:	2b2a      	cmp	r3, #42	; 0x2a
 8008fec:	d015      	beq.n	800901a <_svfiprintf_r+0xf6>
 8008fee:	9a07      	ldr	r2, [sp, #28]
 8008ff0:	4654      	mov	r4, sl
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	f04f 0c0a 	mov.w	ip, #10
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ffe:	3b30      	subs	r3, #48	; 0x30
 8009000:	2b09      	cmp	r3, #9
 8009002:	d94e      	bls.n	80090a2 <_svfiprintf_r+0x17e>
 8009004:	b1b0      	cbz	r0, 8009034 <_svfiprintf_r+0x110>
 8009006:	9207      	str	r2, [sp, #28]
 8009008:	e014      	b.n	8009034 <_svfiprintf_r+0x110>
 800900a:	eba0 0308 	sub.w	r3, r0, r8
 800900e:	fa09 f303 	lsl.w	r3, r9, r3
 8009012:	4313      	orrs	r3, r2
 8009014:	9304      	str	r3, [sp, #16]
 8009016:	46a2      	mov	sl, r4
 8009018:	e7d2      	b.n	8008fc0 <_svfiprintf_r+0x9c>
 800901a:	9b03      	ldr	r3, [sp, #12]
 800901c:	1d19      	adds	r1, r3, #4
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	9103      	str	r1, [sp, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	bfbb      	ittet	lt
 8009026:	425b      	neglt	r3, r3
 8009028:	f042 0202 	orrlt.w	r2, r2, #2
 800902c:	9307      	strge	r3, [sp, #28]
 800902e:	9307      	strlt	r3, [sp, #28]
 8009030:	bfb8      	it	lt
 8009032:	9204      	strlt	r2, [sp, #16]
 8009034:	7823      	ldrb	r3, [r4, #0]
 8009036:	2b2e      	cmp	r3, #46	; 0x2e
 8009038:	d10c      	bne.n	8009054 <_svfiprintf_r+0x130>
 800903a:	7863      	ldrb	r3, [r4, #1]
 800903c:	2b2a      	cmp	r3, #42	; 0x2a
 800903e:	d135      	bne.n	80090ac <_svfiprintf_r+0x188>
 8009040:	9b03      	ldr	r3, [sp, #12]
 8009042:	1d1a      	adds	r2, r3, #4
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	9203      	str	r2, [sp, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	bfb8      	it	lt
 800904c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009050:	3402      	adds	r4, #2
 8009052:	9305      	str	r3, [sp, #20]
 8009054:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009120 <_svfiprintf_r+0x1fc>
 8009058:	7821      	ldrb	r1, [r4, #0]
 800905a:	2203      	movs	r2, #3
 800905c:	4650      	mov	r0, sl
 800905e:	f7f7 f8df 	bl	8000220 <memchr>
 8009062:	b140      	cbz	r0, 8009076 <_svfiprintf_r+0x152>
 8009064:	2340      	movs	r3, #64	; 0x40
 8009066:	eba0 000a 	sub.w	r0, r0, sl
 800906a:	fa03 f000 	lsl.w	r0, r3, r0
 800906e:	9b04      	ldr	r3, [sp, #16]
 8009070:	4303      	orrs	r3, r0
 8009072:	3401      	adds	r4, #1
 8009074:	9304      	str	r3, [sp, #16]
 8009076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800907a:	4826      	ldr	r0, [pc, #152]	; (8009114 <_svfiprintf_r+0x1f0>)
 800907c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009080:	2206      	movs	r2, #6
 8009082:	f7f7 f8cd 	bl	8000220 <memchr>
 8009086:	2800      	cmp	r0, #0
 8009088:	d038      	beq.n	80090fc <_svfiprintf_r+0x1d8>
 800908a:	4b23      	ldr	r3, [pc, #140]	; (8009118 <_svfiprintf_r+0x1f4>)
 800908c:	bb1b      	cbnz	r3, 80090d6 <_svfiprintf_r+0x1b2>
 800908e:	9b03      	ldr	r3, [sp, #12]
 8009090:	3307      	adds	r3, #7
 8009092:	f023 0307 	bic.w	r3, r3, #7
 8009096:	3308      	adds	r3, #8
 8009098:	9303      	str	r3, [sp, #12]
 800909a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800909c:	4433      	add	r3, r6
 800909e:	9309      	str	r3, [sp, #36]	; 0x24
 80090a0:	e767      	b.n	8008f72 <_svfiprintf_r+0x4e>
 80090a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80090a6:	460c      	mov	r4, r1
 80090a8:	2001      	movs	r0, #1
 80090aa:	e7a5      	b.n	8008ff8 <_svfiprintf_r+0xd4>
 80090ac:	2300      	movs	r3, #0
 80090ae:	3401      	adds	r4, #1
 80090b0:	9305      	str	r3, [sp, #20]
 80090b2:	4619      	mov	r1, r3
 80090b4:	f04f 0c0a 	mov.w	ip, #10
 80090b8:	4620      	mov	r0, r4
 80090ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090be:	3a30      	subs	r2, #48	; 0x30
 80090c0:	2a09      	cmp	r2, #9
 80090c2:	d903      	bls.n	80090cc <_svfiprintf_r+0x1a8>
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d0c5      	beq.n	8009054 <_svfiprintf_r+0x130>
 80090c8:	9105      	str	r1, [sp, #20]
 80090ca:	e7c3      	b.n	8009054 <_svfiprintf_r+0x130>
 80090cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80090d0:	4604      	mov	r4, r0
 80090d2:	2301      	movs	r3, #1
 80090d4:	e7f0      	b.n	80090b8 <_svfiprintf_r+0x194>
 80090d6:	ab03      	add	r3, sp, #12
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	462a      	mov	r2, r5
 80090dc:	4b0f      	ldr	r3, [pc, #60]	; (800911c <_svfiprintf_r+0x1f8>)
 80090de:	a904      	add	r1, sp, #16
 80090e0:	4638      	mov	r0, r7
 80090e2:	f3af 8000 	nop.w
 80090e6:	1c42      	adds	r2, r0, #1
 80090e8:	4606      	mov	r6, r0
 80090ea:	d1d6      	bne.n	800909a <_svfiprintf_r+0x176>
 80090ec:	89ab      	ldrh	r3, [r5, #12]
 80090ee:	065b      	lsls	r3, r3, #25
 80090f0:	f53f af2c 	bmi.w	8008f4c <_svfiprintf_r+0x28>
 80090f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090f6:	b01d      	add	sp, #116	; 0x74
 80090f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090fc:	ab03      	add	r3, sp, #12
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	462a      	mov	r2, r5
 8009102:	4b06      	ldr	r3, [pc, #24]	; (800911c <_svfiprintf_r+0x1f8>)
 8009104:	a904      	add	r1, sp, #16
 8009106:	4638      	mov	r0, r7
 8009108:	f000 f87a 	bl	8009200 <_printf_i>
 800910c:	e7eb      	b.n	80090e6 <_svfiprintf_r+0x1c2>
 800910e:	bf00      	nop
 8009110:	080096cc 	.word	0x080096cc
 8009114:	080096d6 	.word	0x080096d6
 8009118:	00000000 	.word	0x00000000
 800911c:	08008e6d 	.word	0x08008e6d
 8009120:	080096d2 	.word	0x080096d2

08009124 <_printf_common>:
 8009124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009128:	4616      	mov	r6, r2
 800912a:	4699      	mov	r9, r3
 800912c:	688a      	ldr	r2, [r1, #8]
 800912e:	690b      	ldr	r3, [r1, #16]
 8009130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009134:	4293      	cmp	r3, r2
 8009136:	bfb8      	it	lt
 8009138:	4613      	movlt	r3, r2
 800913a:	6033      	str	r3, [r6, #0]
 800913c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009140:	4607      	mov	r7, r0
 8009142:	460c      	mov	r4, r1
 8009144:	b10a      	cbz	r2, 800914a <_printf_common+0x26>
 8009146:	3301      	adds	r3, #1
 8009148:	6033      	str	r3, [r6, #0]
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	0699      	lsls	r1, r3, #26
 800914e:	bf42      	ittt	mi
 8009150:	6833      	ldrmi	r3, [r6, #0]
 8009152:	3302      	addmi	r3, #2
 8009154:	6033      	strmi	r3, [r6, #0]
 8009156:	6825      	ldr	r5, [r4, #0]
 8009158:	f015 0506 	ands.w	r5, r5, #6
 800915c:	d106      	bne.n	800916c <_printf_common+0x48>
 800915e:	f104 0a19 	add.w	sl, r4, #25
 8009162:	68e3      	ldr	r3, [r4, #12]
 8009164:	6832      	ldr	r2, [r6, #0]
 8009166:	1a9b      	subs	r3, r3, r2
 8009168:	42ab      	cmp	r3, r5
 800916a:	dc26      	bgt.n	80091ba <_printf_common+0x96>
 800916c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009170:	1e13      	subs	r3, r2, #0
 8009172:	6822      	ldr	r2, [r4, #0]
 8009174:	bf18      	it	ne
 8009176:	2301      	movne	r3, #1
 8009178:	0692      	lsls	r2, r2, #26
 800917a:	d42b      	bmi.n	80091d4 <_printf_common+0xb0>
 800917c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009180:	4649      	mov	r1, r9
 8009182:	4638      	mov	r0, r7
 8009184:	47c0      	blx	r8
 8009186:	3001      	adds	r0, #1
 8009188:	d01e      	beq.n	80091c8 <_printf_common+0xa4>
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	68e5      	ldr	r5, [r4, #12]
 800918e:	6832      	ldr	r2, [r6, #0]
 8009190:	f003 0306 	and.w	r3, r3, #6
 8009194:	2b04      	cmp	r3, #4
 8009196:	bf08      	it	eq
 8009198:	1aad      	subeq	r5, r5, r2
 800919a:	68a3      	ldr	r3, [r4, #8]
 800919c:	6922      	ldr	r2, [r4, #16]
 800919e:	bf0c      	ite	eq
 80091a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091a4:	2500      	movne	r5, #0
 80091a6:	4293      	cmp	r3, r2
 80091a8:	bfc4      	itt	gt
 80091aa:	1a9b      	subgt	r3, r3, r2
 80091ac:	18ed      	addgt	r5, r5, r3
 80091ae:	2600      	movs	r6, #0
 80091b0:	341a      	adds	r4, #26
 80091b2:	42b5      	cmp	r5, r6
 80091b4:	d11a      	bne.n	80091ec <_printf_common+0xc8>
 80091b6:	2000      	movs	r0, #0
 80091b8:	e008      	b.n	80091cc <_printf_common+0xa8>
 80091ba:	2301      	movs	r3, #1
 80091bc:	4652      	mov	r2, sl
 80091be:	4649      	mov	r1, r9
 80091c0:	4638      	mov	r0, r7
 80091c2:	47c0      	blx	r8
 80091c4:	3001      	adds	r0, #1
 80091c6:	d103      	bne.n	80091d0 <_printf_common+0xac>
 80091c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d0:	3501      	adds	r5, #1
 80091d2:	e7c6      	b.n	8009162 <_printf_common+0x3e>
 80091d4:	18e1      	adds	r1, r4, r3
 80091d6:	1c5a      	adds	r2, r3, #1
 80091d8:	2030      	movs	r0, #48	; 0x30
 80091da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091de:	4422      	add	r2, r4
 80091e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091e8:	3302      	adds	r3, #2
 80091ea:	e7c7      	b.n	800917c <_printf_common+0x58>
 80091ec:	2301      	movs	r3, #1
 80091ee:	4622      	mov	r2, r4
 80091f0:	4649      	mov	r1, r9
 80091f2:	4638      	mov	r0, r7
 80091f4:	47c0      	blx	r8
 80091f6:	3001      	adds	r0, #1
 80091f8:	d0e6      	beq.n	80091c8 <_printf_common+0xa4>
 80091fa:	3601      	adds	r6, #1
 80091fc:	e7d9      	b.n	80091b2 <_printf_common+0x8e>
	...

08009200 <_printf_i>:
 8009200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009204:	7e0f      	ldrb	r7, [r1, #24]
 8009206:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009208:	2f78      	cmp	r7, #120	; 0x78
 800920a:	4691      	mov	r9, r2
 800920c:	4680      	mov	r8, r0
 800920e:	460c      	mov	r4, r1
 8009210:	469a      	mov	sl, r3
 8009212:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009216:	d807      	bhi.n	8009228 <_printf_i+0x28>
 8009218:	2f62      	cmp	r7, #98	; 0x62
 800921a:	d80a      	bhi.n	8009232 <_printf_i+0x32>
 800921c:	2f00      	cmp	r7, #0
 800921e:	f000 80d8 	beq.w	80093d2 <_printf_i+0x1d2>
 8009222:	2f58      	cmp	r7, #88	; 0x58
 8009224:	f000 80a3 	beq.w	800936e <_printf_i+0x16e>
 8009228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800922c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009230:	e03a      	b.n	80092a8 <_printf_i+0xa8>
 8009232:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009236:	2b15      	cmp	r3, #21
 8009238:	d8f6      	bhi.n	8009228 <_printf_i+0x28>
 800923a:	a101      	add	r1, pc, #4	; (adr r1, 8009240 <_printf_i+0x40>)
 800923c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009240:	08009299 	.word	0x08009299
 8009244:	080092ad 	.word	0x080092ad
 8009248:	08009229 	.word	0x08009229
 800924c:	08009229 	.word	0x08009229
 8009250:	08009229 	.word	0x08009229
 8009254:	08009229 	.word	0x08009229
 8009258:	080092ad 	.word	0x080092ad
 800925c:	08009229 	.word	0x08009229
 8009260:	08009229 	.word	0x08009229
 8009264:	08009229 	.word	0x08009229
 8009268:	08009229 	.word	0x08009229
 800926c:	080093b9 	.word	0x080093b9
 8009270:	080092dd 	.word	0x080092dd
 8009274:	0800939b 	.word	0x0800939b
 8009278:	08009229 	.word	0x08009229
 800927c:	08009229 	.word	0x08009229
 8009280:	080093db 	.word	0x080093db
 8009284:	08009229 	.word	0x08009229
 8009288:	080092dd 	.word	0x080092dd
 800928c:	08009229 	.word	0x08009229
 8009290:	08009229 	.word	0x08009229
 8009294:	080093a3 	.word	0x080093a3
 8009298:	682b      	ldr	r3, [r5, #0]
 800929a:	1d1a      	adds	r2, r3, #4
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	602a      	str	r2, [r5, #0]
 80092a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092a8:	2301      	movs	r3, #1
 80092aa:	e0a3      	b.n	80093f4 <_printf_i+0x1f4>
 80092ac:	6820      	ldr	r0, [r4, #0]
 80092ae:	6829      	ldr	r1, [r5, #0]
 80092b0:	0606      	lsls	r6, r0, #24
 80092b2:	f101 0304 	add.w	r3, r1, #4
 80092b6:	d50a      	bpl.n	80092ce <_printf_i+0xce>
 80092b8:	680e      	ldr	r6, [r1, #0]
 80092ba:	602b      	str	r3, [r5, #0]
 80092bc:	2e00      	cmp	r6, #0
 80092be:	da03      	bge.n	80092c8 <_printf_i+0xc8>
 80092c0:	232d      	movs	r3, #45	; 0x2d
 80092c2:	4276      	negs	r6, r6
 80092c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c8:	485e      	ldr	r0, [pc, #376]	; (8009444 <_printf_i+0x244>)
 80092ca:	230a      	movs	r3, #10
 80092cc:	e019      	b.n	8009302 <_printf_i+0x102>
 80092ce:	680e      	ldr	r6, [r1, #0]
 80092d0:	602b      	str	r3, [r5, #0]
 80092d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092d6:	bf18      	it	ne
 80092d8:	b236      	sxthne	r6, r6
 80092da:	e7ef      	b.n	80092bc <_printf_i+0xbc>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	6820      	ldr	r0, [r4, #0]
 80092e0:	1d19      	adds	r1, r3, #4
 80092e2:	6029      	str	r1, [r5, #0]
 80092e4:	0601      	lsls	r1, r0, #24
 80092e6:	d501      	bpl.n	80092ec <_printf_i+0xec>
 80092e8:	681e      	ldr	r6, [r3, #0]
 80092ea:	e002      	b.n	80092f2 <_printf_i+0xf2>
 80092ec:	0646      	lsls	r6, r0, #25
 80092ee:	d5fb      	bpl.n	80092e8 <_printf_i+0xe8>
 80092f0:	881e      	ldrh	r6, [r3, #0]
 80092f2:	4854      	ldr	r0, [pc, #336]	; (8009444 <_printf_i+0x244>)
 80092f4:	2f6f      	cmp	r7, #111	; 0x6f
 80092f6:	bf0c      	ite	eq
 80092f8:	2308      	moveq	r3, #8
 80092fa:	230a      	movne	r3, #10
 80092fc:	2100      	movs	r1, #0
 80092fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009302:	6865      	ldr	r5, [r4, #4]
 8009304:	60a5      	str	r5, [r4, #8]
 8009306:	2d00      	cmp	r5, #0
 8009308:	bfa2      	ittt	ge
 800930a:	6821      	ldrge	r1, [r4, #0]
 800930c:	f021 0104 	bicge.w	r1, r1, #4
 8009310:	6021      	strge	r1, [r4, #0]
 8009312:	b90e      	cbnz	r6, 8009318 <_printf_i+0x118>
 8009314:	2d00      	cmp	r5, #0
 8009316:	d04d      	beq.n	80093b4 <_printf_i+0x1b4>
 8009318:	4615      	mov	r5, r2
 800931a:	fbb6 f1f3 	udiv	r1, r6, r3
 800931e:	fb03 6711 	mls	r7, r3, r1, r6
 8009322:	5dc7      	ldrb	r7, [r0, r7]
 8009324:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009328:	4637      	mov	r7, r6
 800932a:	42bb      	cmp	r3, r7
 800932c:	460e      	mov	r6, r1
 800932e:	d9f4      	bls.n	800931a <_printf_i+0x11a>
 8009330:	2b08      	cmp	r3, #8
 8009332:	d10b      	bne.n	800934c <_printf_i+0x14c>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	07de      	lsls	r6, r3, #31
 8009338:	d508      	bpl.n	800934c <_printf_i+0x14c>
 800933a:	6923      	ldr	r3, [r4, #16]
 800933c:	6861      	ldr	r1, [r4, #4]
 800933e:	4299      	cmp	r1, r3
 8009340:	bfde      	ittt	le
 8009342:	2330      	movle	r3, #48	; 0x30
 8009344:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009348:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800934c:	1b52      	subs	r2, r2, r5
 800934e:	6122      	str	r2, [r4, #16]
 8009350:	f8cd a000 	str.w	sl, [sp]
 8009354:	464b      	mov	r3, r9
 8009356:	aa03      	add	r2, sp, #12
 8009358:	4621      	mov	r1, r4
 800935a:	4640      	mov	r0, r8
 800935c:	f7ff fee2 	bl	8009124 <_printf_common>
 8009360:	3001      	adds	r0, #1
 8009362:	d14c      	bne.n	80093fe <_printf_i+0x1fe>
 8009364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009368:	b004      	add	sp, #16
 800936a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936e:	4835      	ldr	r0, [pc, #212]	; (8009444 <_printf_i+0x244>)
 8009370:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009374:	6829      	ldr	r1, [r5, #0]
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	f851 6b04 	ldr.w	r6, [r1], #4
 800937c:	6029      	str	r1, [r5, #0]
 800937e:	061d      	lsls	r5, r3, #24
 8009380:	d514      	bpl.n	80093ac <_printf_i+0x1ac>
 8009382:	07df      	lsls	r7, r3, #31
 8009384:	bf44      	itt	mi
 8009386:	f043 0320 	orrmi.w	r3, r3, #32
 800938a:	6023      	strmi	r3, [r4, #0]
 800938c:	b91e      	cbnz	r6, 8009396 <_printf_i+0x196>
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	f023 0320 	bic.w	r3, r3, #32
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	2310      	movs	r3, #16
 8009398:	e7b0      	b.n	80092fc <_printf_i+0xfc>
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	f043 0320 	orr.w	r3, r3, #32
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	2378      	movs	r3, #120	; 0x78
 80093a4:	4828      	ldr	r0, [pc, #160]	; (8009448 <_printf_i+0x248>)
 80093a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093aa:	e7e3      	b.n	8009374 <_printf_i+0x174>
 80093ac:	0659      	lsls	r1, r3, #25
 80093ae:	bf48      	it	mi
 80093b0:	b2b6      	uxthmi	r6, r6
 80093b2:	e7e6      	b.n	8009382 <_printf_i+0x182>
 80093b4:	4615      	mov	r5, r2
 80093b6:	e7bb      	b.n	8009330 <_printf_i+0x130>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	6826      	ldr	r6, [r4, #0]
 80093bc:	6961      	ldr	r1, [r4, #20]
 80093be:	1d18      	adds	r0, r3, #4
 80093c0:	6028      	str	r0, [r5, #0]
 80093c2:	0635      	lsls	r5, r6, #24
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	d501      	bpl.n	80093cc <_printf_i+0x1cc>
 80093c8:	6019      	str	r1, [r3, #0]
 80093ca:	e002      	b.n	80093d2 <_printf_i+0x1d2>
 80093cc:	0670      	lsls	r0, r6, #25
 80093ce:	d5fb      	bpl.n	80093c8 <_printf_i+0x1c8>
 80093d0:	8019      	strh	r1, [r3, #0]
 80093d2:	2300      	movs	r3, #0
 80093d4:	6123      	str	r3, [r4, #16]
 80093d6:	4615      	mov	r5, r2
 80093d8:	e7ba      	b.n	8009350 <_printf_i+0x150>
 80093da:	682b      	ldr	r3, [r5, #0]
 80093dc:	1d1a      	adds	r2, r3, #4
 80093de:	602a      	str	r2, [r5, #0]
 80093e0:	681d      	ldr	r5, [r3, #0]
 80093e2:	6862      	ldr	r2, [r4, #4]
 80093e4:	2100      	movs	r1, #0
 80093e6:	4628      	mov	r0, r5
 80093e8:	f7f6 ff1a 	bl	8000220 <memchr>
 80093ec:	b108      	cbz	r0, 80093f2 <_printf_i+0x1f2>
 80093ee:	1b40      	subs	r0, r0, r5
 80093f0:	6060      	str	r0, [r4, #4]
 80093f2:	6863      	ldr	r3, [r4, #4]
 80093f4:	6123      	str	r3, [r4, #16]
 80093f6:	2300      	movs	r3, #0
 80093f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093fc:	e7a8      	b.n	8009350 <_printf_i+0x150>
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	462a      	mov	r2, r5
 8009402:	4649      	mov	r1, r9
 8009404:	4640      	mov	r0, r8
 8009406:	47d0      	blx	sl
 8009408:	3001      	adds	r0, #1
 800940a:	d0ab      	beq.n	8009364 <_printf_i+0x164>
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	079b      	lsls	r3, r3, #30
 8009410:	d413      	bmi.n	800943a <_printf_i+0x23a>
 8009412:	68e0      	ldr	r0, [r4, #12]
 8009414:	9b03      	ldr	r3, [sp, #12]
 8009416:	4298      	cmp	r0, r3
 8009418:	bfb8      	it	lt
 800941a:	4618      	movlt	r0, r3
 800941c:	e7a4      	b.n	8009368 <_printf_i+0x168>
 800941e:	2301      	movs	r3, #1
 8009420:	4632      	mov	r2, r6
 8009422:	4649      	mov	r1, r9
 8009424:	4640      	mov	r0, r8
 8009426:	47d0      	blx	sl
 8009428:	3001      	adds	r0, #1
 800942a:	d09b      	beq.n	8009364 <_printf_i+0x164>
 800942c:	3501      	adds	r5, #1
 800942e:	68e3      	ldr	r3, [r4, #12]
 8009430:	9903      	ldr	r1, [sp, #12]
 8009432:	1a5b      	subs	r3, r3, r1
 8009434:	42ab      	cmp	r3, r5
 8009436:	dcf2      	bgt.n	800941e <_printf_i+0x21e>
 8009438:	e7eb      	b.n	8009412 <_printf_i+0x212>
 800943a:	2500      	movs	r5, #0
 800943c:	f104 0619 	add.w	r6, r4, #25
 8009440:	e7f5      	b.n	800942e <_printf_i+0x22e>
 8009442:	bf00      	nop
 8009444:	080096dd 	.word	0x080096dd
 8009448:	080096ee 	.word	0x080096ee

0800944c <memmove>:
 800944c:	4288      	cmp	r0, r1
 800944e:	b510      	push	{r4, lr}
 8009450:	eb01 0402 	add.w	r4, r1, r2
 8009454:	d902      	bls.n	800945c <memmove+0x10>
 8009456:	4284      	cmp	r4, r0
 8009458:	4623      	mov	r3, r4
 800945a:	d807      	bhi.n	800946c <memmove+0x20>
 800945c:	1e43      	subs	r3, r0, #1
 800945e:	42a1      	cmp	r1, r4
 8009460:	d008      	beq.n	8009474 <memmove+0x28>
 8009462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800946a:	e7f8      	b.n	800945e <memmove+0x12>
 800946c:	4402      	add	r2, r0
 800946e:	4601      	mov	r1, r0
 8009470:	428a      	cmp	r2, r1
 8009472:	d100      	bne.n	8009476 <memmove+0x2a>
 8009474:	bd10      	pop	{r4, pc}
 8009476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800947a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800947e:	e7f7      	b.n	8009470 <memmove+0x24>

08009480 <_realloc_r>:
 8009480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009484:	4680      	mov	r8, r0
 8009486:	4614      	mov	r4, r2
 8009488:	460e      	mov	r6, r1
 800948a:	b921      	cbnz	r1, 8009496 <_realloc_r+0x16>
 800948c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009490:	4611      	mov	r1, r2
 8009492:	f7ff bb85 	b.w	8008ba0 <_malloc_r>
 8009496:	b92a      	cbnz	r2, 80094a4 <_realloc_r+0x24>
 8009498:	f7ff fc9c 	bl	8008dd4 <_free_r>
 800949c:	4625      	mov	r5, r4
 800949e:	4628      	mov	r0, r5
 80094a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a4:	f000 f81b 	bl	80094de <_malloc_usable_size_r>
 80094a8:	4284      	cmp	r4, r0
 80094aa:	4607      	mov	r7, r0
 80094ac:	d802      	bhi.n	80094b4 <_realloc_r+0x34>
 80094ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094b2:	d812      	bhi.n	80094da <_realloc_r+0x5a>
 80094b4:	4621      	mov	r1, r4
 80094b6:	4640      	mov	r0, r8
 80094b8:	f7ff fb72 	bl	8008ba0 <_malloc_r>
 80094bc:	4605      	mov	r5, r0
 80094be:	2800      	cmp	r0, #0
 80094c0:	d0ed      	beq.n	800949e <_realloc_r+0x1e>
 80094c2:	42bc      	cmp	r4, r7
 80094c4:	4622      	mov	r2, r4
 80094c6:	4631      	mov	r1, r6
 80094c8:	bf28      	it	cs
 80094ca:	463a      	movcs	r2, r7
 80094cc:	f7ff fb32 	bl	8008b34 <memcpy>
 80094d0:	4631      	mov	r1, r6
 80094d2:	4640      	mov	r0, r8
 80094d4:	f7ff fc7e 	bl	8008dd4 <_free_r>
 80094d8:	e7e1      	b.n	800949e <_realloc_r+0x1e>
 80094da:	4635      	mov	r5, r6
 80094dc:	e7df      	b.n	800949e <_realloc_r+0x1e>

080094de <_malloc_usable_size_r>:
 80094de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094e2:	1f18      	subs	r0, r3, #4
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	bfbc      	itt	lt
 80094e8:	580b      	ldrlt	r3, [r1, r0]
 80094ea:	18c0      	addlt	r0, r0, r3
 80094ec:	4770      	bx	lr
	...

080094f0 <_init>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	bf00      	nop
 80094f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094f6:	bc08      	pop	{r3}
 80094f8:	469e      	mov	lr, r3
 80094fa:	4770      	bx	lr

080094fc <_fini>:
 80094fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fe:	bf00      	nop
 8009500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009502:	bc08      	pop	{r3}
 8009504:	469e      	mov	lr, r3
 8009506:	4770      	bx	lr
